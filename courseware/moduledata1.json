{"coursetitle":"Intro to Java Programming","modules":{"1":{"title":"Introduction to Java Programming Environment","lessons":[{"title":" Introduction","video":"videos/module1/01 - Introduction.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.1"},{"title":" Introducing Kylie","video":"videos/module1/02 - Introducing Kylie.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.2"},{"title":" What Is Programming","video":"videos/module1/03 - What Is Programming.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.3"},{"title":" Java","video":"videos/module1/04 - Java.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.4"},{"title":" Hello, World","video":"videos/module1/05 - Hello, World.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.5"},{"title":"Quiz","question":"<br><br>  <p>What is the output of the code below?</p><h2>System.out.println(\"Hello, World!\")</h2><br/><input id=\"quizinput1\" type=\"text\"></input>","answer":["2c8bd89c2e3d38473f5be809b3"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.6"},{"title":" Hello, World","video":"videos/module1/06 - Hello, World.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.7"},{"title":" Downloading BlueJ","video":"videos/module1/07 - Downloading BlueJ.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.8"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson1/download-bluej.jpg' alt='no-image'/> <br/><input id=\"quizinput1\" type=\"text\"></input>","answer":["2987d798207474301b46e801fbed1b"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.9"},{"title":" Downloading BlueJ","video":"videos/module1/08 - Downloading BlueJ.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.10"},{"title":" Hello, Udacity","video":"videos/module1/11 - Hello, Udacity.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.11"},{"title":" Creating a Test Project","video":"videos/module1/12 - Creating a Test Project.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.12"},{"title":" Hello World, Two Lines","video":"videos/module1/13 - Hello World, Two Lines.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.13"},{"title":" Hello World, Two Lines","question":"// Welcome to your first programming exercise! This is the Udacity IDE or \r\n// \"Integrated Development Environment,\" where you submit your code.\r\n\r\n// If you have BlueJ installed, it is a good idea to use it for programming. Then\r\n// you just paste the solution here. For this assignment, start out with this\r\n// BlueJ project: lesson1/twoLineHello\r\n\r\n// Look for lines that begin with two slashes! These are \"comments\" and \r\n// we will use them to let you know what you should do on each programming\r\n// exercise. Have fun!\r\n\r\n\r\npublic class HelloWorld\r\n{\r\n    public static void main(String args[])\r\n    {\r\n        // Write your code to print \"Hello\" and \"World\" on separate lines below\r\n        // Hint: You can use System.out.println(\"your text here\");\r\n        // Hint2: You may need to write two lines of code.\r\n        //\r\n        // Type your code below this line here.\r\n        //\r\n        // Once you are happy with your code, you can hit the \"test\" button to \r\n        // try out your code. And once you have the correct results, you can use\r\n        // the submit button to formally submit your code.\r\n        \r\n    }\r\n}","classname":"HelloWorld","expectedoutput":"Hello\r<br>World\r<br>","programtype":"stdin","type":"program","qid":"1.14","output":"Hello\r<br>World\r<br>"},{"title":" Hello World Two Lines","video":"videos/module1/14 - Hello World Two Lines.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.15"},{"title":" Text and Numbers","video":"videos/module1/15 - Text and Numbers.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.16"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson1/text-numbers.jpg' alt='no-image'/> <br/><input style='position:absolute; top: 45%; left: 26%;height:5%; width:5%' id=\"quizinput1\" type=\"text\"></input> <br/><input style='position:absolute; top: 52%; left: 26%; height:5%; width:19.5%'id=\"quizinput2\" type=\"text\"></input>","answer":["55dc","57ce9fd07531333065"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.17"},{"title":" Text and Numbers","video":"videos/module1/16 - Text and Numbers.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.18"},{"title":" Our First Program","video":"videos/module1/17 - Our First Program.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.19"},{"title":" print and println","video":"videos/module1/18 - print and println.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.20"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson1/print.jpg' alt='no-image'/> <br/><input style='position:absolute; top: 45%; left: 35%;height:5%; width:18%' id=\"quizinput1\" type=\"text\"></input> ","answer":["57d7"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.21"},{"title":" print and println","video":"videos/module1/19 - print and println.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.22"},{"title":" Errors","video":"videos/module1/20 - Errors.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.23"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson1/error.jpg' alt='no-image'/> <br/><input style='position:absolute; top: 45.6%; left: 69.5%;' type='checkbox' class='Checkboxinput' value='a'><br><input style='position:absolute; top: 49%; left: 85.5%;' type='checkbox' class='Checkboxinput' value='b'><br><input style='position:absolute; top: 53%; left: 85.5%;' type='checkbox' class='Checkboxinput' value='c'><br><input style='position:absolute; top: 55%; left: 72.5%;' type='checkbox' class='Checkboxinput' value='d'>","answer":["07"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.24"},{"title":" Errors","video":"videos/module1/21 - Errors.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.25"},{"title":" Compile-Time and Runtime Errors","video":"videos/module1/22 - Compile-Time and Runtime Errors.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.26"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson1/complie.jpg'><input style='position:absolute; top:36.5%; left:26.5%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:51.3%; left:26%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input>","answer":["05"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.27"},{"title":" Compile-Time and Runtime Errors","video":"videos/module1/23 - Compile-Time and Runtime Errors.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.28"},{"title":" Compile-Time and Runtime Errors 2","video":"videos/module1/24 - Compile-Time and Runtime Errors 2.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.29"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson1/complie1.jpg'><input style='position:absolute; top:38%; left:53.3%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:55%; left:53%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input>","answer":["06"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.30"},{"title":" Compile-Time and Runtime Errors 2","video":"videos/module1/25 - Compile-Time and Runtime Errors 2.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.31"},{"title":" Kylies Advice When You Run into Errors","video":"videos/module1/26 - Kylies Advice When You Run into Errors.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.32"},{"title":" Algorithms","video":"videos/module1/27 - Algorithms.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.33"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson1/algo.jpg'><input style='position:absolute; top:26%; left:57%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:35%; left:57%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input> <input style='position:absolute; top:43.5%; left:57%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input> <input style='position:absolute; top:52%; left:57%;' name='option' value='d' id=\"quizinput4\" type=\"radio\"></input>","answer":["00"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.34"},{"title":" Algorithms","video":"videos/module1/28 - Algorithms.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.35"},{"title":" Algorithms 2","video":"videos/module1/29 - Algorithms 2.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.36"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson1/algo2.jpg' alt='no-image'/> <br/><input style='position:absolute; top: 46%; left: 55%;height:4%; width:12%' id=\"quizinput1\" type=\"text\"></input> <input style='position:absolute; top: 46%; left: 74%; height:4%; width:11%'id=\"quizinput2\" type=\"text\"></input>","answer":["57db84c071","57da84c071"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.37"},{"title":" Algorithms 2","video":"videos/module1/30 - Algorithms 2.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.38"},{"title":" Tidying Legos","video":"videos/module1/31 - Tidying Legos.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.39"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson1/legos.jpg' alt='no-image'/> <br/><input style='position:absolute; top: 45%; left: 66.5%;height:4%; width:11%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top: 54%; left: 66%; height:4%; width:11%'id=\"quizinput2\" type=\"text\"></input>","answer":["068ccd923868","068cd6893868"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.40"},{"title":" Tidying Legos","video":"videos/module1/32 - Tidying Legos.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.41"},{"title":" What Does This Pseudocode Print","video":"videos/module1/33 - What Does This Pseudocode Print.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.42"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson1/pseud.jpg' alt='no-image'/> <br/><input style='position:absolute; top: 64.5%; left: 15%;height:5%; width:24.5%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top: 63.5%; left: 50%; height:5%; width:32%'id=\"quizinput2\" type=\"text\"></input>","answer":["55dd9ac877","179ed8993565717e3709e54df0ea1097"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> There is no right answer for this question.","qid":"1.43"},{"title":" What Does This Pseudocode Print","video":"videos/module1/34 - What Does This Pseudocode Print.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.44"},{"title":" Another Pseudocode Example","video":"videos/module1/35 - Another Pseudocode Example.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.45"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson1/pseudoprint.jpg' alt='no-image'/> <br/><textarea style='position:absolute; top: 20%; left: 52%; width:12%; height:25%' id=\"quizinput1\" type=\"textarea\"></textarea>","answer":["55debec54b202e1a6823b067a0"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.46"},{"title":" Another Pseudocode Example","video":"videos/module1/36 - Another Pseudocode Example.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.47"},{"title":" Move to the First Yellow-Blue Lego","video":"videos/module1/37 - Move to the First Yellow-Blue Lego.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.48"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson1/blue.png' alt='no-image'/> <br/><input style='position:absolute; top: 27%; left: 57%;height:5%; width:30%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top: 34%; left: 57%; height:4%; width:30%'id=\"quizinput2\" type=\"text\"></input><input style='position:absolute; top: 40%; left: 60%; height:4%; width:27%'id=\"quizinput3\" type=\"text\"></input><input style='position:absolute; top: 46%; left: 63%; height:4%; width:24%'id=\"quizinput4\" type=\"text\"></input><input style='position:absolute; top: 57%; left: 63%; height:4%; width:24%'id=\"quizinput5\" type=\"text\"></input><input style='position:absolute; top: 67.5%; left: 63%; height:4%; width:24%'id=\"quizinput6\" type=\"text\"></input>","answer":["0981c2956170747c705dec08b2f41d82f35b8bf4c4efd82478ac5362","1386dd9c2431767f2409e202e7ed18","0d88948429743860394ce708b2fa138ef45d81f4dce8d26f7da752369f9d396a8d1892cf868d","0981c295617e7675705af40cf1e65c89ba488ca0","179adb806f31617f2509e202e7ed18dbba5b","0981c295617e7675705af40cf1e65c89ba488ca0"],"type":"quiz","tips":"Hint: You will have to use \"move one space right\" twice, and you may not use all the options.<br/><b>You can copy paste the lines from here if you don't want to type them: </b><br/><br/> while not found<br/>else if the piece to the right is yellow<br/>move all the way to the left<br/>move one space right<br/>if the piece you're looking at is blue<br/>stop. you found it<br/>else if the piece to the right is blue<br/>move all the way to the right","qid":"1.49"},{"title":" Move to the First Yellow-Blue Lego","video":"videos/module1/38 - Move to the First Yellow-Blue Lego.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.50"},{"title":" Why Is This Not a Correct Algorithm","video":"videos/module1/39 - Why Is This Not a Correct Algorithm.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.51"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson1/correctalgo.png'><input style='position:absolute; top:50.5%; left:11%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:58.5%; left:11%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:65.5%; left:11%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input>","answer":["07"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.52"},{"title":" Why Is This Not a Correct Algorithm","video":"videos/module1/40 - Why Is This Not a Correct Algorithm.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.53"},{"title":" What Does This Algorithm Do","video":"videos/module1/41 - What Does This Algorithm Do.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.54"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson1/algodo.png'><input style='position:absolute; top:66%; left:36%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:65.5%; left:60.5%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:73%; left:36%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:72%; left:60.5%;' name='option' value='d' id=\"quizinput4\" type=\"radio\"></input>","answer":["07"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.55"},{"title":" What Does This Algorithm Do","video":"videos/module1/42 - What Does This Algorithm Do.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.56"},{"title":" Kylies Advice for You","video":"videos/module1/43 - Kylies Advice for You.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.57"},{"title":" Congratulations","video":"videos/module1/44 - Congratulations.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"1.58"}]},"2":{"title":"Objects","lessons":[{"title":" Introduction","video":"videos/module2/01 - Introduction.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.1"},{"title":" Introducing Ellora","video":"videos/module2/02 - Introducing Ellora.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.2"},{"title":" Why OOP Is Important","video":"videos/module2/03 - Why OOP Is Important.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.3"},{"title":" Objects","video":"videos/module2/04 - Objects.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.4"},{"title":" Objects Demo","video":"videos/module2/05 - Objects Demo.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.5"},{"title":" Mariner 4","video":"videos/module2/06 - Mariner 4.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.6"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-1.jpg'><input style='position:absolute; top:40%; left:40%; height:6%; width:25%' placeholder='yyyy-dd-mm' id=\"quizinput1\" type=\"text\"></input>","answer":["55d782c56c212f3d611d"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.7"},{"title":" Mariner 4","video":"videos/module2/07 - Mariner 4.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.8"},{"title":" Classes","video":"videos/module2/08 - Classes.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.9"},{"title":" Match the Methods","video":"videos/module2/09 - Match the Methods.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.10"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-2.jpg'><input style='position:absolute; top:17%; left:51%; height:5%; width:6%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:30%; left:54.5%; height:5%; width:6%' id=\"quizinput2\" type=\"text\"></input><input style='position:absolute; top:41%; left:59.5%; height:5%; width:6%' id=\"quizinput3\" type=\"text\"></input><input style='position:absolute; top:52%; left:45%; height:5%; width:7%' id=\"quizinput4\" type=\"text\"></input>","answer":["07","06","07","05"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.11"},{"title":" Match the Methods","video":"videos/module2/10 - Match the Methods.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.12"},{"title":" Drawing Pictures","video":"videos/module2/11 - Drawing Pictures.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.13"},{"title":" What Does This Method Do","video":"videos/module2/12 - What Does This Method Do.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.14"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-3.jpg'><input style='position:absolute; top:18%; left:60%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:38%; left:59%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:53%; left:59%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:67%; left:59%;' name='option' value='d' id=\"quizinput3\" type=\"radio\"></input>","answer":["07"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.15"},{"title":" What Does This Method Do","video":"videos/module2/13 - What Does This Method Do.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.16"},{"title":" Variables","video":"videos/module2/14 - Variables.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.17"},{"title":" Variable Names","video":"videos/module2/15 - Variable Names.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.18"},{"title":" An Exercise on Variable Names","video":"videos/module2/16 - An Exercise on Variable Names.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.19"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-4.jpg'><input style='position:absolute; top:40%; left:19.5%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:48%; left:20%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:56%; left:20%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:63%; left:20.5%;' name='option' value='d' id=\"quizinput3\" type=\"radio\"></input>","answer":["06"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.20"},{"title":" An Exercise on Variable Names","video":"videos/module2/17 - An Exercise on Variable Names.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.21"},{"title":" Variable Types","video":"videos/module2/18 - Variable Types.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.22"},{"title":" Variable Types","video":"videos/module2/19 - Variable Types.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.23"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-5.jpg'><input style='position:absolute; top:44%; left:22.5%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:52%; left:23%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:60%; left:23.5%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:67%; left:24%;' name='option' value='d' id=\"quizinput3\" type=\"radio\"></input>","answer":["05"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.24"},{"title":" Variable Types","video":"videos/module2/20 - Variable Types.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.25"},{"title":" Initial Values","video":"videos/module2/21 - Initial Values.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.26"},{"title":" Initial Values","video":"videos/module2/22 - Initial Values.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.27"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-6.jpg'><input style='position:absolute; top:43%; left:19.5%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:51%; left:19.5%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:59%; left:20%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:66%; left:20.5%;' name='option' value='d' id=\"quizinput3\" type=\"radio\"></input>","answer":["07"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.28"},{"title":" Initial Values","video":"videos/module2/23 - Initial Values.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.29"},{"title":" Comments","video":"videos/module2/24 - Comments.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.30"},{"title":" How Many Days","video":"videos/module2/25 - How Many Days.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.31"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-7.jpg'><input style='position:absolute; top:43.5%; left:78%; height:6%; width:12%' id=\"quizinput1\" type=\"text\"></input>","answer":["56dc87c378"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.32"},{"title":" How Many Days","video":"videos/module2/26 - How Many Days.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.33"},{"title":" Adding Comments","video":"videos/module2/27 - Adding Comments.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.34"},{"title":"Quiz","question":"public class DaysAlivePrinter\r\n{\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tDay birthday = new Day(1951, 5, 25);\r\n\t\tDay lastDay = new Day(2012, 7 ,23);\r\n\t\tint daysAlive = lastDay.daysFrom(birthday);\r\n\t\tSystem.out.println(daysAlive);\r\n\t}\r\n}","classname":"DaysAlivePrinter","expectedoutput":"","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming<br><br><br>There is no solution for this problem.","qid":"2.35","output":"E:\\new\\Electronv253\\resources\\courseware\\programs\\DaysAlivePrinter.java:5: error: cannot find symbol\r<br>\t\tDay birthday = new Day(1951, 5, 25);\r<br>\t\t^\r<br>  symbol:   class Day\r<br>  location: class DaysAlivePrinter\r<br>E:\\new\\Electronv253\\resources\\courseware\\programs\\DaysAlivePrinter.java:5: error: cannot find symbol\r<br>\t\tDay birthday = new Day(1951, 5, 25);\r<br>\t\t                   ^\r<br>  symbol:   class Day\r<br>  location: class DaysAlivePrinter\r<br>E:\\new\\Electronv253\\resources\\courseware\\programs\\DaysAlivePrinter.java:6: error: cannot find symbol\r<br>\t\tDay lastDay = new Day(2012, 7 ,23);\r<br>\t\t^\r<br>  symbol:   class Day\r<br>  location: class DaysAlivePrinter\r<br>E:\\new\\Electronv253\\resources\\courseware\\programs\\DaysAlivePrinter.java:6: error: cannot find symbol\r<br>\t\tDay lastDay = new Day(2012, 7 ,23);\r<br>\t\t                  ^\r<br>  symbol:   class Day\r<br>  location: class DaysAlivePrinter\r<br>4 errors\r<br>"},{"title":" Adding Comments","video":"videos/module2/28 - Adding Comments.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.36"},{"title":" Variable Declarations The Fine Print","video":"videos/module2/29 - Variable Declarations The Fine Print.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.37"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-8.png'><input style='position:absolute; top:27%; left:3%; height:5%; width:5%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:35%; left:3%; height:5%; width:5%' id=\"quizinput2\" type=\"text\"></input><input style='position:absolute; top:41.5%; left:3%; height:5%; width:5%' id=\"quizinput3\" type=\"text\"></input><input style='position:absolute; top:48%; left:3%; height:5%; width:5%' id=\"quizinput4\" type=\"text\"></input><input style='position:absolute; top:54.5%; left:3%; height:5%; width:5%' id=\"quizinput5\" type=\"text\"></input><input style='position:absolute; top:61%; left:3%; height:5%; width:5%' id=\"quizinput6\" type=\"text\"></input><input style='position:absolute; top:67.5%; left:3%; height:5%; width:5%' id=\"quizinput7\" type=\"text\"></input>","answer":["00","07","02","05","03","06","01"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"2.38"},{"title":" Variable Declarations The Fine Print","video":"videos/module2/30 - Variable Declarations The Fine Print.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.39"},{"title":" Variables Values Can Change","video":"videos/module2/31 - Variables Values Can Change.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.40"},{"title":" Public Interfaces","video":"videos/module2/32 - Public Interfaces.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.41"},{"title":" Public Interfaces 2","video":"videos/module2/33 - Public Interfaces 2.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.42"},{"title":" Arguments and Return Values","video":"videos/module2/34 - Arguments and Return Values.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.43"},{"title":" Arguments and Return Values Exercise","video":"videos/module2/35 - Arguments and Return Values Exercise.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.44"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-9.jpg'><input style='position:absolute; top:32%; right:18%; height:6%; width:25%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:45%; right:7%; height:6%; width:20%' id=\"quizinput2\" type=\"text\"></input>","answer":["0687c68429757969","0d80c0"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"2.45"},{"title":" Arguments and Return Values Exercise","video":"videos/module2/36 - Arguments and Return Values Exercise.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.46"},{"title":" Method Declarations","video":"videos/module2/37 - Method Declarations.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.47"},{"title":" Method Description","video":"videos/module2/38 - Method Description.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.48"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-10.jpg'><input style='position:absolute; top:22.5%; left:41%; height:4%; width:10%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:28.5%; left:59%; height:4%; width:10%' id=\"quizinput2\" type=\"text\"></input>","answer":["54","0d80c0"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"2.49"},{"title":" Method Description","video":"videos/module2/39 - Method Description.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.50"},{"title":" More Method Descriptions","video":"videos/module2/40 - More Method Descriptions.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.51"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-11.jpg'><input style='position:absolute; top:41%; left:40%; height:4%; width:10%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:45.5%; left:58%; height:4%; width:16%' id=\"quizinput2\" type=\"text\"></input><input style='position:absolute; top:51.5%; left:62%; height:4%; width:14%' id=\"quizinput3\" type=\"text\"></input><input style='position:absolute; top:59%; left:39%; height:4%; width:10%' id=\"quizinput4\" type=\"text\"></input><input style='position:absolute; top:64%; left:32.5%; height:4%; width:10%' id=\"quizinput5\" type=\"text\"></input><input style='position:absolute; top:67%; left:51.5%; height:5%; width:10%' id=\"quizinput6\" type=\"text\"></input>","answer":["56","379ac6992f76","379ac6992f76","55","379ac6992f76","54"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"2.52"},{"title":" More Method Descriptions","video":"videos/module2/41 - More Method Descriptions.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.53"},{"title":" Constructing Objects","video":"videos/module2/42 - Constructing Objects.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"2.54"}]},"3":{"title":"Objects","lessons":[{"title":" Making Rectangles","video":"videos/module3/43 - Making Rectangles.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.1"},{"title":" Constructing Rectangles","video":"videos/module3/44 - Constructing Rectangles.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.2"},{"title":"Constructing Rectangles","question":"// BlueJ project: lesson2/touchingRectangles\r\n//\r\n// You need to construct and draw two rectangles for this quiz.\r\n//\r\n// Both rectangles have width 20 and height 30. The first rectangle\r\n// has top left corner at (60, 90). The bottom right corner of the \r\n// first rectangle should be the top left corner of the second \r\n// rectangle. \r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\n\r\n\r\n\r\npublic class touchingRectangles\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        //Write your code here\r\n        \r\n        Canvas.getInstance().snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\n","testcases":"class CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\touchingRectangles.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"touchingRectangles","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"3.3","output":"Testcase Passed: true\r<br>"},{"title":" Constructing Rectangles","video":"videos/module3/45 - Constructing Rectangles.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.4"},{"title":" String Methods","video":"videos/module3/46 - String Methods.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.5"},{"title":" The replace Method","video":"videos/module3/47 - The replace Method.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.6"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-12.jpg'><input style='position:absolute; top:40.5%; left:13.5%; height:8%; width:50%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:66%; left:14.5%; height:8%; width:37%' id=\"quizinput2\" type=\"text\"></input>","answer":["1687c295333f6a752045e50ef7ab5e92f103c6ac92ae86","2996c78339626b682059fc"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"3.7"},{"title":" The replace Method","video":"videos/module3/48 - The replace Method.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.8"},{"title":" The trim Method","video":"videos/module3/49 - The trim Method.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.9"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-13.png'><input style='position:absolute; top:66.5%; left:60.5%; height:6%; width:22%' id=\"quizinput1\" type=\"text\"></input>","answer":["2c8bd89c2e3d38432048e708b3"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"3.10"},{"title":" The trim Method","video":"videos/module3/50 - The trim Method.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.11"},{"title":" toUpperCase and toLowerCase","video":"videos/module3/51 - toUpperCase and toLowerCase.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.12"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-14.png'><input style='position:absolute; top:34%; left:38%; height:5%; width:20%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:42.5%; left:38%; height:5%; width:20%' id=\"quizinput2\" type=\"text\"></input><input style='position:absolute; top:50%; left:54.5%; height:5%; width:20%' id=\"quizinput3\" type=\"text\"></input><input style='position:absolute; top:66.5%; left:38.5%; height:6%; width:19%' id=\"quizinput4\" type=\"text\"></input>","answer":["29a7e7a308424b590079cd","0987c78328626b792059ed","0987c78328626b792059ed","2987c78328626b792059ed"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"3.13"},{"title":" toUpperCase and toLowerCase","video":"videos/module3/52 - toUpperCase and toLowerCase.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.14"},{"title":" Accessors and Mutators","video":"videos/module3/53 - Accessors and Mutators.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.15"},{"title":" Accessor or Mutator","video":"videos/module3/54 - Accessor or Mutator.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.16"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-15.jpg'><textarea style=\"position:absolute; top:31%; left:68%; height:12%\" id=\"quizinput1\" type=\"textarea\"></textarea><input style='position:absolute; top:54%; left:69.5%;' name='option' value='a' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:65%; left:69.5%;' name='option' value='b' id=\"quizinput3\" type=\"radio\"></input>","answer":["2e8bd89c2e1b50753c45eb","05"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.17"},{"title":" Accessor or Mutator","video":"videos/module3/55 - Accessor or Mutator.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.18"},{"title":" Accessor or Mutator 2","video":"videos/module3/56 - Accessor or Mutator 2.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.19"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-16.jpg'><textarea style=\"position:absolute; top:31%; left:68%; height:17.5%; width:21%\" id=\"quizinput1\" type=\"textarea\"></textarea><input style='position:absolute; top:59%; left:72%;' name='option' value='a' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:68.5%; left:72%;' name='option' value='b' id=\"quizinput3\" type=\"radio\"></input>","answer":["51c084fa772136205a1ab443a2894acbfd1f","06"],"type":"quiz","tips":"<p>Note: Since it's cut off, here's the first line of the code written above:</p><pre>Rectangle box = new Rectangle(5, 10, 60, 90);</pre><br>Video Source: udacity.com <br> Intro to Java Programming","qid":"3.20"},{"title":" Accessor or Mutator 2","video":"videos/module3/57 - Accessor or Mutator 2.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.21"},{"title":" Pitfall","video":"videos/module3/58 - Pitfall.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.22"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-17.jpg'><input style='position:absolute; top:55.5%; left:73.5%; height:5%; width:7%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:74%; left:74%; height:4%; width:6.5%' id=\"quizinput2\" type=\"text\"></input>","answer":["55de81de71","55de81de71"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"3.23"},{"title":" Pitfall","video":"videos/module3/59 - Pitfall.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.24"},{"title":" Shared Objects","video":"videos/module3/60 - Shared Objects.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.25"},{"title":" Copying Rectangles","video":"videos/module3/61 - Copying Rectangles.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.26"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-18.jpg'><input style='position:absolute; top:18%; left:72%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:35%; left:72%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:49.5%; left:72%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:63%; left:72%;' name='option' value='d' id=\"quizinput4\" type=\"radio\"></input>","answer":["07"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.27"},{"title":" Copying Rectangles","video":"videos/module3/62 - Copying Rectangles.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.28"},{"title":" Copying Strings","video":"videos/module3/63 - Copying Strings.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.29"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-19.png'><input style='position:absolute; top:31%; left:74.5%; height:8.5%; width:16%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:67.5%; left:74.5%; height:8%; width:17%' id=\"quizinput2\" type=\"text\"></input>","answer":["2c8bd89c2e3d38473f5be809b3","2c8bd89c2e3d38473f5be809b3"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"3.30"},{"title":" Copying Strings","video":"videos/module3/64 - Copying Strings.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.31"},{"title":" Copying Numbers","video":"videos/module3/65 - Copying Numbers.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.32"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-20.jpg'><input style='position:absolute; top:21%; left:79%; height:8.5%; width:9%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:47%; left:80.5%; height:8.5%; width:9%' id=\"quizinput2\" type=\"text\"></input>","answer":["55dd","55dc"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"3.33"},{"title":" Copying Numbers","video":"videos/module3/66 - Copying Numbers.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.34"},{"title":" Implementing a Test Program","video":"videos/module3/67 - Implementing a Test Program.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.35"},{"title":" Test Program","video":"videos/module3/68 - Test Program.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.36"},{"title":"Test Program","question":"// BlueJ project lesson2/growtester\r\n// \r\n// Print out the actual AND expected values for the\r\n// x- and y-position, the width, and the height of the \r\n// rectangle after growing it. \r\n// To print out a value and its expected value, use \r\n// use this format: \r\n\r\n// System.out.println(box.getX());\r\n// System.out.println(\"Expected: 50\");\r\n// System.out.println(box.getY());\r\n// System.out.println(\"Expected: 50\");\r\n// ...\r\n\r\n// Replace 50 with the value that you actually expect.\r\n\r\npublic class RectangleDemo\r\n{\r\n\tpublic static void main(String args[])\r\n\t{\r\n\t\tRectangle box = new Rectangle(45, 90, 60, 90);\r\n\t\tbox.grow(20, 20);\r\n        \r\n        // You need to print out the following values of box and its expected values:\r\n        //\r\n        // X, by using box.getX();\r\n        // Y, by using box.getY();\r\n        // width, by using box.getWidth();\r\n        // height, by using box.getHeight();\r\n        // \r\n        // To print out a value and its expected value, use System.out.println(...);\r\n        // For example:\r\n        // System.out.println(box.getY());\r\n        // System.out.println(\"Expected: \" + 50);\r\n        // \r\n\t\t// Print out the actual and test values below this line:\r\n\t}\r\n}","classname":"RectangleDemo","expectedoutput":"25\r\nExpected: 25\r\n70\r\nExpected: 70\r\n100\r\nExpected: 100\r\n130\r\nExpected: 130\r\n","programtype":"stdin","type":"program","qid":"3.37","output":"E:\\new\\Electronv253\\resources\\courseware\\programs\\RectangleDemo.java:21: error: cannot find symbol\r<br>\t\tRectangle box = new Rectangle(45, 90, 60, 90);\r<br>\t\t^\r<br>  symbol:   class Rectangle\r<br>  location: class RectangleDemo\r<br>E:\\new\\Electronv253\\resources\\courseware\\programs\\RectangleDemo.java:21: error: cannot find symbol\r<br>\t\tRectangle box = new Rectangle(45, 90, 60, 90);\r<br>\t\t                    ^\r<br>  symbol:   class Rectangle\r<br>  location: class RectangleDemo\r<br>2 errors\r<br>"},{"title":" Test Program","video":"videos/module3/69 - Test Program.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.38"},{"title":" Why Its Important to Test Your Code","video":"videos/module3/70 - Why Its Important to Test Your Code.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.39"},{"title":" More About Graphics","video":"videos/module3/71 - More About Graphics.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.40"},{"title":" Draw a Crate","video":"videos/module3/72 - Draw a Crate.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.41"},{"title":"Draw a Crate","question":"// BlueJ project: lesson2/crate\r\n\r\n// Draw a crate by combining a rectangle with five lines.\r\n//\r\n// The front face is a rectangle with top left corner (20, 30), \r\n// width 100, and height 40. \r\n//\r\n// A diagonal line goes from the face's top left corner  to (50, 10). \r\n// Another diagonal line goes from the face's bottom right corner \r\n// to (150, 50).\r\n// A third diagonal starts at the face's top right corner and is\r\n// parallel to the others.\r\n// The fourth and fifth line join the end points of the diagonals.\r\n//\r\n// Before programming, get out a pen and draw the crate on a\r\n// sheet of paper! Label each of the points with their coordinates.\r\n//\r\n// Also, don't forget to call draw() on your rectangle and line objects.\r\n\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\n\r\npublic class DrawACrate\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Rectangle face = ...;\r\n        face.draw();\r\n        Line line1 = ...;\r\n        line1.draw();\r\n        //Write your code here\r\n\r\n\r\n        Canvas.getInstance().snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\DrawACrate.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"DrawACrate","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"3.42","output":"Testcase Passed: true\r<br>"},{"title":" Draw a Crate","video":"videos/module3/73 - Draw a Crate.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.43"},{"title":" Write Top Secret","video":"videos/module3/74 - Write Top Secret.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.44"},{"title":"Write Top Secret","question":"// BlueJ project: lesson2/crate2\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\n\r\npublic class TopSecret\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Rectangle frontFace = new Rectangle(20, 30 ,100, 40);\r\n        Line leftLine = new Line(20, 30, 50, 10);\r\n        Line topLine = new Line(50, 10, 150, 10);\r\n        Line middleLine = new Line(120, 30, 150, 10);\r\n        Line rightLine = new Line(150, 10, 150, 50);\r\n        Line bottomLine = new Line(120, 70, 150, 50);\r\n\r\n        frontFace.draw();\r\n        leftLine.draw();\r\n        topLine.draw();\r\n        middleLine.draw();\r\n        rightLine.draw();\r\n        bottomLine.draw();\r\n        \r\n        // TODO: Write TOP SECRET on the front face of the box.\r\n        // The top left corner of the front face should be the\r\n        // same as the top left corner of the text.\r\n        Canvas.getInstance().snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\TopSecret.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"TopSecret","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"3.45"},{"title":" Write Top Secret","video":"videos/module3/75 - Write Top Secret.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.46"},{"title":" Intro to Color","video":"videos/module3/76 - Intro to Color.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.47"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-21.jpg'><input style='position:absolute; top:40%; left:68%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:50%; left:68%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:61%; left:68%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:72%; left:68%;' name='option' value='d' id=\"quizinput4\" type=\"radio\"></input><input style='position:absolute; top:39%; left:84%;' name='option1' value='a' id=\"quizinput5\" type=\"radio\"></input><input style='position:absolute; top:49%; left:84%;' name='option1' value='b' id=\"quizinput6\" type=\"radio\"></input><input style='position:absolute; top:61%; left:84%;' name='option1' value='c' id=\"quizinput7\" type=\"radio\"></input><input style='position:absolute; top:71%; left:84%;' name='option1' value='d' id=\"quizinput8\" type=\"radio\"></input>","answer":["06","07"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.48"},{"title":" Intro to Color","video":"videos/module3/77 - Intro to Color.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.49"},{"title":" Colors","video":"videos/module3/78 - Colors.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.50"},{"title":" Matching Color","video":"videos/module3/79 - Matching Color.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.51"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson2/image-22.jpg'><input style='position:absolute; top:25%; left:35%; height:5%; width:5%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:31.5%; left:35%; height:5%; width:5%' id=\"quizinput2\" type=\"text\"></input><input style='position:absolute; top:37.5%; left:35%; height:5%; width:5.5%' id=\"quizinput3\" type=\"text\"></input><input style='position:absolute; top:44%; left:35%; height:5%; width:5.5%' id=\"quizinput4\" type=\"text\"></input>","answer":["07","06","00","05"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.52"},{"title":" Matching Color","video":"videos/module3/80 - Matching Color.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.53"},{"title":" An Interesting Project Ellora Worked On","video":"videos/module3/81 - An Interesting Project Ellora Worked On.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.54"},{"title":" Elloras Advice to You","video":"videos/module3/82 - Elloras Advice to You.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.55"},{"title":" Conclusion","video":"videos/module3/83 - Conclusion.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"3.56"}]},"4":{"title":"Problem Set 1","lessons":[{"title":"Short problem 1 - Variable cost","question":"<img src='images/Problem Set 1/1.1.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0081c1922d7438733f5af050a3b152cee214"],"type":"quiz","tips":"","qid":"4.1"},{"title":"Short problem 2 - Variable course","question":"<img src='images/Problem Set 1/1.2.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["379ac6992f7638733f5cf61ef7be5e8eb74e87bdc4fe9f3f"],"type":"quiz","tips":"","qid":"4.2"},{"title":"Short Problem 3 - Valid Variable Names","question":"<img src='images/Problem Set 1/1.3.jpg' alt='image'><br><br><form class='form-horizontal'><div class='form-group text-left' style='margin-left:155px'><font size='4px' color='green'><input type='checkbox' class='Checkboxinput' value='a'>&nbsp;age<br><input type='checkbox' class='Checkboxinput' value='b'>&nbsp;class<br><input type='checkbox' class='Checkboxinput' value='c'>&nbsp;int<br><input type='checkbox' class='Checkboxinput' value='d'>&nbsp;7ofspeeds<br><input type='checkbox' class='Checkboxinput' value='e'>&nbsp;k@udacity<br><input type='checkbox' class='Checkboxinput' value='f'>&nbsp;bank account<br><input type='checkbox' class='Checkboxinput' value='g'>&nbsp;costPerUnit<br></div></form>","answer":["05","03"],"type":"quiz","tips":"","qid":"4.3"},{"title":"Short Problem 4 - Variable count","question":"<img src='images/Problem Set 1/1.4.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0781c19e352c29206012"],"type":"quiz","tips":"","qid":"4.4"},{"title":"Short Problem 5 - Variable Names","question":"<img src='images/Problem Set 1/1.5.jpg' alt='image'><br><p style='text-align:left; margin-left:40%; color:green; font-size:20px'><input name='option' value='a' id=\"quizinput1\" type=\"radio\">&nbsp;a</input><br><input name='option' value='b' id=\"quizinput2\" type=\"radio\">&nbsp;s</input><br><input name='option' value='c' id=\"quizinput3\" type=\"radio\">&nbsp;x</input><br><input name='option' value='d' id=\"quizinput4\" type=\"radio\">&nbsp;areaofSquare</input><br><input name='option' value='e' id=\"quizinput5\" type=\"radio\">&nbsp;area</input></p>","answer":["00"],"type":"quiz","tips":"","qid":"4.5"},{"title":" Short Problem 6 - Value of mystery","question":"<img src='images/Problem Set 1/1.6.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["49df87"],"type":"quiz","tips":"int mystery = 10;<br>mystery = mystery*2;<br>mystery = 7-mystery;","qid":"4.6"},{"title":"Short Problem 7 - String Length","question":"//Complete the code to find and print the length of the string course\n\npublic class LengthPrinter\n{\n    public static void main(String[] args)\n    {\n        String course = \"Udacity\"; //do not modify this line in any way\n\n        // TODO Complete the code to find and print the length of the string course\n        // HINT: There is a method called .length() that will return the number of\n        // characters in a string\n\n    }\n}\n\n","classname":"LengthPrinter","expectedoutput":"7\r<br>","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"4.7","output":""},{"title":" Short Problem 8 - What Type of Method?","question":"<img src='images/Problem Set 1/1.8.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["058dd79532627762"],"type":"quiz","tips":"","qid":"4.8"},{"title":" Short Problem 9 - Mississippi","question":"<img src='images/Problem Set 1/1.9.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["5c"],"type":"quiz","tips":"","qid":"4.9"},{"title":" Short Problem 10 - Construct Rectangle","question":"<img src='images/Problem Set 1/1.10.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0a8bc3d013747b643147e301f7ab4dcbe303d1e49cb18d2820f91c"],"type":"quiz","tips":"","qid":"4.10"},{"title":" Short Problem 11 - Construct Square","question":"<img src='images/Problem Set 1/1.11.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":"","type":"quiz","tips":"","qid":"4.11"},{"title":" Short Problem 12 - getWidth","question":"<img src='images/Problem Set 1/1.12.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input><br><img src='images/Problem Set 1/1.12.1.jpg' alt='image'>","answer":["0081c1922d74"],"type":"quiz","tips":"","qid":"4.12"},{"title":" Short Problem 13 - Translate Rectangle","question":"<img src='images/Problem Set 1/1.13.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["57de"],"type":"quiz","tips":"","qid":"4.13"},{"title":" Short Problem 14 - toUpperCase","question":"<img src='images/Problem Set 1/1.14.jpg' alt='image'><br><textarea rows='4' cols='30' id=\"quizinput1\"></textarea>","answer":["31aaf5b30845411a054de50efbf705"],"type":"quiz","tips":"","qid":"4.14"},{"title":" Short Problem 15 - charAt","question":"<img src='images/Problem Set 1/1.15.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0d80c0"],"type":"quiz","tips":"","qid":"4.15"},{"title":" Short Problem 16 - getX","question":"<img src='images/Problem Set 1/1.16.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0081c1922d74"],"type":"quiz","tips":"","qid":"4.16"},{"title":" Short Problem 17 - What Does This Print?","question":"<img src='images/Problem Set 1/1.17.jpg' alt='image'><br><textarea rows='4' cols='30' id=\"quizinput1\"></textarea>","answer":["55dc81fa70232d"],"type":"quiz","tips":"","qid":"4.17"},{"title":" Short Problem 18 - What Does This Print?","question":"<img src='images/Problem Set 1/1.18.jpg' alt='image'><br><textarea rows='4' cols='30' id=\"quizinput1\" type=\"text\"></textarea>","answer":["55de84fa7921"],"type":"quiz","tips":"","qid":"4.18"},{"title":"Short Problem 19 - Lowercase String","question":"// Complete the code to print the string course in all lowercase.\n\nimport java.io.*;\n\npublic class LowerCasePrinter\n{\n    public static void main(String[] args)\n    {\n        String course = \"Udacity\"; //do not modify this line in any way\n\n        //TODO: complete the code to print the string in all lowercase.\n\n    }\n}\n\n","classname":"LowerCasePrinter","expectedoutput":"udacity\r<br>","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"4.19","output":"udacity\r<br>"},{"title":"Short Problem 20 - String Replace","question":"// Complete the code to replace the first occurence of 'a' with an 'x'\n\npublic class ReplacePrinter\n{\n    public static void main(String[] args)\n    {\n        String course = \"Udacity\"; //do not modify this line in any way\n\n        //TODO complete the code to replace the first occurence of 'a' with an 'x'\n        //and don't forget to print it out!\n\n    }\n}\n\n","classname":"ReplacePrinter","expectedoutput":"Udxcity\r<br>","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"4.20","output":""},{"title":" Question 1 - What Does This Print?","question":"<img src='images/Problem Set 1/Q1.jpg' alt='image'><br><textarea rows='4' cols='30' id=\"quizinput1\" type=\"text\"></textarea>","answer":["50dc94db612612246923cc08feef13acbc5d88b0"],"type":"quiz","tips":"","qid":"4.21"},{"title":"Question 2 - NameInBox","question":"//Write a program that will print the word Udacity in a box\n  // so that it looks exactly like the figure below. Name the program NameInBox\n\n// +-------+\n// |Udacity|\n// +-------+ \n//\n\n\npublic class NameInBox\n{\npublic static void main(String[] args)\n{\n//TODO finish the draft so that your code prints Udacity in a box\n}\n}\n\n","classname":"NameInBox","expectedoutput":"+-------+\r<br>|Udacity|\r<br>+-------+\r<br>","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"4.22","output":"+-------+\r<br>|Udacity|\r<br>+-------+\r<br>"},{"title":"Question 3 - BlockTower","question":"// Write the code to draw a tower of blocks that looks like the one in the link below:\r\n// http://i.imgur.com/PvIGJkL.png\r\n    \r\n// Name the class BlockTower. Each block has a width of 40 and a height of 30. \r\n// There are three rows. The upper left-hand corner of the bottom row is at (20, 70)\r\n\r\n// Create a custom color for the topmost color where red = 125, green=125, blue = 255. \r\n// For all the other colors, use predefined colors. \r\n// The colors from top to bottom are: custom, RED, PINK, BLUE, MAGENTA, CYAN\r\n\r\n\r\n// HINT:\r\n// The bottom left rectangle should have the attributes:\r\n// x: 20\r\n// y: 70\r\n// width: 40\r\n// height: 30\r\n//\r\n// You should set the color of the rectangle to blue by using the method:\r\n// setColor(Color.somecolor); on the rectangle object that you created\r\n//\r\n// Don't forget to draw the rectangle by calling the fill() function\r\n\r\n\r\n\r\n\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\n\r\n\r\npublic class BlockTower\r\n{\r\n public static void main(String[] args)\r\n {\r\n        //Write your code here\r\n        \r\n        Canvas.getInstance().snapshot();\r\n    CheckOutput out = new CheckOutput();\r\n    out.compareOutput();\r\n    System.exit(0); \r\n }\r\n}\r\n","testcases":"class CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\BlockTower.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"BlockTower","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"4.23","output":"Testcase Passed: true\r<br>"}]},"5":{"title":"Classes","lessons":[{"title":" Introduction","video":"videos/module4/01 - Introduction.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.1"},{"title":" Introducing Ayna","video":"videos/module4/02 - Introducing Ayna.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.2"},{"title":" Our First Class","video":"videos/module4/03 - Our First Class.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.3"},{"title":" Which Are Mutators","video":"videos/module4/04 - Which Are Mutators.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.4"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson3/Mutator.jpg' alt='no-image'/> <br/><input style='position:absolute; top: 19.5%; left: 33.5%;' type='checkbox' class='Checkboxinput' value='a'><br><input style='position:absolute; top: 27%; left: 33.5%;' type='checkbox' class='Checkboxinput' value='b'><br><input style='position:absolute; top: 34%; left: 33.5%;' type='checkbox' class='Checkboxinput' value='c'><br><input style='position:absolute; top: 41%; left: 33.5%;' type='checkbox' class='Checkboxinput' value='d'>","answer":["05","06"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.5"},{"title":" Which Are Mutators","video":"videos/module4/05 - Which Are Mutators.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.6"},{"title":" The Public Interface of the Person Class","video":"videos/module4/06 - The Public Interface of the Person Class.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.7"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson3/public.jpg' alt='no-image'/> <br/><input style='position:absolute; top:62%; left:39%;height:5%; width:23%' id=\"quizinput1\" type=\"text\"></input> ","answer":["0e81dc9e6f707c74165bed08fce754b6b25d8db599bc"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.8"},{"title":" The Public Interface of the Person Class","video":"videos/module4/07 - The Public Interface of the Person Class.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.9"},{"title":" Unfriend a Friend","video":"videos/module4/08 - Unfriend a Friend.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.10"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson3/unmake.jpg' alt='no-image'/> <br/><input style='position:absolute; top:57%; left:25%;height:6%; width:28%' id=\"quizinput1\" type=\"text\"></input> ","answer":["149bd69c287238663f40e04de7ed1a89ba4a8ab098d7d87667a65b36908677458c5195cd97c1"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.11"},{"title":" Unfriend a Friend","video":"videos/module4/09 - Unfriend a Friend.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.12"},{"title":" Listing Friends","video":"videos/module4/10 - Listing Friends.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.13"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson3/list-friend.jpg' alt='no-image'/> <br/><input style='position:absolute; top:40%; left:50%;height:7%; width:34%' id=\"quizinput1\" type=\"text\"></input> ","answer":["149bd69c28723843245bed03f5a31b9ea76996bdd5e9d9773ce0"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.14"},{"title":" Listing Friends","video":"videos/module4/11 - Listing Friends.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.15"},{"title":" Instance Variable","video":"videos/module4/12 - Instance Variable.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.16"},{"title":" Instance Variables","video":"videos/module4/13 - Instance Variables.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.17"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson3/remember.png' alt='no-image'/> <br/><input style='position:absolute; top:50%; left:25%;height:14%; width:40%' id=\"quizinput1\" type=\"text\"></input> ","answer":[""],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.18"},{"title":" Instance Variables","video":"videos/module4/14 - Instance Variables.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.19"},{"title":" Name Instance Variable","video":"videos/module4/15 - Name Instance Variable.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.20"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson3/person-instance.png' alt='no-image'/> <br/><input style='position:absolute; top:35%; left:39%;height:9%; width:20%' id=\"quizinput1\" type=\"text\"></input> ","answer":["149cdd8620657d30035df604fce45c95b24281ef"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.21"},{"title":" Name Instance Variable","video":"videos/module4/16 - Name Instance Variable.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.22"},{"title":" Friends Instance Variable","video":"videos/module4/17 - Friends Instance Variable.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.23"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson3/instance-friend.jpg' alt='no-image'/> <br/><input style='position:absolute; top:30%; left:35%;height:6%; width:26.5%' id=\"quizinput1\" type=\"text\"></input> ","answer":["149cdd8620657d30035df604fce45c9da14681bad4f486"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.24"},{"title":" Friends Instance Variable","video":"videos/module4/18 - Friends Instance Variable.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.25"},{"title":" addGas Method","video":"videos/module4/19 - addGas Method.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.26"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson3/addgas.png' alt='no-image'/> <br/><input style='position:absolute; top:44%; left:21%;height:5%; width:33%' id=\"quizinput1\" type=\"text\"></input> ","answer":["038fc7b92f45797e3b14e30ce1ca12afb2418fffd1ead2717abd0e"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.27"},{"title":" addGas Method","video":"videos/module4/20 - addGas Method.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.28"},{"title":" Visualizing the Car","video":"videos/module4/21 - Visualizing the Car.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.29"},{"title":" addFriend Method","video":"videos/module4/22 - addFriend Method.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.30"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson3/addFriend.jpg' alt='no-image'/> <br/><input style='position:absolute; top:33%; left:36%;height:8%; width:24%' id=\"quizinput1\" type=\"text\"></input> ","answer":["029cdd952f756b2d365bed08fce70fd0b55d8db1dee3936a75a4503ddcc93b38"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.31"},{"title":" addFriend Method","video":"videos/module4/23 - addFriend Method.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.32"},{"title":" unfriend Method","video":"videos/module4/24 - unfriend Method.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.33"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson3/unfriend-method.jpg' alt='no-image'/> <br/><input style='position:absolute; top:40%; left:20%;height:6.5%; width:38%' id=\"quizinput1\" type=\"text\"></input> ","answer":["029cdd952f756b2d365bed08fce70fd0a14a94b8d1e4d82c72bb5c73908d376d9f559588d1c8d40493cf636fec"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.34"},{"title":" unfriend Method","video":"videos/module4/25 - unfriend Method.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.35"},{"title":" Additional Car Methods","video":"videos/module4/26 - Additional Car Methods.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.36"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson3/additionalcars.jpg' alt='no-image'/> <br/><input style='position:absolute; top:50%; left:23%;height:4%; width:29%' id=\"quizinput1\" type=\"text\"></input> ","answer":["168bc085337f3877315acd03c6e21290e8"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.37"},{"title":" Additional Car Methods","video":"videos/module4/27 - Additional Car Methods.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.38"},{"title":" Figuring Things Out on a Piece of Paper","video":"videos/module4/28 - Figuring Things Out on a Piece of Paper.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.39"},{"title":" Figuring Things Out on a Piece of Paper","question":"/**\r\n * Please Don't change this code. \r\n * It is here so you can see the methods that belong to the car class.\r\n * You only need to change CarTester.java\r\n */\r\n    \r\n/**\r\n * A simulated car that consumes gas as it drives.\r\n */\r\n class Car\r\n{\r\n    private double milesDriven;\r\n    private double gasInTank;\r\n    private double milesPerGallon;\r\n\r\n    public Car()\r\n    {\r\n        milesDriven = 0;\r\n        gasInTank = 0;\r\n        milesPerGallon = 50;\r\n    }\r\n\r\n    /**\r\n       Drives this car by a given distance.\r\n       @param distance the distance to drive\r\n    */\r\n    public void drive(double distance)\r\n    {\r\n        milesDriven = milesDriven + distance;\r\n        double gasConsumed = distance / milesPerGallon;\r\n        gasInTank = gasInTank - gasConsumed;\r\n    }\r\n\r\n    public void addGas(double amount)\r\n    {\r\n        gasInTank = gasInTank + amount;\r\n    }\r\n    \r\n    /**\r\n       Gets the current mileage of this car.\r\n       @return the total number of miles driven\r\n    */\r\n    public double getMilesDriven()\r\n    {\r\n        return milesDriven;\r\n    }\r\n\r\n    /**\r\n       Gets the current amount of gas in the tank of this car.\r\n       @return the current gas level\r\n    */\r\n    public double getGasInTank()\r\n    {\r\n        return gasInTank;\r\n    }\r\n}\r\n// BlueJ project: lesson3/cars4\r\n\r\n// Write a tester program that prints the actual and\r\n// expected gas level after the given method calls.\r\n\r\npublic class CarTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Car car = new Car();\r\n\r\n        // TODO: Add 20 gallons and drive 100 miles\r\n\r\n        // TODO: Print actual and expected gas level\r\n\r\n    }\r\n}\r\n\r\n","type":"program","expectedoutput":"18.0\r<br>Expected: 18.0\r<br>","classname":"CarTester","programtype":"stdin","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.40","output":"18.0\r<br>Expected: 18.0\r<br>"},{"title":" Figuring Things Out on a Piece of Paper","video":"videos/module4/29 - Figuring Things Out on a Piece of Paper.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.41"},{"title":" Local and Instance Variables, Part 1","video":"videos/module4/30 - Local and Instance Variables, Part 1.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.42"},{"title":" Local and Instance Variables, Part 2","video":"videos/module4/31 - Local and Instance Variables, Part 2.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.43"},{"title":" Constructors","video":"videos/module4/32 - Constructors.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.44"},{"title":"Quiz","question":"// BlueJ project: lesson3/cars5\r\n\r\n// Complete the second constructor of this class.\r\n\r\nclass Car\r\n{\r\n    private double milesDriven;\r\n    private double gasInTank;\r\n    private double milesPerGallon;\r\n    private Picture pic;\r\n\r\n    public Car(double mpg)\r\n    {\r\n        milesDriven = 0;\r\n        gasInTank = 0;\r\n        milesPerGallon = mpg;\r\n        pic = new Picture(\"car.jpg\");\r\n        pic.draw();\r\n    }\r\n\r\n    public Car(double mpg, String pictureFile)\r\n    {\r\n        // TODO: Complete this constructor\r\n    }\r\n\r\n    public void drive(double distance)\r\n    {\r\n        milesDriven = milesDriven + distance;\r\n        double gasConsumed = distance / milesPerGallon;\r\n        gasInTank = gasInTank - gasConsumed;\r\n        int pixelsPerMile = 10;\r\n        pic.translate(distance * pixelsPerMile, 0);\r\n    }\r\n\r\n    public void addGas(double amount)\r\n    {\r\n        gasInTank = gasInTank + amount;\r\n    }\r\n\r\n    public double getMilesDriven()\r\n    {\r\n        return milesDriven;\r\n    }\r\n\r\n    public double getGasInTank()\r\n    {\r\n        return gasInTank;\r\n    }\r\n}\r\n","testcases":"// you don't need to modify or change this file\r\npublic class CarDemo\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Car car1 = new Car(10, \"hummer.jpg\");\r\n        Car car2 = new Car(50, \"smart.jpg\");\r\n        car1.addGas(20);\r\n        car1.drive(20);        \r\n        car2.addGas(20);\r\n        car2.drive(80);\r\n        new Text(200, 120, \"Gas left: \" + car1.getGasInTank()).draw();\r\n        new Text(800, 120, \"Gas left: \" + car2.getGasInTank()).draw();\r\n    }\r\n}","classname":"CarDemo","programtype":"api","type":"program","qid":"5.45","output":"E:\\new\\Electronv253\\resources\\courseware\\programs\\CarDemo.java:10: error: cannot find symbol\r<br>    private Picture pic;\r<br>            ^\r<br>  symbol:   class Picture\r<br>  location: class Car\r<br>E:\\new\\Electronv253\\resources\\courseware\\programs\\CarDemo.java:17: error: cannot find symbol\r<br>        pic = new Picture(\"car.jpg\");\r<br>                  ^\r<br>  symbol:   class Picture\r<br>  location: class Car\r<br>E:\\new\\Electronv253\\resources\\courseware\\programs\\CarDemo.java:27: error: cannot find symbol\r<br>        pic = new Picture(pictureFile);\r<br>                  ^\r<br>  symbol:   class Picture\r<br>  location: class Car\r<br>E:\\new\\Electronv253\\resources\\courseware\\programs\\CarDemo.java:67: error: cannot find symbol\r<br>        new Text(200, 120, \"Gas left: \" + car1.getGasInTank()).draw();\r<br>            ^\r<br>  symbol:   class Text\r<br>  location: class CarDemo\r<br>E:\\new\\Electronv253\\resources\\courseware\\programs\\CarDemo.java:68: error: cannot find symbol\r<br>        new Text(800, 120, \"Gas left: \" + car2.getGasInTank()).draw();\r<br>            ^\r<br>  symbol:   class Text\r<br>  location: class CarDemo\r<br>5 errors\r<br>"},{"title":" Constructors","video":"videos/module4/33 - Constructors.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.46"},{"title":" Using Car Constructors","video":"videos/module4/34 - Using Car Constructors.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.47"},{"title":" Person Constructor","video":"videos/module4/35 - Person Constructor.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.48"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson3/personConstruct.jpg' alt='no-image'/> <br/><textarea style='position:absolute; top:30.5%; left:18%;height:8%; width:33%' id=\"quizinput1\" type=\"textarea\"></textarea> ","answer":["0a8fd9957c7056713d4cbf67f4f1159ebd4b97e992a79f3f"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.49"},{"title":" Person Constructor","video":"videos/module4/36 - Person Constructor.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.50"},{"title":" Checking the Person Class","video":"videos/module4/37 - Checking the Person Class.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.51"},{"title":" Implementing the getFriends Method","video":"videos/module4/38 - Implementing the getFriends Method.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.52"},{"title":"Implementing the getFriends Method","question":"// BlueJ project: lesson3/friends2\r\n// Video: Implementing Get Friends Method\r\nclass Person\r\n{\r\n    private String name;\r\n    private String friends;\r\n\r\n    public Person(String aName)\r\n    {\r\n        name = aName;\r\n        friends = \"\";\r\n    }\r\n\r\n   // This method returns the friends of this Person object\r\n   // The method should return a String that contains all\r\n   // the names of the friends of this Person object.\r\n   public String getFriends()\r\n   {\r\n        //write your code here.\r\n   }\r\n\r\n    public void addFriend(Person friend)\r\n    {\r\n        friends = friends + \" \" + friend.name;\r\n    }\r\n\r\n    public void unfriend(Person nonFriend)\r\n    {\r\n        friends = friends.replace(\" \" + nonFriend.name, \"\");\r\n    }\r\n}\r\n","testcases":"public class PersonDemo \r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Person maria = new Person(\"Maria\");\r\n        Person jamesha = new Person(\"Jamesha\");\r\n        Person tj = new Person(\"TJ\");\r\n        \r\n        maria.addFriend(jamesha);\r\n        maria.addFriend(tj);\r\n        maria.unfriend(jamesha);\r\n\r\n        System.out.println(maria.getFriends());\r\n    }\r\n}","classname":"PersonDemo","programtype":"api","expectedoutput":" TJ\r<br>","type":"program","qid":"5.53","output":"E:\\new\\Electronv253\\resources\\courseware\\programs\\PersonDemo.java:20: error: missing return statement\r<br>   }\r<br>   ^\r<br>1 error\r<br>"},{"title":" Implementing the getFriends Method","video":"videos/module4/39 - Implementing the getFriends Method.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"5.54"}]},"6":{"title":"Classes","lessons":[{"title":" Seeing People","video":"videos/module5/40 - Seeing People.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.1"},{"title":"Quiz","question":"// BlueJ project: lesson3/friends3\r\nclass Person\r\n{\r\n    private String name;\r\n    private String friends;\r\n    \r\n    // TODO #1: Fill in the rest of the arguments to the Person constructor\r\n    // The Person constructor should take in 3 additional arguments:\r\n    // 1) String pictureName\r\n    // 2) int xCoord\r\n    // 3) int yCoord\r\n    public Person (String aName, ...)\r\n    {\r\n        name = aName;\r\n        friends = \"\";\r\n        \r\n        // TODO #2: Fill in the rest of this constructor\r\n        //\r\n        // You need to create a local variable called picture and assign to\r\n        // picture the picture that we want to use.\r\n        //\r\n        // You need to move the picture to xCoord and yCoord.\r\n        // You can move the picture object by calling the translate method.\r\n        //\r\n        // The last step is to draw the picture.\r\n    }\r\n    \r\n    public void addFriend(Person friend) \r\n    {\r\n        friends = friends + friend.name + \" \";\r\n    }\r\n    \r\n    public void unfriend(Person nonFriend)\r\n    {\r\n        friends = friends.replace(nonFriend.name + \" \", \"\");\r\n    }\r\n    \r\n    public String getFriends() \r\n    {\r\n        return friends;\r\n    }\r\n}","testcases":"// This is for your reference. You do not need to edit this file.\r\n\r\npublic class PersonDemo \r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Person sara = new Person(\"Sara\", \"sara.jpg\", 10, 200);\r\n        Person chenghan = new Person(\"Cheng-Han\", \"cheng-han.png\", 300, 0);\r\n        Person cay = new Person(\"Cay\", \"cay.gif\", 250, 180);\r\n    }\r\n}","classname":"PersonDemo","programtype":"api","type":"program","qid":"6.2"},{"title":" Seeing People","video":"videos/module5/41 - Seeing","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.3"},{"title":" Seeing Connections","video":"videos/module5/42 - Seeing Connections.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.4"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson3/seeing-connections.jpg'><input style='position:absolute; top:33.5%; left:63%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:41%; left:63%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:47.5%; left:63%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:55%; left:64%;' name='option' value='d' id=\"quizinput4\" type=\"radio\"></input><input style='position:absolute; top:62.5%; left:64%;' name='option' value='e' id=\"quizinput5\" type=\"radio\"></input>","answer":["06"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.5"},{"title":" Seeing Connections","video":"videos/module5/43 - Seeing","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.6"},{"title":" Do We Have Enough Information","video":"videos/module5/44 - Do We Have Enough Information.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.7"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson3/info.jpg'><input style='position:absolute; top:29%; left:64.5%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:39%; left:64.5%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:51%; left:64.5%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:56%; left:64.5%;' name='option' value='d' id=\"quizinput4\" type=\"radio\"></input><input style='position:absolute; top:68%; left:65.5%;' name='option' value='e' id=\"quizinput5\" type=\"radio\"></input>","answer":["01"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.8"},{"title":" Do We Have Enough Information","video":"videos/module5/45 - Do","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.9"},{"title":" Find the Coordinates of the Endpoint","video":"videos/module5/46 - Find the Coordinates of the Endpoint.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.10"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson3/coordinates.jpg'><input style='position:absolute; top:29%; left:61%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:38%; left:61%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:48%; left:61.5%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:56%; left:62%;' name='option' value='d' id=\"quizinput4\" type=\"radio\"></input><input style='position:absolute; top:66%; left:62%;' name='option' value='e' id=\"quizinput5\" type=\"radio\"></input>","answer":["00"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.11"},{"title":" Find the Coordinates of the Endpoint","video":"videos/module5/47 - Find","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.12"},{"title":" Update the Person Class","video":"videos/module5/48 - Update the Person Class.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.13"},{"title":"Update the Person Class","question":"// Bluej project: lesson3/friends4\r\nclass Person\r\n{\r\n    private String name;\r\n    private String friends;\r\n    // TODO Part 1: Create two additional instance int variables called x and y \r\n    // to store the values of xCoord and yCoord variables that are passed\r\n    // into the Person constructor below\r\n    //\r\n    // For example:\r\n    // private int x;\r\n\r\n    public Person (String aName, String pictureName, int xCoord, int yCoord)\r\n    {\r\n        name = aName;\r\n        friends = \"\";\r\n        Picture picture = new Picture(pictureName);\r\n        picture.translate(xCoord, yCoord);\r\n        picture.draw();\r\n        // TODO Part 2:\r\n        // assign xCoord and yCoord to the x and y instance variables that you\r\n        // created above\r\n        //\r\n        // For example (here's a freebie for you!):\r\n        // x = xCoord;\r\n    }\r\n    \r\n    public void addFriend(Person friend) \r\n    {\r\n        friends = friends + friend.name + \" \";\r\n        \r\n        // TOOD Part 3:\r\n        // Here's the challenging part! Update the addFriend\r\n        // method to:\r\n        // 1) Draw a SmallCircle at x and y (where x and y are the instance variables of this object)\r\n        // 2) Draw a line from the small circle to the x and y positions of the friend object\r\n        //\r\n        // Don't worry. I am here to walk you through this step\r\n        //\r\n        // To draw a small circle, first create a SmallCircle object. For example:\r\n        // SmallCircle circle = new SmallCircle(x-position, y-position);\r\n        //\r\n        // and the draw the circle by calling the fill() function. For example:\r\n        // circle.fill();\r\n        //\r\n        // Second, draw a line from the small circle above to \r\n        // the friend object that is passed into the addFriend function.\r\n        //\r\n        // For example:\r\n        // Line someLine = new Line (startingXPosition, startingYPosition, endingXPosition, endingYPosition);\r\n        // line.draw();\r\n        //\r\n        // HINTS:\r\n        // a) startXPosition and startYPosition are the x and y position of this person object\r\n        // b) endingXPosition and endingYPosition are the x and y position of the friend object\r\n        // that is passed as a parameter to the addFriend method\r\n        // c) You can retrieve the x and y position of the friend object like below:\r\n        // friend.x;\r\n        // friend.y;\r\n    }\r\n    \r\n    public void unfriend(Person nonFriend)\r\n    {\r\n        friends = friends.replace(nonFriend.name + \" \", \"\");\r\n    }\r\n    \r\n    public String getFriends() \r\n    {\r\n        return friends;\r\n    }\r\n}","testcases":"// This you for your reference only. There is no need to modify this file.\r\n\r\npublic class PersonDemo\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Person sara = new Person(\"Sara\", \"sara.jpg\", 10, 200);\r\n        Person chenghan = new Person(\"Cheng-Han\", \"cheng-han.png\", 300, 0);\r\n        Person cay = new Person(\"Cay\", \"cay.gif\", 250, 180);\r\n        \r\n        sara.addFriend(cay);\r\n        sara.addFriend(chenghan);\r\n    }\r\n}","classname":"PersonDemo","programtype":"api","type":"program","qid":"6.14"},{"title":" Update the Person Class","video":"videos/module5/49 - Update","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.15"},{"title":" Commenting the Public Interface, Part 1","video":"videos/module5/50 - Commenting the Public Interface, Part 1.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.16"},{"title":"Commenting the Public Interface, Part 1","question":"<img src='images/lesson3/Commenting.1.jpg' alt='image'><br><h4>Add Comment in the given textBox<br></h4><input class='input-lg' id=\"quizinput1\" type=\"text\"></input><br><img src='images/lesson3/Commenting.2.jpg' alt='image'><br>","answer":["/**Adds gas to this car. @param amount of gas to add*/ "],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.17"},{"title":" Commenting the Public Interface, Part 1","video":"videos/module5/51 - Commenting","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.18"},{"title":" Commenting the Public Interface, Part 2","video":"videos/module5/52 - Commenting the Public Interface, Part 2.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.19"},{"title":" Improving the Documentation","video":"videos/module5/53 - Improving the Documentation.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.20"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson3/improvedoc.jpg'><input style='position:absolute; top:25%; left:57%;' name='option' value='a' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:35.5%; left:57.5%;' name='option' value='b' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:46.5%; left:58%;' name='option' value='c' id=\"quizinput4\" type=\"radio\"></input><input style='position:absolute; top:53.5%; left:58%;' name='option' value='d' id=\"quizinput5\" type=\"radio\"></input><textarea style='position:absolute; top: 63%; left: 50%; width:46%; height:12%' id=\"quizinput1\" type=\"textarea\"></textarea>","answer":["368bc085337f6b303109f718ffee1d89aa0f8bb290f3d5611e9950648d8677248d1896d19a8d984cc2c14b06a5108dd0bb0de8a55a2eb637cbb1a0b42d7cd224bc5a67cffbeeced0bce3af8eb6f31e5298f9e19291e0d5d6d18a86e4","06"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.21"},{"title":" Improving the Documentation","video":"videos/module5/54 - Improving","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.22"},{"title":" Why Its Important to Document Your Code","video":"videos/module5/55 - Why Its Important to Document Your Code.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.23"},{"title":" Tracing Objects","video":"videos/module5/56 - Tracing Objects.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.24"},{"title":" Finding Bugs with Tracing, Part 1","video":"videos/module5/57 - Finding Bugs with Tracing, Part 1.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.25"},{"title":" Finding Bugs with Tracing, Part 2","video":"videos/module5/58 - Finding Bugs with Tracing, Part 2.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.26"},{"title":" More Finding Bugs With Tracing","video":"videos/module5/59 - More Finding Bugs With Tracing.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.27"},{"title":" Find the Error","video":"videos/module5/60 - Find the Error.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.28"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson3/finderror.jpg'><input style='position:absolute; top:10%; left:66%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:17%; left:65.5%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:31%; left:65.3%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:47.3%; left:65.3%;' name='option' value='d' id=\"quizinput4\" type=\"radio\"></input>","answer":["05"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.29"},{"title":" Find the Error","video":"videos/module5/61 - Find","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.30"},{"title":" How Ayna Deals With Errors in Her Code","video":"videos/module5/62 - How Ayna Deals With Errors in Her Code.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.31"},{"title":" The this Reference","video":"videos/module5/63 - The this Reference.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.32"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson3/reference.png' alt='no-image'/> <br/><input style='position:absolute; top:21%; left:81%;height:4%; width:5%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:49%; left:80%;height:4%; width:5%' id=\"quizinput2\" type=\"text\"></input> ","answer":["51","1d8bc7"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.33"},{"title":" The this Reference","video":"videos/module5/64 - The","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.34"},{"title":" Another Way to Think About this","video":"videos/module5/65 - Another Way to Think About this.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.35"},{"title":" Trying Out the this Reference","video":"videos/module5/66 - Trying Out the this Reference.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.36"},{"title":"Quiz","question":"// BlueJ project: lesson3/friends5\r\n/**\r\n* \r\n*/\r\nclass Person\r\n{\r\n    private String name;\r\n    private String friends;\r\n    private int x;\r\n    private int y;\r\n    \r\n    // TODO: Update the person constructor to use the this reference\r\n    //\r\n    // It looks a bit cleaner this way stylistically\r\n    public Person (String name, String pictureName, int x, int y)\r\n    {\r\n         // your code here\r\n    }\r\n    \r\n    public void addFriend(Person friend) \r\n    {\r\n        friends = friends + friend.name + \" \";\r\n        SmallCircle circle = new SmallCircle(x,y);\r\n        circle.fill();\r\n        Line line = new Line(x, y, friend.x, friend.y);\r\n        line.draw();\r\n    }\r\n    \r\n    public void unfriend(Person nonFriend)\r\n    {\r\n        friends = friends.replace(nonFriend.name + \" \", \"\");\r\n    }\r\n    \r\n    public String getFriends() \r\n    {\r\n        return friends;\r\n    }\r\n}","testcases":"public class PersonDemo\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Person sara = new Person(\"Sara\", \"sara.jpg\", 10, 200);\r\n        Person chenghan = new Person(\"Cheng-Han\", \"cheng-han.png\", 300, 0);\r\n        Person cay = new Person(\"Cay\", \"cay.gif\", 250, 180);\r\n        \r\n        sara.addFriend(cay);\r\n        sara.addFriend(chenghan);\r\n    }\r\n}","classname":"PersonDemo","programtype":"api","type":"program","qid":"6.37"},{"title":" Trying Out the this Reference","video":"videos/module5/67 - Trying","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.38"},{"title":" Use this to Make Method Calls","video":"videos/module5/68 - Use this to Make Method Calls.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.39"},{"title":" Change the Method to Use this","video":"videos/module5/69 - Change the Method to Use this.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.40"},{"title":"Quiz","question":"// BlueJ project: lesson3/friends6\r\n/**\r\n *   \r\n *   Models a person who makes and unmakes friends\r\n *\r\n */\r\nclass Person\r\n{\r\n    private String name;\r\n    private String friends;\r\n    private int x;\r\n    private int y;\r\n  \r\n    public Person (String name, String pictureName, int x, int y)\r\n    {\r\n        this.name = name;\r\n        friends = \"\";\r\n        Picture picture = new Picture(pictureName);\r\n        this.x = x;\r\n        this.y = y;\r\n        picture.translate(x, y);\r\n        picture.draw();\r\n    }\r\n\r\n    public void makeMutualFriend(Person friend)\r\n    {\r\n        this.addFriend(friend);\r\n        friend.addFriend(this);\r\n    }\r\n    \r\n    public void mutualUnfriend(Person nonFriend)\r\n    {\r\n      // TODO: complete this method   \r\n    }\r\n    \r\n    public void addFriend(Person friend)\r\n    {\r\n        friends = friends + friend.name + \" \";\r\n        SmallCircle circle = new SmallCircle(x, y);\r\n        circle.fill();\r\n        Line line = new Line(x, y, friend.x, friend.y);\r\n        line.draw();\r\n    }\r\n\r\n    public void unfriend(Person nonFriend)\r\n    {\r\n        friends = friends.replace(nonFriend.name, \"\");\r\n    }\r\n\r\n    public String getFriends()\r\n    {\r\n        return friends;\r\n    }\r\n\r\n}\r\n","testcases":"// This you for your reference only. There is no need to modify this file.\r\n\r\npublic class PersonDemoTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Person sara = new Person(\"Sara\", \"sara.jpg\", 10, 200);\r\n        Person chenghan = new Person(\"Cheng-Han\", \"cheng-han.png\", 300, 0);\r\n        Person cay = new Person(\"Cay\", \"cay.gif\", 250, 180);\r\n                \r\n        sara.makeMutualFriend(cay);\r\n        sara.makeMutualFriend(chenghan);\r\n        cay.makeMutualFriend(chenghan);\r\n        sara.mutualUnfriend(cay);\r\n\r\n        System.out.println(\"Sara's friends: \" + sara.getFriends());\r\n        System.out.println(\"Expected: Cheng-Han \" );\r\n    }\r\n}","classname":"PersonDemoTester","programtype":"api","type":"program","qid":"6.41"},{"title":" Change the Method to Use this","video":"videos/module5/70 - Change","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.42"},{"title":" Why Its Important to Learn Programming","video":"videos/module5/71 - Why Its Important to Learn Programming.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"6.43"}]},"7":{"title":"Problem Set 2","lessons":[{"title":"Short problem 1 - Radius","question":"<img src='images/Problem Set 2/2.1.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":"","type":"quiz","tips":"","qid":"7.1"},{"title":"Short problem 2 - Circle Constructor","question":"<img src='images/Problem Set 2/2.2.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["149bd69c28723853395be701f7ab55"],"type":"quiz","tips":"","qid":"7.2"},{"title":"Short problem 3 -  Circle Constructor v2","question":"<img src='images/Problem Set 2/2.3.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["149bd69c28723853395be701f7ab1894a64d88b190f3d56146a8517f8b9a30"],"type":"quiz","tips":"","qid":"7.3"},{"title":"Short problem 4 -  Documentation","question":"<img src='images/Problem Set 2/2.4.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["249cd184346376"],"type":"quiz","tips":"","qid":"7.4"},{"title":"Short Problem 5 - Square Constructor","question":"// You are to write the constructor specified for this Square class. The Square class \r\n// has an instance variable of type double, side, which is the length of each side of \r\n// the square. The javadoc has been provided for you to help you tell what you needs to\r\n// be done\r\n//     \r\n// HINT: Write the constructor for the class Square.\r\n// The constructor will take in a parameter of the type double\r\n// and assign that parameter to the instance variable side\r\n//\r\n    \r\n    \r\nclass Square\r\n{\r\n    private double side;\r\n\r\n    /**\r\n     * Constructor for objects of class Square\r\n     * @param theSide the length of the side of this Square\r\n     */\r\n\r\n\r\n      // your code goes below:\r\n     \r\n\r\n      /**\r\n       * Gets the length of a side of this square\r\n       * @return the side of this square\r\n       */\r\n      public double getSide()\r\n      {\r\n          return side;\r\n      }\r\n}\r\n","classname":"SquareTester","testcases":"/**\r\n * A tester for the Square class\r\n * You don't need to change or modify this file   \r\n */\r\npublic class SquareTester\r\n{\r\n   public static void main(String[] args)\r\n   {\r\n       Square square = new Square(10.4);\r\n       System.out.println(square.getSide());\r\n       System.out.println(\"Expected: 10.4\");\r\n   }\r\n}","programtype":"api","type":"program","qid":"7.5"},{"title":"Short problem 6 -  Privacy","question":"<img src='images/Problem Set 2/2.6.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["149cdd8620657d"],"type":"quiz","tips":"","qid":"7.6"},{"title":"Short Problem 7 - Car Tester","question":"// A class to exercise the Car class\r\n// Use methods of the public interface (drive, addGas) to add 20 gallons to the tank,\r\n// drive 105 miles, and add 5 gallons.\r\n// Add your code where specified. Do not change any other code.\r\n//\r\npublic class CarTester\r\n{\r\n   public static void main(String[] args)\r\n   {\r\n       Car mazda = new Car(35);\r\n       \r\n\r\n       // TODO: add your code to add 20 gallons to the tank, drive 105 miles, and add 5 gallons\r\n \r\n       \r\n       //Don't need to modify the line below\r\n       System.out.println(mazda.getGasInTank());\r\n       System.out.println(\"Expected: 22.0\");\r\n   }\r\n}\r\n","classname":"CarTester","expectedoutput":"","programtype":"stdin","type":"program","qid":"7.7"},{"title":"Short Problem 8 - Something wrong with code","question":"<img src='images/Problem Set 2/2.8.jpg' alt='image'><br><p style='text-align:left; color:green; font-size:20px'><input name='option' value='a' id=\"quizinput1\" type=\"radio\">&nbsp;the instance variable should be public so other classes can use it</input><br><input name='option' value='b' id=\"quizinput2\" type=\"radio\">&nbsp;In the constructor,balance should be assigned to a starting balance:double startingBalance=balance;</input><br><input name='option' value='c' id=\"quizinput3\" type=\"radio\">&nbsp;In the constructor,you should not redefine balance: balance=startingBalance</input><br><input name='option' value='d' id=\"quizinput4\" type=\"radio\">&nbsp;The constructor needs a return type.</input>","answer":["07"],"type":"quiz","tips":"","qid":"7.8"},{"title":"Short Problem 9 - What is wrong with sequence of statements","question":"<img src='images/Problem Set 2/2.9.jpg' alt='image'><br><p style='text-align:left;  color:green; font-size:20px'><input name='option' value='a' id=\"quizinput1\" type=\"radio\">&nbsp;You cannot create a Car object that takes a parameter</input><br><input name='option' value='b' id=\"quizinput2\" type=\"radio\">&nbsp;Car class does not have a drive method,so it is an error to call it</input><br><input name='option' value='c' id=\"quizinput3\" type=\"radio\">&nbsp;the drive method has a return type void and does not return a value to print</input><br><input name='option' value='d' id=\"quizinput4\" type=\"radio\">&nbsp;The drive method does not take a parameter</input>","answer":["07"],"type":"quiz","tips":"","qid":"7.9"},{"title":"Short problem 10 -  Type of variable","question":"<img src='images/Problem Set 2/2.10.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0d80c784207f7b75705fe51ffbe21e97b6"],"type":"quiz","tips":"","qid":"7.10"},{"title":"Short problem 11 -  Making an object","question":"<img src='images/Problem Set 2/2.11.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0781da8335636d732446f6"],"type":"quiz","tips":"","qid":"7.11"},{"title":"Short problem 12 -  Type of variable","question":"<img src='images/Problem Set 2/2.12.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0881d7912d316e712240e50ffee60f"],"type":"quiz","tips":"","qid":"7.12"},{"title":"Short problem 13 -  Declaring variable","question":"<img src='images/Problem Set 2/2.13.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0081c1922d743864384cc51ff7e241cbe8"],"type":"quiz","tips":"","qid":"7.13"},{"title":"Short Problem 14 - Inappropriate Instance Names","question":"<img src='images/Problem Set 2/2.14.jpg' alt='image'><br><br><form class='form-horizontal'><div class='form-group text-left' style='margin-left:155px'><input type='checkbox' class='Checkboxinput' value='a'>&nbsp;&nbsp;private double area<br><input type='checkbox' class='Checkboxinput' value='b'>&nbsp;&nbsp;private double parameter<br><input type='checkbox' class='Checkboxinput' value='c'>&nbsp;&nbsp;private double radius<br><input type='checkbox' class='Checkboxinput' value='d'>&nbsp;&nbsp;private double pi<br></div></form>","answer":["05","07","00"],"type":"quiz","tips":"","qid":"7.14"},{"title":"Short problem 15 -  Implicit Parameter","question":"<img src='images/Problem Set 2/2.15.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0183c49c2e687d75"],"type":"quiz","tips":"","qid":"7.15"},{"title":"Short problem 16 -  Explicit Parameter","question":"<img src='images/Problem Set 2/2.16.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["55de"],"type":"quiz","tips":"","qid":"7.16"},{"title":"Short problem 17 - Draw W","question":"//\r\n// Write the code to draw a symmetrical letter W with 4 line segments.  \r\n// Start the upper left hand corner at (0,0) \r\n// The total width will be 40 and the height will be 30.\r\n// The drawing should look like this:\r\n// http://i.imgur.com/kIwzrNn.png\r\n//\r\n// Check out the video segment \"Draw a Crate\" for inspiration\r\n// https://www.udacity.com/course/viewer#!/c-cs046/l-161445800/e-177304176/m-177304177\r\n//    \r\n//\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\n\r\npublic class DrawW\r\n{\r\n   public static void main(String[] args)\r\n   {\r\n       // TODO: Write the code to draw a symmetrical letter W with 4 line segments.\r\n       Canvas.getInstance().snapshot();\r\n       CheckOutput out = new CheckOutput();\r\n       out.compareOutput();\r\n    System.exit(0); \r\n   }\r\n}\r\n","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\DrawW.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"DrawW","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"7.17"},{"title":"Short Problem 18 - What do you need to do","question":"<img src='images/Problem Set 2/2.18.jpg' alt='image'><br><p style='text-align:left; color:green; font-size:20px'><input name='option' value='a' id=\"quizinput1\" type=\"radio\">&nbsp;You don't need to do anything </input><br><input name='option' value='b' id=\"quizinput2\" type=\"radio\">&nbsp;You will need to rewrite some of your code before it will work</input><br><input name='option' value='c' id=\"quizinput3\" type=\"radio\">&nbsp;You need to recompile so your class will work with the new code implementation a value to print</input><br><input name='option' value='d' id=\"quizinput4\" type=\"radio\">&nbsp;Something else</input>","answer":["05"],"type":"quiz","tips":"","qid":"7.18"},{"title":"Short problem 19 -  How to reference to self","question":"<img src='images/Problem Set 2/2.19.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":"","type":"quiz","tips":"","qid":"7.19"},{"title":"Short problem 20 -  Assigning instance variable","question":"<img src='images/Problem Set 2/2.20.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":"","type":"quiz","tips":"","qid":"7.20"},{"title":" Question 1 - Credit Card","question":"// Create a class CreditCard that represents a credit card account.\r\n// You need to construct a new credit card with a 0.0 balance. \r\n\r\n// The constructor will have this header:\r\n// public CreditCard()\r\n//\r\n// CreditCard will have these methods:\r\n// public void purchase(double amount)\r\n// public void payment(double amount)\r\n// public double getBalance()\r\n\r\n// Need help starting this question? In the lesson titled \r\n// \"Starting points: Problem Set Questions\", go to the\r\n// problem titled \"Problem Set 2 - Question 1\" for some tips on \r\n// how to begin. \r\n\r\n/**\r\n   A credit card has a balance that can be changed by\r\n   purchases and payments.\r\n*/\r\nclass CreditCard\r\n{\r\n\r\n    /**\r\n      Constructs a credit card with a zero balance.\r\n    */\r\n    public CreditCard()\r\n    {\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Makes a payment to  credit card.\r\n      @param amount the amount to pay\r\n    */\r\n    public void payment(double amount)\r\n    {\r\n        // TODO #1: You should subtract amount from balance variable in this function\r\n    }\r\n\r\n    /**\r\n      Makes a purchase with the credit card\r\n      @param amount the amount of the purchase\r\n    */\r\n    public void purchase(double amount)\r\n    {\r\n        // TODO #2: You should add amount to the balance variable in this function\r\n    }\r\n\r\n    /**\r\n      Gets the current balance of the credit card.\r\n      @return the current balance\r\n    */\r\n    public double getBalance()\r\n    {\r\n        // TODO #3: You should return the instance variable balance in this function\r\n    }\r\n}\r\n","testcases":"// You don't need to modify this class\r\npublic class CreditCardTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        CreditCard visa =new CreditCard();\r\n        System.out.println(visa.getBalance());\r\n        System.out.println(\"Expected: 0.0\");\r\n        \r\n        visa.purchase(10.50);\r\n        visa.purchase(2.99);\r\n        System.out.println(visa.getBalance());\r\n        System.out.println(\"Expected: 13.49\");\r\n        \r\n        visa.payment(5.0);\r\n        visa.payment(5);\r\n        System.out.println(visa.getBalance());\r\n        System.out.println(\"Expected: 3.49\");\r\n        \r\n    }\r\n}","classname":"CreditCardTester","programtype":"api","type":"program","qid":"7.21"},{"title":" Question 2 - Inch Worm","question":"// Write a class InchWorm that models an inch worm moving along a \r\n// horizontal line. The inch worm  moves either to the right or left.\r\n// Initially, the inch worm moves to the right, but it can turn to\r\n// change its direction. In each move, its position changes by one\r\n// unit in the current direction. \r\n\r\n// Provide two constructors. \r\n// One that takes the initial position as an argument,\r\n// and one with no arguments that sets the initial position to 0. \r\n\r\n// You will need two instance variables. \r\n// One to keep track of the position and one to keep track of the direction. \r\n// You can use 1 to represent moving right and -1 to represent moving left. \r\n\r\n// Constructors:\r\n// public InchWorm()\r\n// public InchWorm (int initialPosition)\r\n\r\n// Provide these methods:\r\n// public void turn()\r\n// public void move()\r\n// public int getPosition()\r\n\r\n// Sample usage:\r\n// InchWorm worm = new InchWorm (10);\r\n// worm.move(); // Now the position is 11\r\n// worm.turn();\r\n// worm.move(); // Now the position is 10\r\n\r\n\r\n// Need help starting this question? In the lesson titled \r\n// \"Starting points: Problem Set Questions\", go to the\r\n// problem titled \"Problem Set 2 - Question 2\" for some tips on \r\n// how to begin. \r\n\r\nclass InchWorm\r\n{\r\n    // TODO: Add instance variables\r\n   \r\n    public InchWorm()\r\n    {\r\n       // TODO: Complete constructor\r\n    }\r\n    \r\n    public InchWorm (int initialPosition)\r\n    {\r\n        // TODO: set the instance variable to the constructor parameter\r\n    }\r\n    \r\n    public void move()\r\n    {\r\n        // TODO: Update the position of the inch worm   \r\n    }\r\n    \r\n    public void turn()\r\n    {\r\n        // TODO: Update the direction\r\n    }\r\n   \r\n    public int getPosition()\r\n    {\r\n        return position;\r\n    }\r\n   \r\n    public int getDirection()\r\n    {\r\n        return direction;\r\n    }\r\n}\r\n","testcases":"// You don't need to change or modify the file below\r\npublic class InchWormTester\r\n{\r\n   public static void main(String[] args)\r\n   {\r\n      //default constructor\r\n       InchWorm worm1 = new InchWorm();\r\n       System.out.println(worm1.getPosition());\r\n       System.out.println(\"Expected: 0\");\r\n       worm1.move();\r\n       worm1.move();\r\n       worm1.turn();\r\n       worm1.move();\r\n       System.out.println(worm1.getPosition());\r\n       System.out.println(\"Expected: 1\");\r\n       \r\n       //default constructor\r\n       InchWorm worm2 = new InchWorm(10);\r\n       worm2.move();\r\n       worm2.move();\r\n       worm2.move();\r\n       worm2.move();\r\n       System.out.println(worm2.getPosition());\r\n       System.out.println(\"Expected: 14\");\r\n       worm2.turn();\r\n       worm2.move();\r\n       worm2.move();\r\n       worm2.turn();\r\n       worm2.move();\r\n       System.out.println(worm2.getPosition());\r\n       System.out.println(\"Expected: 13\");\r\n       \r\n   }\r\n\r\n}\r\n","classname":"InchWormTester","programtype":"api","type":"program","qid":"7.22"},{"title":"Question 3 - Flower","question":"// Write a class that describes a flower. A flower has a location, a\r\n// constructor and a draw method.\r\n// The flower should look like the picture below:\r\n// http://i.imgur.com/OC4EA29.png\r\n\r\n// The constructor takes the (x, y) coordinate of the upper left-hand\r\n// corner of the flower. The arrow points to the x,y coordinates of\r\n// the flower.\r\n \r\n// There are four pink petals and a yellow center. Each petal and the\r\n// center is a circle with a diameter of 20. A circle is an ellipse in\r\n// which the width and height are both equal to the diameter of the\r\n// circle. The pink circles touch the yellow one.\r\n\r\n// The stem is green and is on the center line of the flower. Its\r\n// length is 3 times the diameter.\r\n\r\n// When implementing the draw method, I recommend that you start with\r\n// the top petal, figure out its coordinates, instantiate a circle at\r\n// that point with a diameter of 20, and call its draw method.\r\n\r\n// Then test. You can create a flower object in BlueJ and invoke its\r\n// draw method. Pick another of the circles; calculate its coordinates;\r\n// instantiate a circle at that location; and. Call its draw method.\r\n// Now test again.\r\n\r\n// I believe you will find it much less intimidating to draw one\r\n// little thing, get it right, and go to the next. You may want to use\r\n// pencil and paper to do this. I did.\r\n\r\n// Note: When drawing an Ellipse, you specify the x, y coordinates and\r\n// the width and height of the rectangle that would surround the\r\n// ellipse. See the video \"More about Graphics\"\r\n\r\n// Here is how you would draw a circle of diameter 20 when the\r\n// surrounding rectangle has x, y coordinates of 30, 50\r\n//      Ellipse circle = new Ellipse(30, 50, 20,20);\r\n//      circle.draw();\r\n\r\n// Need help starting this question? In the lesson titled \r\n// \"Starting points: Problem Set Questions\", go to the\r\n// problem titled \"Problem Set 2 - Question 3\" for some tips on \r\n// how to begin. \r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\n\r\npublic class Flower\r\n{\r\n    private int x;\r\n    private int y;\r\n   \r\n    public Flower(int theX, int theY)\r\n    {\r\n        // TODO\r\n    }\r\n    \r\n    /**\r\n    * This function draws the flower.\r\n    */\r\n    public void draw()\r\n    {\r\n        // TODO\r\n    }\r\n","testcases":"public static void main(String[] args)\r\n    {\r\n        Flower rose = new Flower(30,60);\r\n        rose.draw();\r\n       \r\n        rose = new Flower(80, 60);\r\n        rose.draw();\r\n        Canvas.getInstance().snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\Flower.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"Flower","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"7.23"}]},"8":{"title":"Fundamental Data Types","lessons":[{"title":" Introduction","video":"videos/module6/01 - Introduction.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.1"},{"title":" Introducing Ingrid","video":"videos/module6/02 - Introducing Ingrid.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.2"},{"title":" Working with Numbers","video":"videos/module6/03 - Working with Numbers.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.3"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson4/image-1.jpg'><input style='position:absolute; top:60%; left:27%; height:8%; width:40%' id=\"quizinput1\" type=\"text\"></input>","answer":["49d986c7722621296611"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.4"},{"title":" Working with Numbers","video":"videos/module6/4 - Working","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.5"},{"title":" Overflow","video":"videos/module6/05 - Overflow.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.6"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson4/image-2.jpg'><input style='position:absolute; top:70%; left:30%; height:8%; width:40%' id=\"quizinput1\" type=\"text\"></input>","answer":["55c084b57023"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.7"},{"title":" Overflow","video":"videos/module6/6 - Overflow.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.8"},{"title":" Precision","video":"videos/module6/07 - Precision.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.9"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson4/image-3.jpg'><input style='position:absolute; top:36%; left:31%; height:7%; width:40%' id=\"quizinput1\" type=\"text\"></input>","answer":["50dd80de782821296910bd54abba45c2ea1b"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.10"},{"title":" Precision","video":"videos/module6/8 - Precision.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.11"},{"title":" Doubles Are Fuzzy","video":"videos/module6/09 - Doubles Are Fuzzy.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.12"},{"title":" Number Types","video":"videos/module6/10 - Number Types.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.13"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson4/image-4.png'><input style='position:absolute; top:16%; left:25%; height:6%; width:10%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:29%; left:25%; height:6%; width:10%' id=\"quizinput2\" type=\"text\"></input><input style='position:absolute; top:45%; left:26%; height:6%; width:10%' id=\"quizinput3\" type=\"text\"></input><input style='position:absolute; top:59%; left:25.5%; height:6%; width:10%' id=\"quizinput4\" type=\"text\"></input><input style='position:absolute; top:10.5%; left:61.5%; height:6%; width:10%' id=\"quizinput5\" type=\"text\"></input><input style='position:absolute; top:27.5%; left:56%; height:6%; width:10%' id=\"quizinput6\" type=\"text\"></input><input style='position:absolute; top:42%; left:55.5%; height:6%; width:10%' id=\"quizinput7\" type=\"text\"></input><input style='position:absolute; top:57%; left:55%; height:6%; width:9%' id=\"quizinput8\" type=\"text\"></input>","answer":["0d80c0","0081c1922d74","0881da97","0081c1922d74","55dc87","55dc87","55dc87bc","55dc87"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"8.14"},{"title":" Number Types","video":"videos/module6/11 - Number","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.15"},{"title":" Arithmetic Operations","video":"videos/module6/12 - Arithmetic Operations.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.16"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson4/image-5.jpg'><input style='position:absolute; top:37%; left:48%; height:9%; width:13%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:49%; left:48%; height:9%; width:14%' id=\"quizinput2\" type=\"text\"></input><input style='position:absolute; top:62%; left:48%; height:8%; width:14%' id=\"quizinput3\" type=\"text\"></input><input style='position:absolute; top:36.5%; left:76%; height:9%; width:16%' id=\"quizinput4\" type=\"text\"></input><input style='position:absolute; top:50%; left:76%; height:9%; width:16%' id=\"quizinput5\" type=\"text\"></input><input style='position:absolute; top:62.5%; left:76%; height:9%; width:16%' id=\"quizinput6\" type=\"text\"></input>","answer":["50dc","55d8","50","50dc","55d8","50"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"8.17"},{"title":" Arithmetic Operations","video":"videos/module6/13 - Arithmetic","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.18"},{"title":" Integer Arithmetic","video":"videos/module6/14 - Integer Arithmetic.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.19"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson4/image-6.png'><input style='position:absolute; top:59%; left:33%; height:5%; width:20%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:67%; left:33%; height:5%; width:20%' id=\"quizinput2\" type=\"text\"></input>","answer":["50dd","51"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.20"},{"title":" Integer Arithmetic","video":"videos/module6/15 - Integer","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.21"},{"title":" Arithmetic Operations 2","video":"videos/module6/16 - Arithmetic Operations 2.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.22"},{"title":"Quiz","question":"// BlueJ project: lesson4/turningMathToJava\r\n// Video: Arithmetic Operations 2\r\n\r\n// TODO: The amdahlSpeedup, crossRatio and average methods\r\n// aren't working yet. Use the fact sheet and your new \r\n// knowledge of math expressions in java to fix these methods. \r\n\r\npublic class MathInJava\r\n{\r\n    /*\r\n       Computes the fraction\r\n\r\n           1\r\n      -----------\r\n           1 - s\r\n       s + -----\r\n             n\r\n\r\n      See http://en.wikipedia.org/wiki/Amdahl%27s_law\r\n    */\r\n    public double amdahlSpeedup(double s, double n)\r\n    {\r\n        // To do!\r\n        return 0;\r\n    }\r\n\r\n    /*\r\n      Computes the fraction\r\n\r\n      (a - c)(b - d)\r\n      --------------\r\n      (b - c)(a - d)\r\n\r\n      See http://en.wikipedia.org/wiki/Cross-ratio\r\n    */\r\n    public double crossRatio(double a, double b, double c, double d)\r\n    {\r\n        // To do!\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n      Computes the average of four values.\r\n      @param a the first value\r\n      @param b the second value\r\n      @param c the third value\r\n      @param d the fourth value\r\n      @return the average of the four values\r\n    */\r\n    public double average(int a, int b, int c, int d)\r\n    {\r\n        // To do!\r\n        return 0;\r\n    }\r\n}\r\n","classname":"MathInJava","expectedoutput":"","programtype":"stdin","type":"program","qid":"8.23"},{"title":" Arithmetic Operations 2","video":"videos/module6/17 - Arithmetic","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.24"},{"title":" Ingrid Talks About Order of Operations","video":"videos/module6/18 - Ingrid Talks About Order of Operations.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.25"},{"title":" Color Reduction","video":"videos/module6/19 - Color Reduction.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.26"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson4/image-7.jpg'><input style='position:absolute; top:47%; left:79%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:55%; left:79%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input> <input style='position:absolute; top:62%; left:74.5%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input> <input style='position:absolute; top:70%; left:75%;' name='option' value='d' id=\"quizinput4\" type=\"radio\"></input>","answer":["07"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.27"},{"title":" Color Reduction","video":"videos/module6/20 - Color","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.28"},{"title":" Color Reduction 2","video":"videos/module6/21 - Color Reduction 2.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.29"},{"title":"Quiz - Color Reduction 2","question":"// BlueJ Project: lesson4/fewerColors\r\n// Video: Color Reduction 2\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\n\r\n\r\nclass Color\r\n{\r\n    private int red;\r\n    private int green;\r\n    private int blue;\r\n\r\n    /**\r\n     * Uses only six values for red, green, blue.\r\n     */\r\n    public void reduce()\r\n    {\r\n        // TODO: Change the values for red, green, and blue\r\n        // to one of the following: 0, 51, 102, 153, 204, 255\r\n    }\r\n\r\n    /**\r\n    *  Constructs a new Color object.\r\n    * @param red the red value of the color (between 0 and 255)\r\n    * @param green the green value of the color (between 0 and 255)\r\n    * @param blue the blue value of the color (between 0 and 255)\r\n    */\r\n    public Color(int red, int green, int blue)\r\n    {\r\n        this.red = red;\r\n        this.green = green;\r\n        this.blue = blue;\r\n    }\r\n\r\n    /**\r\n    *   Gets the red value of this color.\r\n    *   @return the red value (between 0 and 255)\r\n    */\r\n    public int getRed()\r\n    {\r\n        return red;\r\n    }\r\n\r\n    /**\r\n    *   Gets the green value of this color.\r\n    *   @return the green value (between 0 and 255)\r\n    */\r\n    public int getGreen()\r\n    {\r\n        return green;\r\n    }\r\n\r\n    /**\r\n    *   Gets the blue value of this color.\r\n    *   @return the blue value (between 0 and 255)\r\n    */\r\n    public int getBlue()\r\n    {\r\n        return blue;\r\n    }\r\n\r\n    // Color constants\r\n\r\n    public static final Color RED = new Color(255, 0, 0);\r\n    public static final Color GREEN = new Color(0, 255, 0);\r\n    public static final Color BLUE = new Color(0, 0, 255);\r\n    public static final Color WHITE = new Color(255, 255, 255);\r\n    public static final Color LIGHT_GRAY = new Color(192, 192, 192);\r\n    public static final Color GRAY = new Color(128, 128, 128);\r\n    public static final Color DARK_GRAY = new Color(64, 64, 64);\r\n    public static final Color BLACK = new Color(0, 0, 0);\r\n    public static final Color CYAN = new Color(0, 255, 255);\r\n    public static final Color MAGENTA = new Color(255, 0, 255);\r\n    public static final Color YELLOW = new Color(255, 255, 0);\r\n    public static final Color PINK = new Color(255, 175, 175);\r\n    public static final Color ORANGE = new Color(255, 200, 0);\r\n    \r\n}","testcases":"\npublic class Color1{\r\n        public static void main(String[] args)\r\n        {\r\n            Picture pic = new Picture();\r\n            pic.load(\"resources//courseware//program_images//eliza.png\");\r\n            pic.draw();\r\n            for (int i = 0; i < pic.pixels(); i++)\r\n            {\r\n                Color c = pic.getColorAt(i);\r\n                c.reduce();\r\n                pic.setColorAt(i, c);\r\n            }\r\n            Picture pict = new Picture();\r\n            pict.snapshot();\r\n            CheckOutput out = new CheckOutput();\r\n            out.compareOutput();\r\n    System.exit(0); \r\n        }        \r\n    }\r\n\r\n\r\n    class CheckOutput{\r\n        public void compareOutput()\r\n        {\r\n            String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n            String file2 = \"resources\\\\courseware\\\\program_images\\\\Color.png\";\r\n             \r\n            Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n            Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n             \r\n            try {\r\n             \r\n            PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n            PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n             \r\n            int[] data1 = null;\r\n             \r\n            if (grab1.grabPixels()) {\r\n            int width = grab1.getWidth();\r\n            int height = grab1.getHeight();\r\n            data1 = new int[width * height];\r\n            data1 = (int[]) grab1.getPixels();\r\n            }\r\n             \r\n            int[] data2 = null;\r\n             \r\n            if (grab2.grabPixels()) {\r\n            int width = grab2.getWidth();\r\n            int height = grab2.getHeight();\r\n            data2 = new int[width * height];\r\n            data2 = (int[]) grab2.getPixels();\r\n            }\r\n             \r\n            System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n             \r\n            } catch (InterruptedException e1) {\r\n            e1.printStackTrace();\r\n            }\r\n     \r\n       }\r\n    }","classname":"Color1","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"8.30"},{"title":" Color Reduction 2","video":"videos/module6/22 - Color","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.31"},{"title":" Day of the Week","video":"videos/module6/23 - Day of the Week.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.32"},{"title":"Day of the Week","question":"//This file is provided for reference only.  You do not need to modify it.\r\n\r\n/**\r\n   A Day object represents a day in the Julian/Gregorian calendar.\r\n*/\r\nimport java.util.GregorianCalendar;\r\n\r\n class Day\r\n{\r\n    private int year;\r\n    private int month;\r\n    private int date;\r\n\r\n    private static final int[] DAYS_PER_MONTH\r\n        = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\r\n\r\n    private static final int GREGORIAN_START_YEAR = 1582;\r\n    private static final int GREGORIAN_START_MONTH = 10;\r\n    private static final int GREGORIAN_START_DAY = 15;\r\n    private static final int JULIAN_END_DAY = 4;\r\n\r\n    private static final int JANUARY = 1;\r\n    private static final int FEBRUARY = 2;\r\n    private static final int DECEMBER = 12;\r\n\r\n    /**\r\n       Constructs a day object representing today's date.\r\n    */\r\n    public Day()\r\n    {\r\n        GregorianCalendar today = new GregorianCalendar();\r\n        year = today.get(GregorianCalendar.YEAR);\r\n        month = today.get(GregorianCalendar.MONTH) + 1;\r\n        date = today.get(GregorianCalendar.DAY_OF_MONTH);\r\n    }\r\n\r\n    /**\r\n       Constructs a day with a given year, month, and day\r\n       of the Julian/Gregorian calendar. The Julian calendar\r\n       is used for all days before October 15, 1582\r\n       @param aYear a year (any number other than 0)\r\n       @param aMonth a month between 1 and 12\r\n       @param aDayOfMonth a day of the month between 1 and 31\r\n    */\r\n    public Day(int aYear, int aMonth, int aDayOfMonth)\r\n    {\r\n        year = aYear;\r\n        month = aMonth;\r\n        date = aDayOfMonth;\r\n    }\r\n\r\n    /**\r\n       Returns the year of this day.\r\n       @return the year\r\n    */\r\n    public int getYear()\r\n    {\r\n        return year;\r\n    }\r\n\r\n    /**\r\n       Returns the month of this day.\r\n       @return the month\r\n    */\r\n    public int getMonth()\r\n    {\r\n        return month;\r\n    }\r\n\r\n    /**\r\n       Returns the day of the month of this day.\r\n       @return the day of the month\r\n    */\r\n    public int getDayOfMonth()\r\n    {\r\n        return date;\r\n    }\r\n\r\n    /**\r\n       Changes to a date that is a certain number of days away from\r\n       the current date.\r\n       @param numberOfDays the number of days, can be negative\r\n    */\r\n    public void addDays(int numberOfDays)\r\n    {\r\n        while (numberOfDays > 0)\r\n        {\r\n            nextDay();\r\n            numberOfDays--;\r\n        }\r\n        while (numberOfDays < 0)\r\n        {\r\n            previousDay();\r\n            numberOfDays++;\r\n        }\r\n    }\r\n\r\n    /**\r\n       Returns the number of days between this day and another\r\n       day.\r\n       @param other the other day\r\n       @return the number of days that this day is away from\r\n       the other (>0 if this day comes later than <code>other</code>)\r\n    */\r\n    public int daysFrom(Day other)\r\n    {\r\n        int n = 0;\r\n        Day d = new Day(year, month, date);\r\n        while (d.compareTo(other) > 0)\r\n        {\r\n            d.previousDay();\r\n            n++;\r\n        }\r\n        while (d.compareTo(other) < 0)\r\n        {\r\n            d.nextDay();\r\n            n--;\r\n        }\r\n        return n;\r\n    }\r\n\r\n    public String toString()\r\n    {\r\n        return String.format(\"%04d-%02d-%02d\", year, month, date);\r\n    }\r\n\r\n    /**\r\n       Compares this day with another day.\r\n       @param other the other day\r\n       @return a positive number if this day comes after the\r\n       other day, a negative number if this day comes before\r\n       the other day, and zero if the days are the same\r\n    */\r\n    private int compareTo(Day other)\r\n    {\r\n        if (year > other.year) return 1;\r\n        if (year < other.year) return -1;\r\n        if (month > other.month) return 1;\r\n        if (month < other.month) return -1;\r\n        return date - other.date;\r\n    }\r\n\r\n    /**\r\n       Advances to the next day.\r\n    */\r\n    private void nextDay()\r\n    {\r\n        if (year == GREGORIAN_START_YEAR\r\n                && month == GREGORIAN_START_MONTH\r\n                && date == JULIAN_END_DAY)\r\n            date = GREGORIAN_START_DAY;\r\n        else if (date < daysPerMonth(year, month))\r\n            date++;\r\n        else\r\n        {\r\n            date = 1;\r\n            month++;\r\n            if (month > DECEMBER)\r\n            {\r\n                month = JANUARY;\r\n                year++;\r\n                if (year == 0) year++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n       Moves to the previous day.\r\n    */\r\n    private void previousDay()\r\n    {\r\n        if (year == GREGORIAN_START_YEAR\r\n                && month == GREGORIAN_START_MONTH\r\n                && date == GREGORIAN_START_DAY)\r\n            date = JULIAN_END_DAY;\r\n        else if (date > 1)\r\n            date--;\r\n        else\r\n        {\r\n            month--;\r\n            if (month < JANUARY)\r\n            {\r\n                month = DECEMBER;\r\n                year--;\r\n                if (year == 0) year--;\r\n            }\r\n            date = daysPerMonth(year, month);\r\n        }\r\n    }\r\n\r\n    /**\r\n       Gets the days in a given month.\r\n       @param y the year\r\n       @param m the month\r\n       @return the last day in the given month\r\n    */\r\n    private static int daysPerMonth(int y, int m)\r\n    {\r\n        int days = DAYS_PER_MONTH[m - 1];\r\n        if (m == FEBRUARY && isLeapYear(y))\r\n            days++;\r\n        return days;\r\n    }\r\n\r\n    /**\r\n       Tests if a year is a leap year.\r\n       @param y the year\r\n       @return true if y is a leap year\r\n    */\r\n    private static boolean isLeapYear(int y)\r\n    {\r\n        if (y % 4 != 0) return false;\r\n        if (y < GREGORIAN_START_YEAR) return true;\r\n        return (y % 100 != 0) || (y % 400 == 0);\r\n    }\r\n}\r\n","testcases":"// BlueJ project: dayOfTheWeek\r\n// Video: Day of the Week\r\n\r\npublic class WhatDayWillItBe\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n    \r\n        // Please do not change the name of this variable\r\n        // We may change this value when we run your program\r\n        // It will always be a date >= January 1, 1900\r\n        Day birthday = new Day(1989, 7, 1);\r\n\r\n        // January 1, 1900 was a Monday\r\n        // Compute the number of days from that day until the birthday\r\n        // Compute the weekday: 0 - Sunday, 1 - Monday, ..., 6 - Saturday\r\n\r\n        System.out.print(\"Weekday: \");\r\n        System.out.println(weekday);\r\n    }\r\n}\r\n","classname":"WhatDayWillItBe","programtype":"api","type":"program","qid":"8.33"},{"title":" Day of the Week","video":"videos/module6/24 - Day","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.34"},{"title":" Checkerboard","video":"videos/module6/25 - Checkerboard.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.35"},{"title":"Quiz","question":"public class CheckerBoardPainter\r\n{\r\n    /**\r\n     * Spaces are red if one of the coordinates is even and the other is odd\r\n     * Spaces are blue if both coordinates are even\r\n     * Spaces are blue if both coordinates are odd\r\n     * \r\n     * @return 1 for red spaces and 0 for blue\r\n     * @param row the row of the space to paint\r\n     * @param col the column of the space to paint. \r\n     */\r\n    public int getColor(int row, int col)\r\n    {\r\n        //To do!\r\n    }\r\n}\r\n","classname":"CheckerBoardPainter","expectedoutput":"","programtype":"stdin","type":"program","qid":"8.36"},{"title":" Checkerboard","video":"videos/module6/26 - Checkerboard.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.37"},{"title":" Casts","video":"videos/module6/27 - Casts.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.38"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson4/image-8.jpg'><input style='position:absolute; top:41.5%; right:70.5%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:48%; right:70.5%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input> <input style='position:absolute; top:55%; right:70.5%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input> <input style='position:absolute; top:61%; right:70.5%;' name='option' value='d' id=\"quizinput4\" type=\"radio\"></input>","answer":["06"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.39"},{"title":" Casts","video":"videos/module6/28 - Casts.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.40"},{"title":" How to Cast","video":"videos/module6/29 - How to Cast.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.41"},{"title":" Casts 2","video":"videos/module6/30 - Casts 2.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.42"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson4/image-9.jpg'><input style='position:absolute; top:49.5%; left:70%; height:7%; width:15%' id=\"quizinput1\" type=\"text\"></input>","answer":["50dd80"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.43"},{"title":" Casts 2","video":"videos/module6/31 - Casts","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.44"},{"title":" Ingrid Talks about Learning Casting","video":"videos/module6/32 - Ingrid Talks about Learning Casting.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.45"},{"title":" Grayscale","video":"videos/module6/33 - Grayscale.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.46"},{"title":"Quiz - Grayscale","question":"// BlueJ project: lesson4/grayscale\r\n// Video: Grayscale\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\n\r\n\r\nclass Color\r\n{\r\n    private int red;\r\n    private int green;\r\n    private int blue;\r\n\r\n    /**\r\n     * Turns this color into the equivalent gray value.\r\n     */\r\n    public void turnGray()\r\n    {\r\n        // TODO: Change this color to its equivalent gray value.\r\n        // The red, green, and blue variables should all be\r\n        // set to the gray level, which is computed as a weighted\r\n        // average of the original red, blue, and green levels.\r\n        // The weights (corresponding to the sensitivity of the\r\n        // cone cells in the human eye) are:\r\n        // red - 0.2126\r\n        // green - 0.7152\r\n        // blue - 0.0722\r\n\r\n    }\r\n\r\n    /**\r\n     * Constructs a new Color object.\r\n     * @param red the red value of the color (between 0 and 255)\r\n     * @param green the green value of the color (between 0 and 255)\r\n     * @param blue the blue value of the color (between 0 and 255)\r\n     */\r\n    public Color(int red, int green, int blue)\r\n    {\r\n        this.red = red;\r\n        this.green = green;\r\n        this.blue = blue;\r\n    }\r\n\r\n    /**\r\n     * Gets the red value of this color.\r\n     * @return the red value (between 0 and 255)\r\n     */\r\n    public int getRed()\r\n    {\r\n        return red;\r\n    }\r\n\r\n    /**\r\n     * Gets the green value of this color.\r\n     * @return the green value (between 0 and 255)\r\n     */\r\n    public int getGreen()\r\n    {\r\n        return green;\r\n    }\r\n\r\n    /**\r\n     * Gets the blue value of this color.\r\n     * @return the blue value (between 0 and 255)\r\n     */\r\n    public int getBlue()\r\n    {\r\n        return blue;\r\n    }\r\n\r\n    // Color constants\r\n\r\n    public static final Color RED = new Color(255, 0, 0);\r\n    public static final Color GREEN = new Color(0, 255, 0);\r\n    public static final Color BLUE = new Color(0, 0, 255);\r\n    public static final Color WHITE = new Color(255, 255, 255);\r\n    public static final Color LIGHT_GRAY = new Color(192, 192, 192);\r\n    public static final Color GRAY = new Color(128, 128, 128);\r\n    public static final Color DARK_GRAY = new Color(64, 64, 64);\r\n    public static final Color BLACK = new Color(0, 0, 0);\r\n    public static final Color CYAN = new Color(0, 255, 255);\r\n    public static final Color MAGENTA = new Color(255, 0, 255);\r\n    public static final Color YELLOW = new Color(255, 255, 0);\r\n    public static final Color PINK = new Color(255, 175, 175);\r\n    public static final Color ORANGE = new Color(255, 200, 0);\r\n}\r\n\r\n","testcases":"public class GrayScale\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Picture pic = new Picture();\r\n        pic.load(\"resources//courseware//program_images//eliza.png\");\r\n        pic.draw();\r\n        for (int i = 0; i < pic.pixels(); i++)\r\n        {\r\n            Color c = pic.getColorAt(i);\r\n            c.turnGray();\r\n            pic.setColorAt(i, c);\r\n        }\r\n        Picture pict = new Picture();\r\n        pict.snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\Grayscale.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"GrayScale","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"8.47"},{"title":" Grayscale","video":"videos/module6/34 - Grayscale.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.48"},{"title":" Math Functions","video":"videos/module6/35 - Math Functions.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.49"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson4/image-10.jpg'><input style='position:absolute; top:40%; left:52%; height:5%; width:15%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:47.5%; left:52%; height:5%; width:15%' id=\"quizinput2\" type=\"text\"></input><input style='position:absolute; top:54%; left:52%; height:5%; width:15%' id=\"quizinput3\" type=\"text\"></input><input style='position:absolute; top:60.5%; left:53%; height:5%; width:15%' id=\"quizinput4\" type=\"text\"></input><input style='position:absolute; top:67.5%; left:53%; height:5%; width:15%' id=\"quizinput5\" type=\"text\"></input>","answer":["55de84c0","56","56","56db81","54"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"8.50"},{"title":" Math Functions","video":"videos/module6/36 - Math","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.51"},{"title":" Sunset Effect","video":"videos/module6/37 - Sunset Effect.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.52"},{"title":"Quiz - Sunset","question":"import java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\n\r\nclass Color\r\n{\r\n    private int red;\r\n    private int green;\r\n    private int blue;\r\n\r\n    /**\r\n     * Makes the color redder by 25, but not redder than 255.\r\n     */\r\n    public void redden()\r\n    {\r\n\r\n        // TODO\r\n\r\n    }\r\n\r\n\r\n    /**\r\n    * Constructs a new Color object.\r\n    * @param red the red value of the color (between 0 and 255)\r\n    * @param green the green value of the color (between 0 and 255)\r\n    * @param blue the blue value of the color (between 0 and 255)\r\n    */\r\n    public Color(int red, int green, int blue)\r\n    {\r\n        this.red = red;\r\n        this.green = green;\r\n        this.blue = blue;\r\n    }\r\n\r\n    /**\r\n     * Gets the red value of this color.\r\n     * @return the red value (between 0 and 255)\r\n     */\r\n    public int getRed()\r\n    {\r\n        return red;\r\n    }\r\n\r\n    /**\r\n     * Gets the green value of this color.\r\n     * @return the green value (between 0 and 255)\r\n     */\r\n    public int getGreen()\r\n    {\r\n        return green;\r\n    }\r\n\r\n    /**\r\n     * Gets the blue value of this color.\r\n     * @return the blue value (between 0 and 255)\r\n     */\r\n    public int getBlue()\r\n    {\r\n        return blue;\r\n    }\r\n\r\n    // Color constants\r\n\r\n    public static final Color RED = new Color(255, 0, 0);\r\n    public static final Color GREEN = new Color(0, 255, 0);\r\n    public static final Color BLUE = new Color(0, 0, 255);\r\n    public static final Color WHITE = new Color(255, 255, 255);\r\n    public static final Color LIGHT_GRAY = new Color(192, 192, 192);\r\n    public static final Color GRAY = new Color(128, 128, 128);\r\n    public static final Color DARK_GRAY = new Color(64, 64, 64);\r\n    public static final Color BLACK = new Color(0, 0, 0);\r\n    public static final Color CYAN = new Color(0, 255, 255);\r\n    public static final Color MAGENTA = new Color(255, 0, 255);\r\n    public static final Color YELLOW = new Color(255, 255, 0);\r\n    public static final Color PINK = new Color(255, 175, 175);\r\n    public static final Color ORANGE = new Color(255, 200, 0);\r\n}\r\n\r\n","testcases":"public class Sunset\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Picture pic = new Picture();\r\n        pic.load(\"resources//courseware//program_images//queen-mary.png\");\r\n        pic.draw();\r\n        for (int i = 0; i < pic.pixels(); i++)\r\n        {\r\n            Color c = pic.getColorAt(i);\r\n            c.redden();\r\n            pic.setColorAt(i, c);\r\n        }\r\n        Picture pict = new Picture();\r\n        pict.snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\Sunset.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"Sunset","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"8.53"},{"title":" Sunset Effect","video":"videos/module6/38 - Sunset","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.54"},{"title":" Magic Number","video":"videos/module6/39 - Magic Number.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.55"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson4/image-11.jpg'><input style='position:absolute; top:64%; left:7%; height:8%; width:60%' id=\"quizinput1\" type=\"text\"></input>","answer":["168bd0d07c3155712441aa00fbed5489b64bc4ff90c6f940518d6a44bbad3523b379a8fca1adb2018a"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.56"},{"title":" Magic Number","video":"videos/module6/40 - Magic","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"8.57"}]},"9":{"title":"Fundamental Data Types","lessons":[{"title":" Reading Input","video":"videos/module7/41 - Reading Input.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.1"},{"title":" Your Own Sunset Effect","video":"videos/module7/42 - Your Own Sunset Effect.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.2"},{"title":"Quiz - Your Own sunset Effect","question":"// BlueJ project: lesson4/sunsetInput\r\n// Video: Color Your Own Sunset Effect\r\n\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\nclass Color\r\n{\r\n    private int red;\r\n    private int green;\r\n    private int blue;\r\n\r\n    /**\r\n     * Makes this color redder.\r\n     */\r\n    public void redden(int addedRed) // TODO: Add a parameter\r\n    {\r\n        //final int ADDED_RED = 25; // TODO: Remove\r\n        final int MAX_RED = 255;\r\n        red = Math.min(MAX_RED, red + addedRed);\r\n    }\r\n\r\n    /**\r\n     * Gets the red value of this color.\r\n     * @return the red value (between 0 and 255)\r\n     */\r\n    public int getRed()\r\n    {\r\n        return red;\r\n    }\r\n\r\n    /**\r\n     * Gets the green value of this color.\r\n     * @return the green value (between 0 and 255)\r\n     */\r\n    public int getGreen()\r\n    {\r\n        return green;\r\n    }\r\n\r\n    /**\r\n     * Gets the blue value of this color.\r\n     * @return the blue value (between 0 and 255)\r\n     */\r\n    public int getBlue()\r\n    {\r\n        return blue;\r\n    }\r\n\r\n    /**\r\n     * Constructs a new Color object.\r\n     * @param red the red value of the color (between 0 and 255)\r\n     * @param green the green value of the color (between 0 and 255)\r\n     * @param blue the blue value of the color (between 0 and 255)\r\n     */\r\n    public Color(int red, int green, int blue)\r\n    {\r\n        this.red = red;\r\n        this.green = green;\r\n        this.blue = blue;\r\n    }\r\n\r\n    // Color constants\r\n\r\n    public static final Color RED = new Color(255, 0, 0);\r\n    public static final Color GREEN = new Color(0, 255, 0);\r\n    public static final Color BLUE = new Color(0, 0, 255);\r\n    public static final Color WHITE = new Color(255, 255, 255);\r\n    public static final Color LIGHT_GRAY = new Color(192, 192, 192);\r\n    public static final Color GRAY = new Color(128, 128, 128);\r\n    public static final Color DARK_GRAY = new Color(64, 64, 64);\r\n    public static final Color BLACK = new Color(0, 0, 0);\r\n    public static final Color CYAN = new Color(0, 255, 255);\r\n    public static final Color MAGENTA = new Color(255, 0, 255);\r\n    public static final Color YELLOW = new Color(255, 255, 0);\r\n    public static final Color PINK = new Color(255, 175, 175);\r\n    public static final Color ORANGE = new Color(255, 200, 0);\r\n}\r\n\r\n// BlueJ project: lesson4/sunsetInput\r\n// Video: Color Your Own Sunset Effect\r\n\r\n// TODO: Add import statement\r\n\r\npublic class YourSunset\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Picture pic = new Picture();\r\n        pic.load(\"resources//courseware//program_images//queen-mary.png\");\r\n        Scanner in = new Scanner(System.in);\r\n        System.out.print(\"Added redness: \");\r\n        int addedRed = in.nextInt();\r\n        // TODO: Read added redness from scanner\r\n\r\n        pic.draw();\r\n        for (int i = 0; i < pic.pixels(); i++)\r\n        {\r\n            Color c = pic.getColorAt(i);\r\n            c.redden(addedRed); // TODO: Pass added redness to method\r\n            pic.setColorAt(i, c);\r\n        }\r\n        Picture pict = new Picture();\r\n        pict.snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\n","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\YourSunset.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"YourSunset","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"9.3"},{"title":" Your Own Sunset Effect","video":"videos/module7/43 - Your","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.4"},{"title":" Formatted Output","video":"videos/module7/44 - Formatted Output.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.5"},{"title":" Practice Formatted Output","video":"videos/module7/45 - Practice Formatted Output.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.6"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson4/image-12.jpg'><input style='position:absolute; top:28%; left:47.5%; height:5%; width:6%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:28%; left:55%; height:5%; width:6%' id=\"quizinput2\" type=\"text\"></input><input style='position:absolute; top:43%; left:44.5%; height:5%; width:18%' id=\"quizinput3\" type=\"text\"></input><input style='position:absolute; top:57%; left:44%; height:5%; width:18%' id=\"quizinput4\" type=\"text\"></input>","answer":["52","00","46cb80de73317e32","46cb81d2"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.7"},{"title":" Practice Formatted Output","video":"videos/module7/46 - Practice","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.8"},{"title":" Formatted Output Practice Part 2","video":"videos/module7/47 - Formatted Output Practice Part 2.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.9"},{"title":"Quiz","question":"// BlueJ project: lesson4/formattedOutput\r\n// Video: Formatted Output Practice Part 2\r\n\r\npublic class MicroKitchenTable\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        int saraCookiesPerDay = 3;\r\n        double saraCerealPerDay = .06;\r\n        String saraName = \"Sara\";\r\n        int cayCookiesPerDay = 1;\r\n        double cayCerealPerDay = 0;\r\n        String cayName = \"Cay\";\r\n        System.out.println(\"cookies | cereal | name\");\r\n        System.out.println(\"------------------------\");\r\n\r\n        // TODO: Print entries for Sara\r\n        // Be sure to line up the entries in the columns using printf\r\n        // Print floating-point numbers with two digits after the decimal point\r\n\r\n        // TODO: Print entries for Cay\r\n\r\n    }\r\n}\r\n","classname":"MicroKitchenTable","expectedoutput":"","programtype":"stdin","type":"program","qid":"9.10"},{"title":" Formatted Output Practice Part 2","video":"videos/module7/48 - Formatted","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.11"},{"title":" First Do It by Hand","video":"videos/module7/49 - First Do It by Hand.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.12"},{"title":" First Do It by Hand, Part 2","video":"videos/module7/50 - First Do It by Hand, Part 2.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.13"},{"title":" Your Turn to Do It by Hand","video":"videos/module7/51 - Your Turn to Do It by Hand.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.14"},{"title":"Quiz","question":"// BlueJ project: Tiles\r\n// Video: Your turn to do it by hand\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class Tiles\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner in = new Scanner(System.in);\r\n\r\n        System.out.print(\"Width of wall: \");\r\n        double width = in.nextDouble();\r\n\r\n        System.out.print(\"Tile size: \");\r\n        double tileSize = in.nextDouble();\r\n\r\n        // TODO: Complete these computations\r\n        int pairs = ...;\r\n        int redTiles = ...;\r\n        int whiteTiles = ...;\r\n\r\n        System.out.println(\"Red tiles: \" + redTiles);\r\n        System.out.println(\"Whites tiles: \" + whiteTiles);\r\n    }\r\n}\r\n","classname":"Tiles","expectedoutput":"Width of wall: 500\r\nTile size: 50\r\nRed tiles: 4\r\nWhites tiles: 5\r\n","input":"500\r\n50\r\n","programtype":"stdin","type":"program","qid":"9.15"},{"title":" Your Turn to Do It by Hand","video":"videos/module7/52 - Your","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.16"},{"title":" Strings","video":"videos/module7/53 - Strings.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.17"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson4/image-13.png'><input style='position:absolute; top:51%; left:46%; height:5%; width:25%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:58%; left:46%; height:5%; width:25%' id=\"quizinput2\" type=\"text\"></input><input style='position:absolute; top:65%; left:46%; height:5%; width:25%' id=\"quizinput3\" type=\"text\"></input><input style='position:absolute; top:72%; left:46%; height:5%; width:25%' id=\"quizinput4\" type=\"text\"></input>","answer":["53","0787c089","57","2c8bd89c2e447c713340f014"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.18"},{"title":" Strings","video":"videos/module7/54 - Strings.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.19"},{"title":" Working with Text","video":"videos/module7/55 - Working with Text.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.20"},{"title":" Working with the Book Text","video":"videos/module7/56 - Working with the Book Text.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.21"},{"title":"Working with the Book Text","question":"// BlueJ Project: lesson4/book1\r\n// Video: Working with the Book Text\r\n\r\nimport java.util.Scanner;\r\nimport java.io.File;\r\n\r\nclass Book\r\n{\r\n    private String bookText;\r\n\r\n    public Book(String fileName)\r\n    {\r\n        readBook(fileName);\r\n    }\r\n\r\n    /**\r\n     * Calculates the number of characters (as in letters and\r\n     * symbols, not people) in the book.\r\n     * @return the number of letters and symbols in the book.\r\n     */\r\n    public int getNumCharacters()\r\n    {\r\n        // TODO: Complete this method\r\n        // You will want to use the fact sheet linked in the instructor comments.\r\n        // Which string method do you want to use?\r\n    }\r\n\r\n    /**\r\n     * A method to help read the book out of the file.\r\n     * You don't have to read this unless you want to.\r\n     * the \"try\" and \"catch\" are java's way of dealing with\r\n     * runtime errors or \"exceptions\".\r\n     */\r\n    public void readBook(String fileName)\r\n    {\r\n        bookText = \"\";\r\n        try\r\n        {\r\n            Scanner file = new Scanner(new File(fileName));\r\n            while (file.hasNextLine())\r\n            {\r\n                String line = file.nextLine();\r\n                bookText += line + \"\\n\";\r\n            }\r\n            file.close();\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e);\r\n        }\r\n    }\r\n}\r\n","testcases":"public class BookTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Book alice = new Book(\"aliceInWonderland.txt\");\r\n        System.out.println(alice.getNumCharacters());\r\n        System.out.println(\"Expected: 144331\");\r\n\r\n        Book mary = new Book(\"mary.txt\");\r\n        System.out.println(mary.getNumCharacters());\r\n        System.out.println(\"Expected: 475\");\r\n    }\r\n}\r\n","classname":"BookTester","programtype":"api","type":"program","qid":"9.22"},{"title":" Working with the Book Text","video":"videos/module7/57 - Working","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.23"},{"title":" Mad Hatter","video":"videos/module7/58 - Mad Hatter.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.24"},{"title":" Mad Hatter","question":"import java.util.Scanner;\r\nimport java.io.File;\r\n\r\nclass Book\r\n{\r\n    private String bookText;\r\n\r\n    public Book(String fileName)\r\n    {\r\n        readBook(fileName);\r\n    }\r\n\r\n    /**\r\n     * Calculates the number of characters (as in letters and\r\n     * symbols, not people) in the book.\r\n     * @return the number of letters and symbols in the book.\r\n     */\r\n    public int getNumCharacters()\r\n    {\r\n        return bookText.length();\r\n    }\r\n\r\n    /**\r\n       Finds where the string \"Mad Hatter\" occurs for the first time in the book.\r\n       @return the location of the first occurrence of the string\r\n    */\r\n    public int firstOccurrenceOfMadHatter()\r\n    {\r\n        // TODO: Complete this method\r\n        //\r\n        // Check the fact sheet. There is a String function\r\n        // that can do this for you.\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * A method to help read the book out of the file.\r\n     * You don't have to read this unless you want to.\r\n     * the \"try\" and \"catch\" are java's way of dealing with\r\n     * runtime errors or \"exceptions\".\r\n     */\r\n    public void readBook(String fileName)\r\n    {\r\n        bookText = \"\";\r\n        try\r\n        {\r\n            Scanner file = new Scanner(new File(fileName));\r\n            while (file.hasNextLine())\r\n            {\r\n                String line = file.nextLine();\r\n                bookText += line + \"\\n\";\r\n            }\r\n            file.close();\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e);\r\n        }\r\n    }\r\n}\r\n","testcases":"// Mad Hatter search\r\npublic class BookTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Book alice = new Book(\"aliceInWonderland.txt\");\r\n\r\n        System.out.println(alice.firstOccurrenceOfMadHatter());\r\n        System.out.println(\"Expected: -1\");\r\n\r\n        Book code = new Book(\"BookTester.java\");\r\n        System.out.println(code.firstOccurrenceOfMadHatter());\r\n        System.out.println(\"Expected: 3\");\r\n    }\r\n}\r\n","classname":"BookTester","programtype":"api","type":"program","qid":"9.25"},{"title":" Mad Hatter","video":"videos/module7/59 - Mad","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.26"},{"title":" Get the First Sentence","video":"videos/module7/60 - Get the First Sentence.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.27"},{"title":"Quiz","question":"// BlueJ Project: lesson4/book3\r\n// Video: Working with the Book Text\r\n\r\nimport java.util.Scanner;\r\nimport java.io.File;\r\n\r\npublic class Book\r\n{\r\n    private String bookText;\r\n\r\n    public Book(String fileName)\r\n    {\r\n        readBook(fileName);\r\n    }\r\n\r\n    /**\r\n     * Gets the first sentence of this book.\r\n     * @return the first sentence (including the period) of this book.\r\n     */\r\n    public String getFirstSentence()\r\n    {\r\n        // TODO: Return the first sentence\r\n    }\r\n\r\n    /**\r\n     * Calculates the number of characters (as in letters and\r\n     * symbols, not people) in the book.\r\n     * @return the number of letters and symbols in the book.\r\n     */\r\n    public int getNumCharacters()\r\n    {\r\n        return bookText.length();\r\n    }\r\n\r\n    /**\r\n     * Finds where the string \"Mad Hatter\" occurs for the first time in the book.\r\n     * @return the location of the first occurrence of the string\r\n     */\r\n    public int firstOccurrenceOfMadHatter()\r\n    {\r\n        return bookText.indexOf(\"Mad Hatter\");\r\n    }\r\n\r\n    /**\r\n     * A method to help read the book out of the file.\r\n     * You don't have to read this unless you want to.\r\n     * The \"try\" and \"catch\" are java's way of dealing with\r\n     * runtime errors or \"exceptions.\"  For more info, see\r\n     * https://docs.oracle.com/javase/tutorial/essential/exceptions/catch.html\r\n     */\r\n    public void readBook(String fileName)\r\n    {\r\n        bookText = \"\";\r\n        try\r\n        {\r\n            Scanner file = new Scanner(new File(fileName));\r\n            while (file.hasNextLine())\r\n            {\r\n                String line = file.nextLine();\r\n                bookText += line + \"\\n\";\r\n            }\r\n            file.close();\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e);\r\n        }\r\n    }\r\n}\r\n","classname":"Book","expectedoutput":"","programtype":"stdin","type":"program","qid":"9.28"},{"title":" Get the First Sentence","video":"videos/module7/61 - Get","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.29"},{"title":" Get the Second Sentence","video":"videos/module7/62 - Get the Second Sentence.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.30"},{"title":"Get the Second Sentence","question":"// BlueJ Project: lesson4/book4\r\n// Video: Working with the Book Text\r\n\r\nimport java.util.Scanner;\r\nimport java.io.File;\r\n\r\nclass Book\r\n{\r\n    private String bookText;\r\n\r\n    public Book(String fileName)\r\n    {\r\n        readBook(fileName);\r\n    }\r\n\r\n    /**\r\n     * Gets the first sentence of this book.\r\n     * @return the first sentence (including the period) of this book.\r\n     */\r\n    public String getFirstSentence()\r\n    {\r\n        int endOfSentence = bookText.indexOf(\".\");\r\n        return bookText.substring(0, endOfSentence + 1);\r\n    }\r\n\r\n    /**\r\n     * Gets the second sentence of this book.\r\n     * @return the second sentence (including the period) of this book.\r\n     */\r\n    public String getSecondSentence()\r\n    {\r\n        // TODO: Get the second sentence\r\n        // Locate the period of the first sentence\r\n        // Return the substring consisting of everything after that period up to\r\n        // the second period\r\n    }\r\n\r\n    /**\r\n     * Calculates the number of characters (as in letters and\r\n     * symbols, not people) in the book.\r\n     * @return the number of letters and symbols in the book.\r\n     */\r\n    public int getNumCharacters()\r\n    {\r\n        return bookText.length();\r\n    }\r\n\r\n    /**\r\n     * Finds where the string \"Mad Hatter\" occurs for the first time in the book.\r\n     * @return the location of the first occurrence of the string\r\n     */\r\n    public int firstOccurrenceOfMadHatter()\r\n    {\r\n        return bookText.indexOf(\"Mad Hatter\");\r\n    }\r\n\r\n    /**\r\n     * A method to help read the book out of the file.\r\n     * You don't have to read this unless you want to.\r\n     * The \"try\" and \"catch\" are java's way of dealing with\r\n     * runtime errors or \"exceptions.\" For more info, see\r\n     * https://docs.oracle.com/javase/tutorial/essential/exceptions/catch.html\r\n     */\r\n    public void readBook(String fileName)\r\n    {\r\n        bookText = \"\";\r\n        try\r\n        {\r\n            Scanner file = new Scanner(new File(fileName));\r\n            while (file.hasNextLine())\r\n            {\r\n                String line = file.nextLine();\r\n                bookText += line + \"\\n\";\r\n            }\r\n            file.close();\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e);\r\n        }\r\n    }\r\n}\r\n","testcases":"public class BookTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Book alice = new Book(\"chapter1.txt\");\r\n\r\n        // The sentence is pretty long, but it is in a single line\r\n        System.out.println(alice.getSecondSentence());\r\n        System.out.println(\"Expected: So she was considering in her own mind (as well as she could, for the hot day made her feel very sleepy and stupid), whether the pleasure of making a daisy-chain would be worth the trouble of getting up and picking the daisies, when suddenly a White Rabbit with pink eyes ran close by her.\");\r\n\r\n        Book mary = new Book(\"mary.txt\");\r\n\r\n        // Here, the end-of-line markers are replaced with a space so that the actual and expected results fit on a line.\r\n        System.out.println(mary.getSecondSentence().replace(\"\\n\", \" \"));\r\n        System.out.println(\"Expected: And everywhere that Mary went, Mary went, Mary went, and everywhere that Mary went, the lamb was sure to go.\");\r\n    }\r\n}\r\n","classname":"BookTester","programtype":"api","type":"program","qid":"9.31"},{"title":" Get the Second Sentence","video":"videos/module7/63 - Get","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.32"},{"title":" Occurrence of Alice","video":"videos/module7/64 - Occurrence of Alice.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.33"},{"title":"Occurrence of Alice","question":"// BlueJ Project: lesson4/book5\r\n// Video: Working with the Book Text\r\n\r\nimport java.util.Scanner;\r\nimport java.io.File;\r\n\r\nclass Book\r\n{\r\n    private String bookText;\r\n\r\n    public Book(String fileName)\r\n    {\r\n        readBook(fileName);\r\n    }\r\n\r\n    /**\r\n     *  Counts how many times \"Alice\" occurs in this book.\r\n     *  @return the number of occurrences\r\n     */\r\n    public int occurrencesOfAlice()\r\n    {\r\n        // TODO: Find the number of times the word \"Alice\" occurs in this book\r\n    }\r\n\r\n    /**\r\n     * Gets the first sentence of this book.\r\n     * @return the first sentence (including the period) of this book.\r\n     */\r\n    public String getFirstSentence()\r\n    {\r\n        int endOfSentence = bookText.indexOf(\".\");\r\n        return bookText.substring(0, endOfSentence + 1);\r\n    }\r\n    \r\n    /**\r\n     * Gets the second sentence of this book.\r\n     * @return the second sentence (including the period) of this book.\r\n     */\r\n    public String getSecondSentence()\r\n    {\r\n        int beginningOfSentence = bookText.indexOf(\".\") + 1;\r\n        int endOfSentence = bookText.indexOf(\".\", beginningOfSentence);\r\n        return bookText.substring(beginningOfSentence, endOfSentence + 1);\r\n    }\r\n\r\n    /**\r\n     * Calculates the number of characters (as in letters and\r\n     * symbols, not people) in the book.\r\n     * @return the number of letters and symbols in the book.\r\n     */\r\n    public int getNumCharacters()\r\n    {\r\n        return bookText.length();\r\n    }\r\n\r\n    /**\r\n     * Finds where the string \"Mad Hatter\" occurs for the first time in the book.\r\n     * @return the location of the first occurrence of the string\r\n     */\r\n    public int firstOccurrenceOfMadHatter()\r\n    {\r\n        return bookText.indexOf(\"Mad Hatter\");\r\n    }\r\n\r\n    /**\r\n     * A method to help read the book out of the file.\r\n     * You don't have to read this unless you want to.\r\n     * the \"try\" and \"catch\" are java's way of dealing with\r\n     * runtime errors or \"exceptions.\" For more info, see\r\n     * https://docs.oracle.com/javase/tutorial/essential/exceptions/catch.html\r\n     */\r\n    public void readBook(String fileName)\r\n    {\r\n        bookText = \"\";\r\n        try\r\n        {\r\n            Scanner file = new Scanner(new File(fileName));\r\n            while (file.hasNextLine())\r\n            {\r\n                String line = file.nextLine();\r\n                bookText += line + \"\\n\";\r\n            }\r\n            file.close();\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e);\r\n        }\r\n    }\r\n}\r\n","testcases":"public class BookTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Book alice = new Book(\"aliceInWonderland.txt\");\r\n\r\n        System.out.println(alice.occurrencesOfAlice());\r\n        System.out.println(\"Expected: 395\");\r\n\r\n        Book mary = new Book(\"mary.txt\");\r\n\r\n        System.out.println(mary.occurrencesOfAlice());\r\n        System.out.println(\"Expected: 0\");\r\n    }\r\n}\r\n","classname":"BookTester","programtype":"api","type":"program","qid":"9.34"},{"title":" Occurrence of Alice","video":"videos/module7/65 - Occurrence","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.35"},{"title":" Occurrence of Any Word","video":"videos/module7/66 - Occurrence of Any Word.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.36"},{"title":"Occurrence of Any Word","question":"// BlueJ Project: lesson4/book6\r\n// Video: Working with the Book Text\r\n\r\nimport java.util.Scanner;\r\nimport java.io.File;\r\n\r\nclass Book\r\n{\r\n    private String bookText;\r\n\r\n    public Book(String fileName)\r\n    {\r\n        readBook(fileName);\r\n    }\r\n\r\n    /**\r\n     * Counts how many times a given word occurs in this book.\r\n     * @param word a word of length >= 1\r\n     * @return the number of occurrences\r\n     */\r\n    public int occurrencesOf(String word)\r\n    {\r\n        // TODO: Complete this method\r\n    }\r\n\r\n    /**\r\n     * Counts how many times \"Alice\" occurs in this book.\r\n     * @return the number of occurrences\r\n     */\r\n    public int occurrencesOfAlice()\r\n    {\r\n        int length = bookText.length();\r\n        int lengthWithoutAlice = bookText.replace(\"Alice\", \"\").length();\r\n        return (length - lengthWithoutAlice) / 5;\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the first sentence of this book.\r\n     * @return the first sentence (including the period) of this book.\r\n     */\r\n    public String getFirstSentence()\r\n    {\r\n        int endOfSentence = bookText.indexOf(\".\");\r\n        return bookText.substring(0, endOfSentence + 1);\r\n    }\r\n\r\n    /**\r\n     * Gets the second sentence of this book.\r\n     * @return the second sentence (including the period) of this book.\r\n     */\r\n    public String getSecondSentence()\r\n    {\r\n        int beginningOfSentence = bookText.indexOf(\".\") + 1;\r\n        int endOfSentence = bookText.indexOf(\".\", beginningOfSentence);\r\n        return bookText.substring(beginningOfSentence, endOfSentence + 1);\r\n    }\r\n\r\n    /**\r\n     * Calculates the number of characters (as in letters and\r\n     * symbols, not people) in the book.\r\n     * @return the number of letters and symbols in the book.\r\n     */\r\n    public int getNumCharacters()\r\n    {\r\n        return bookText.length();\r\n    }\r\n\r\n    /**\r\n     * Finds where the string \"Mad Hatter\" occurs for the first time in the book.\r\n     * @return the location of the first occurrence of the string\r\n     */\r\n    public int firstOccurrenceOfMadHatter()\r\n    {\r\n        return bookText.indexOf(\"Mad Hatter\");\r\n    }\r\n\r\n    /**\r\n     * A method to help read the book out of the file.\r\n     * You don't have to read this unless you want to.\r\n     * The \"try\" and \"catch\" are java's way of dealing with\r\n     * runtime errors or \"exceptions.\" For more info, see\r\n     * https://docs.oracle.com/javase/tutorial/essential/exceptions/catch.html\r\n     */\r\n    public void readBook(String fileName)\r\n    {\r\n        bookText = \"\";\r\n        try\r\n        {\r\n            Scanner file = new Scanner(new File(fileName));\r\n            while (file.hasNextLine())\r\n            {\r\n                String line = file.nextLine();\r\n                bookText += line + \"\\n\";\r\n            }\r\n            file.close();\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e);\r\n        }\r\n    }\r\n}\r\n","testcases":"public class BookTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Book alice = new Book(\"aliceInWonderland.txt\");\r\n\r\n        System.out.println(alice.occurrencesOf(\"Alice\"));\r\n        System.out.println(\"Expected: 395\");\r\n\r\n        System.out.println(alice.occurrencesOf(\"Mad Hatter\"));\r\n        System.out.println(\"Expected: 0\");\r\n    }\r\n}\r\n","classname":"BookTester","programtype":"api","type":"program","qid":"9.37"},{"title":" Occurrence of Any Word","video":"videos/module7/67 - Occurrence","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.38"},{"title":" Putting It All Together","video":"videos/module7/68 - Putting It All Together.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.39"},{"title":"Quiz","question":"// BlueJ Project: lesson4/book7\r\n// Video: Working with the Book Text\r\n    \r\nimport java.util.Scanner;\r\n\r\npublic class LookUpAnyWord\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        System.out.print(\"Type a word and I'll tell you how many times it appears: \");\r\n        // TODO: Create an scanner object to read the user input\r\n        // Read a word from the scanner and assign it to a String variable named word\r\n\r\n        // TODO: Create a book object that reads from aliceInWonderland.txt\r\n\r\n\r\n        // TODO: Find the number of occurences of that word and assign it to a variable named occurences\r\n        System.out.println(word + \" occurs \" + occurrences + \" times!\");\r\n    }\r\n}\r\n","classname":"LookUpAnyWord","expectedoutput":"","input":"Alice\r\rFred\r\n","programtype":"stdin","type":"program","qid":"9.40"},{"title":" Putting It All Together","video":"videos/module7/69 - Putting","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.41"},{"title":" Polish Our Code","video":"videos/module7/70 - Polish Our Code.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.42"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson4/image-14.png' alt='no-image'/> <br/><textarea style='position:absolute; top: 30%; left: 52%; width:30%; height:25%' id=\"quizinput1\" type=\"textarea\"></textarea>","answer":["0287c683355e7b73255be103f1e6139d9e4e809cd1f3c96166c35a759d9c6b719b5693c680879069dd862223"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.43"},{"title":" Polish Our Code","video":"videos/module7/71 - Polish","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.44"},{"title":" Calculating Circular Fields","video":"videos/module7/72 - Calculating Circular Fields.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.45"},{"title":" Formula for Calculating Circular Fields","video":"videos/module7/73 - Formula for Calculating Circular Fields.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.46"},{"title":" How Many Rows of Fields","video":"videos/module7/74 - How Many Rows of Fields.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.47"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson4/image-15.jpg'><input style='position:absolute; top:71%; left:48%; height:5%; width:25%' id=\"quizinput2\" type=\"text\"></input>","answer":["51cec69f3662"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.48"},{"title":" How Many Rows of Fields","video":"videos/module7/75 - How","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.49"},{"title":" How Many Columns Can We Fit","video":"videos/module7/76 - How Many Columns Can We Fit.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.50"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson4/image-16.jpg'><input style='position:absolute; top:55%; left:72%; height:6%; width:20%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:71%; left:72%; height:6%; width:20%' id=\"quizinput2\" type=\"text\"></input>","answer":["56","55"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.51"},{"title":" How Many Columns Can We Fit","video":"videos/module7/77 - How","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.52"},{"title":" Number of Odd vs Even Rows","video":"videos/module7/78 - Number of Odd vs Even Rows.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.53"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson4/image-17.jpg'><input style='position:absolute; top:35%; left:69%; height:6%; width:20%' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:55%; left:69%; height:6%; width:20%' id=\"quizinput2\" type=\"text\"></input>","answer":["57","56"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.54"},{"title":" Number of Odd vs Even Rows","video":"videos/module7/79 - Number","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.55"},{"title":" How Many Fields Can We Fit","video":"videos/module7/80 - How Many Fields Can We Fit.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.56"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson4/image-18.jpg'><input style='position:absolute; top:44%; left:63%; height:6%; width:20%' id=\"quizinput1\" type=\"text\">","answer":["5c"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.57"},{"title":" How Many Fields Can We Fit","video":"videos/module7/81 - How","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.58"},{"title":" Lets Program It Up","video":"videos/module7/82 - Lets Program It Up.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.59"},{"title":"Lets Program It Up","question":"// BlueJ Project: lesson4/fields\r\n\r\nclass Plot\r\n{\r\n    private int width;\r\n    private int length;\r\n\r\n    /**\r\n        Constructs a plot of a given size.\r\n        @param width the width of the plot\r\n        @param length the length of the plot\r\n    */\r\n    public Plot(int width, int length)\r\n    {\r\n        this.width = width;\r\n        this.length = length;\r\n    }\r\n\r\n    /**\r\n     * Calculates the number of circular fields that can fit on this plot.\r\n     */\r\n    public int getNumberOfFields(int radius)\r\n    {\r\n        // TODO: Using the formulas that we developed, compute\r\n        // the total number of rows, then\r\n        // the number of even and odd rows,\r\n        // the number of columns in each even and odd row,\r\n        // and finally the total number of fields\r\n    }\r\n}\r\n","testcases":"public class PlotTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Plot plot = new Plot(1900, 4000);\r\n        System.out.println(plot.getNumberOfFields(400));\r\n        System.out.println(\"Expected: 8\");\r\n        System.out.println(plot.getNumberOfFields(300));\r\n        System.out.println(\"Expected: 18\");\r\n    }\r\n}\r\n","classname":"PlotTester","programtype":"api","type":"program","qid":"9.60"},{"title":" Lets Program It Up","video":"videos/module7/83 - Lets","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.61"},{"title":" How Programming Impacted Ingrids Life","video":"videos/module7/84 - How Programming Impacted Ingrids Life.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.62"},{"title":" Advice from Ingrid","video":"videos/module7/85 - Advice from Ingrid.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"9.63"}]},"10":{"title":"Decisions","lessons":[{"title":" Introduction","video":"videos/module8/01 - Introduction.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.1"},{"title":" Introducing Molly","video":"videos/module8/02 - Introducing Molly.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.2"},{"title":" The If Statement","video":"videos/module8/03 - The If Statement.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.3"},{"title":"Quiz","question":"// Bluej project: elevator\r\n// Video: The if Statement\r\nimport java.util.Scanner;\r\n\r\npublic class ElevatorDemo\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner in = new Scanner(System.in);\r\n        System.out.print(\"Floor: \");\r\n        int floor = in.nextInt();\r\n        int actualFloor;\r\n\r\n        // TODO: Modify the code to calculate the actual floor in a building with neither a 13 or 14 floor\r\n        if (floor > 13)\r\n        {\r\n            actualFloor = floor - 1;\r\n        }\r\n        else\r\n        {\r\n            actualFloor = floor;\r\n        }\r\n        System.out.println(\"Actual floor: \" + actualFloor);\r\n    }\r\n}","classname":"ElevatorDemo","expectedoutput":"","input":"12\r\n13\r\n14\r\n15\r\n","programtype":"stdin","type":"program","qid":"10.4"},{"title":" The If Statement","video":"videos/module8/4 - The","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.5"},{"title":" One Thing or Nothing At All","video":"videos/module8/05 - One Thing or Nothing At All.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.6"},{"title":" Discounted Prices","video":"videos/module8/06 - Discounted Prices.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.7"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson5/discount.jpg' alt='no-image'/> <br/><input style='position:absolute; top: 43%; left: 12%;height:9%; width:9%' id=\"quizinput1\" type=\"text\"></input> <input style='position:absolute; top: 54.5%; left: 12%; height:5.5%; width:10%'id=\"quizinput2\" type=\"text\"></input><input style='position:absolute; top: 62%; left: 12%; height:7%; width:10%' id=\"quizinput3\" type=\"text\"></input>","answer":["5cdb","5dde","5cdb"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.8"},{"title":" Discounted Prices","video":"videos/module8/7 - Discounted","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.9"},{"title":" Is This Discount the Same","video":"videos/module8/08 - Is This Discount the Same.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.10"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson5/discountsame.jpg' alt='no-image'/> <br/><input style='position:absolute; top: 41%; left: 76.3%;height:7%; width:11%' id=\"quizinput1\" type=\"text\"></input> <input style='position:absolute; top: 50%; left: 76.5%; height:6%; width:9%'id=\"quizinput2\" type=\"text\"></input><input style='position:absolute; top: 58%; left: 76%; height:7%; width:10%' id=\"quizinput3\" type=\"text\"></input>","answer":["5cdb","5cde","5cdb"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.11"},{"title":" Is This Discount the Same","video":"videos/module8/9 - Is","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.12"},{"title":" Relational Operators","video":"videos/module8/10 - Relational Operators.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.13"},{"title":"Quiz - Relational Operators","question":"// Bluej project: lesson5/indonesianFlag\r\n\r\n// Please use the >= operator\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\nclass Flag\r\n{\r\n    private Picture pic;\r\n    private int width;\r\n    private int height;\r\n\r\n    // This constructor creates a new flag object and draws it.\r\n    // You don't need to change this.\r\n    public Flag(int width, int height)\r\n    {\r\n        this.width = width;\r\n        this.height = height;\r\n        pic = new Picture(width, height);\r\n        pic.draw();\r\n        for (int x = 0; x < width; x++)\r\n        {\r\n            for (int y = 0; y < height; y++)\r\n            {\r\n                Color c = getColorAt(x, y);\r\n                pic.setColorAt(x, y, c);\r\n            }\r\n        }\r\n    }\r\n    \r\n    public Color getColorAt(int x, int y)\r\n    {\r\n        // TODO: add correct conditions between the parentheses after the if statement\r\n        // to determine which color needs to be used at any (x, y) coordinate\r\n        // TODO: set the variable c to that color\r\n        Color c;\r\n        if (...)\r\n        {\r\n            c = Color.XXX;\r\n        }\r\n        else\r\n        {\r\n            c = Color.YYY;\r\n        }\r\n        return c;\r\n    }\r\n}\r\n","testcases":"public class indonesianFlag{\r\n    public static void main(String[] args) {\r\n        Flag indo = new Flag(200,300);\r\n        Picture pict = new Picture();\r\n        pict.snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\indonesianFlag.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"indonesianFlag","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"10.14"},{"title":" Relational Operators","video":"videos/module8/11 - Relational","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.15"},{"title":" Draw a Flag with Three Colors","video":"videos/module8/12 - Draw a Flag with Three Colors.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.16"},{"title":"Quiz - FrenchFlag","question":"// Bluej project: lesson5/frenchFlag\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\n\r\nclass Flag\r\n{\r\n    private Picture pic;\r\n    private int width;\r\n    private int height;\r\n\r\n    // This constructor creates and draws a flag object.\r\n    // You don't need to change this.\r\n    public Flag(int width, int height)\r\n    {\r\n        this.width = width;\r\n        this.height = height;\r\n        pic = new Picture(width, height);\r\n        pic.draw();\r\n        for (int x = 0; x < width; x++)\r\n        {\r\n            for (int y = 0; y < height; y++)\r\n            {\r\n                Color c = getColorAt(x, y);\r\n                pic.setColorAt(x, y, c);\r\n            }\r\n        }\r\n    }\r\n\r\n    public Color getColorAt(int x, int y)\r\n    {\r\n        // TODO: add correct conditions between the parentheses to determine\r\n        // which color needs to be used at any (x, y) coordinate.  Remember, if\r\n        // the condition of the first if statement is true, the \"else if\" condition\r\n        // is never tested.\r\n        // TODO: set the variable c to that color\r\n        Color c;\r\n        if (x < width / 3)\r\n        {\r\n            c = Color.BLUE;\r\n        }\r\n        else if (x < width * 2 / 3)\r\n        {\r\n            c = Color.WHITE;\r\n        }\r\n        else\r\n        {\r\n            c = Color.RED;\r\n        }\r\n        return c;\r\n    }\r\n}\r\n","testcases":"public class FrenchFlag{\r\n    public static void main(String[] args) {\r\n        Flag fren = new Flag(200,300);\r\n        Picture pict = new Picture();\r\n        pict.snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\FrenchFlag.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"FrenchFlag","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"10.17"},{"title":" Draw a Flag with Three Colors","video":"videos/module8/13 - Draw","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.18"},{"title":" Practice With Relational Operators","video":"videos/module8/14 - Practice With Relational Operators.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.19"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson5/relational.jpg'><input style='position:absolute; top:26%; left:45.5%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:38%; left:45%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:47.5%; left:45%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:26.5%; left:54%;' name='option' value='d' id=\"quizinput4\" type=\"radio\"></input><input style='position:absolute; top:38%; left:53.5%;' name='option' value='e' id=\"quizinput5\" type=\"radio\"></input><input style='position:absolute; top:48%; left:53.5%;' name='option' value='f' id=\"quizinput6\" type=\"radio\"></input>","answer":["05","06","02"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.20"},{"title":" Practice With Relational Operators","video":"videos/module8/15 - Practice","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.21"},{"title":" More Practice with Relational Operators","video":"videos/module8/16 - More Practice with Relational Operators.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.22"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson5/relational-op.jpg' alt='no-image'/> <br/><input style='position:absolute; top: 23%; left: 63%;height:9%; width:22%' id=\"quizinput1\" type=\"text\"></input> <input style='position:absolute; top: 35%; left: 63%; height:6%; width:22%'id=\"quizinput2\" type=\"text\"></input><input style='position:absolute; top: 45%; left: 63%; height:8%; width:22%' id=\"quizinput3\" type=\"text\"></input>","answer":["078fcddb702f6b712248","078fcddb702d6b712248","078fcddb702c2563315be5"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.23"},{"title":" More Practice with Relational Operators","video":"videos/module8/17 - More","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.24"},{"title":" Cutest Kitten","video":"videos/module8/18 - Cutest Kitten.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.25"},{"title":"Quiz","question":"// Bluej project: lesson5/cuteness\r\n\r\npublic class Kitten\r\n{\r\n    private int months; // Age.\r\n    \r\n    public Kitten(int ageInMonths)\r\n    {\r\n        months = ageInMonths;\r\n    }\r\n\r\n    /**\r\n     * Returns how cute a kitten is based on age.\r\n     * Kittens can be \"cute\", \"super cute\", or \"not so cute\".\r\n     * @return kittens below 2 months are not so cute. kittens\r\n     *         above 6 months are cute. kittens between 2 and\r\n     *         6 months (inclusive) are super cute.\r\n     */\r\n    public String getCuteness()\r\n    {\r\n        String cuteness = \"\";\r\n\r\n        // TODO: add the code to determine the cuteness\r\n        return cuteness;\r\n    }\r\n}\r\n","classname":"Kitten","expectedoutput":"","programtype":"stdin","type":"program","qid":"10.26"},{"title":" Cutest Kitten","video":"videos/module8/19 - Cutest","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.27"},{"title":" The Cutest Kitten","video":"videos/module8/20 - The Cutest Kitten.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.28"},{"title":" What Do You Think About This Code","video":"videos/module8/21 - What Do You Think About This Code.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.29"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson5/thinkofcode.png'><input style='position:absolute; top:19%; left:49%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:35%; left:49%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:50%; left:49%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:64%; left:49%;' name='option' value='d' id=\"quizinput4\" type=\"radio\"></input>","answer":["07"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.30"},{"title":" What Do You Think About This Code","video":"videos/module8/22 - What","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.31"},{"title":" Comparing Decimals","video":"videos/module8/01 - Comparing Decimals.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.32"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson5/cmpdecimals.jpg' alt='no-image'/> <br/><input style='position:absolute; top:57%; left:28%; width:31%;' id=\"quizinput1\" type=\"text\"></input>","answer":["1681db8412606d71224ce04dfbf05cc9fd1fd4e480b78d3424f90526ced92933ca"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.33"},{"title":" Comparing Decimals","video":"videos/module8/2 - Comparing","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.34"},{"title":" Comparing Strings","video":"videos/module8/03 - Comparing Strings.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.35"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson5/cmpstrings.jpg' alt='no-image'/> <br/><input style='position:absolute; top:59%; left:28%; width:34%;' id=\"quizinput1\" type=\"text\"></input>","answer":["0287c68335507674034ce702fce75c92a00fb1b0d1e4d4706d"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.36"},{"title":" Comparing Strings","video":"videos/module8/4 - Comparing","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.37"},{"title":" What Does Null Mean","video":"videos/module8/05 - What Does Null Mean.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.38"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson5/nullmean.jpg' alt='no-image'/> <br/><input style='position:absolute; top:36%; left:17%; width:41%;' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:51%; left:18%; width:40%;' id=\"quizinput2\" type=\"text\"></input><input style='position:absolute; top:65%; left:19%; width:40%;' id=\"quizinput3\" type=\"text\"></input>","answer":["179ad584247c7d7e2407e11ce7e21088fb0daabb90e4d26979ac5b62dcc0","179ad584247c7d7e2407e808fce40893fb06d9e980","179ad584247c7d7e2414b903e7ef10"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.39"},{"title":" What Does Null Mean","video":"videos/module8/6 - What","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.40"},{"title":" Find the Error","video":"videos/module8/07 - Find the Error.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.41"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson5/error.png' alt='no-image'/> <br/><input style='position:absolute; top:26%; left:12.5%; height:8.5%;width:3.5%;' id=\"quizinput1\" type=\"text\"></input><input style='position:absolute; top:38%; left:12.5%; height:8.5%;width:3.5%;' id=\"quizinput2\" type=\"text\"></input><input style='position:absolute; top:49%; left:12.5%; height:8.5%;width:3.5%;' id=\"quizinput3\" type=\"text\"></input><input style='position:absolute; top:62%; left:12.5%; height:8.5%;width:3.5%;' id=\"quizinput4\" type=\"text\"></input>","answer":["00","06","05","07"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.42"},{"title":" Find the Error","video":"videos/module8/8 - Find","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.43"},{"title":" And, Or, Not","video":"videos/module8/09 - And, Or, Not.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.44"},{"title":"Quiz","question":"// Bluej project: lesson5-2/sierraFlag\r\n\r\npublic class Flag\r\n{\r\n    private Picture pic;\r\n    private int width;\r\n    private int height;\r\n\r\n    //You don't need to change this.\r\n    public Flag(int width, int height)\r\n    {\r\n        this.width = width;\r\n        this.height = height;\r\n        pic = new Picture(width, height);\r\n        pic.draw();\r\n        for (int x = 0; x < width; x++)\r\n        {\r\n            for (int y = 0; y < height; y++)\r\n            {\r\n                Color c = getColorAt(x, y);\r\n                pic.setColorAt(x, y, c);\r\n            }\r\n        }\r\n    }\r\n\r\n    public Color getColorAt(int x, int y)\r\n    {\r\n        Color c;\r\n        if ()\r\n        {\r\n            // TODO: Write the if/else statement to determine if a pixel should be blue or white.\r\n        }\r\n        return c;\r\n    }\r\n\r\n}\r\n","classname":"Flag","expectedoutput":"","programtype":"stdin","type":"program","qid":"10.45"},{"title":" And, Or, Not","video":"videos/module8/10 - And,","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.46"},{"title":" Or","video":"videos/module8/11 - Or.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.47"},{"title":"Quiz - Or","question":"import java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\n\r\nclass Flag\r\n{\r\n    private Picture pic;\r\n    private int width;\r\n    private int height;\r\n\r\n    public Color getColorAt(int x, int y)\r\n    {\r\n        // TODO: write code to determin if the pixel at x, y should be blue, red or white\r\n    }\r\n\r\n    public Flag(int width, int height)\r\n    {\r\n        this.width = width;\r\n        this.height = height;\r\n        pic = new Picture(width, height);\r\n        pic.draw();\r\n        for (int x = 0; x < width; x++)\r\n        {\r\n            for (int y = 0; y < height; y++)\r\n            {\r\n                Color c = getColorAt(x, y);\r\n                pic.setColorAt(x, y, c);\r\n            }\r\n        }\r\n    }\r\n}","testcases":"\npublic class charlieFlag{\r\n    public static void main(String[] args) {\r\n        Flag chF = new Flag(200,100);\r\n        Picture pict = new Picture();\r\n        pict.snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    System.exit(0);   \r\n    }\r\n}\r\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\charlieFlag.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"charlieFlag","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"10.48"},{"title":" Or","video":"videos/module8/12 - Or.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.49"},{"title":" Both Threes","video":"videos/module8/13 - Both Threes.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.50"},{"title":"Quiz","question":"<img height='80%' width='80%' src='images/lesson5/threes.jpg' alt='no-image'/> <br/><input style='position:absolute; top: 30%; left: 28%;height:10%; width:30%' id=\"quizinput1\" type=\"text\"></input> <br/><input style='position:absolute; top: 53%; left: 28%; height:10%; width:30%'id=\"quizinput2\" type=\"text\"></input>","answer":["1cd389c36737612d6d1a","1cd389c33d6d612d6d1a"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.51"},{"title":" Both Threes","video":"videos/module8/14 - Both","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.52"},{"title":" Exactly One Three","video":"videos/module8/15 - Exactly One Three.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.53"},{"title":"Quiz","question":"// BlueJ Project: lesson5/exactlyOneThree\r\n\r\npublic class DiceGame\r\n{\r\n    /**\r\n     * Calculates the score of a round of this game.\r\n     * x the first roll\r\n     * y the second roll\r\n     * @return a score of 1 if exactly one is 3, a score of 0 otherwise\r\n     */\r\n    public int exactlyOneThree(int x, int y)\r\n    {\r\n        if (...) // TODO: if exactly one of x and y is 3\r\n        {\r\n            return 1;\r\n        }\r\n        else\r\n        {\r\n            return 0;\r\n        }\r\n\r\n    }\r\n}\r\n","classname":"DiceGame","expectedoutput":"","programtype":"stdin","type":"program","qid":"10.54"},{"title":" Exactly One Three","video":"videos/module8/16 - Exactly","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.55"},{"title":" Boolean","video":"videos/module8/17 - Boolean.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.56"},{"title":" Using Booleans","video":"videos/module8/18 - Using Booleans.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.57"},{"title":"Quiz","question":"// Bluej project: lesson5-2/vowels\r\n\r\npublic class Word\r\n{\r\n    private String letters;\r\n    \r\n    public Word(String letters) \r\n    {\r\n        this.letters = letters.toLowerCase();\r\n    }\r\n    \r\n    /** Checks whether the ith letter is a vowel.\r\n     *  @return true if the ith letter is a vowel, false otherwise.\r\n     */\r\n    public boolean isVowel(int i)\r\n    {\r\n        // TODO your code here!\r\n        // A little piece of code to get you started\r\n        return letters.substring(i, i+1).equals(\"a\");\r\n    }\r\n    \r\n    /** Checks whether the ith letter is a consonant.\r\n     *  @return true if the ith letter is a consonant, false otherwise.\r\n     */\r\n    public boolean isConsonant(int i)\r\n    {\r\n        return false;\r\n    }\r\n}\r\n","classname":"Word","expectedoutput":"","programtype":"stdin","type":"program","qid":"10.58"},{"title":" Using Booleans","video":"videos/module8/19 - Using","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.59"},{"title":" Nested If","video":"videos/module8/20 - Nested If.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.60"},{"title":"Quiz","question":"// Bluej project: lesson5-2/plurals\r\n\r\npublic class Word\r\n{\r\n    private String letters;\r\n\r\n    public Word(String letters)\r\n    {\r\n        this.letters = letters.toLowerCase();\r\n    }\r\n\r\n    /**\r\n        Forms the plural of this word.\r\n        @return the plural, using the rules for regular nouns\r\n    */\r\n    public String getPluralForm()\r\n    {\r\n        // TODO: Complete this method\r\n        // If the word ends in y preceded by a consonant you take away the y and add ies.\r\n        // If the word ends in y preceded by a vowel, you just add an s.\r\n        // You add an es when a word ends in o, or s, or sh, or ch.\r\n        // In all the other case just add an s.\r\n        // you can use the\r\n        //  isVowel\r\n        //  isConsonant\r\n        //  is\r\n        // methods from below.\r\n    }\r\n\r\n    /**\r\n       Tests whether the ith letter is a vowel.\r\n       @param i the index of the letter to test\r\n       @return true if the ith letter is a vowel\r\n    */\r\n    public boolean isVowel(int i)\r\n    {\r\n        return is(i, \"a\")\r\n               || is(i, \"e\")\r\n               || is(i, \"i\")\r\n               || is(i, \"o\")\r\n               || is(i, \"u\");\r\n    }\r\n\r\n    /**\r\n       Tests whether the ith letter is a consonant.\r\n       @param i the index of the letter to test\r\n       @return true if the ith letter is a consonant\r\n    */\r\n    public boolean isConsonant(int i)\r\n    {\r\n        return !isVowel(i);\r\n    }\r\n\r\n    /**\r\n     * Checks what letter is in position i\r\n     * @return true when the the letter of letters is the given letter.\r\n     *         false otherwise.\r\n     * @param i index in letters\r\n     * @param letter the letter to match with. must be one character long.\r\n     */\r\n    public boolean is(int i, String letter)\r\n    {\r\n        return letters.substring(i, i + 1).equals(letter);\r\n    }\r\n}\r\n","classname":"Word","expectedoutput":"","programtype":"stdin","type":"program","qid":"10.61"},{"title":" Nested If","video":"videos/module8/21 - Nested","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.62"},{"title":" Elevator Demo with Input Validation","video":"videos/module8/22 - Elevator Demo with Input Validation.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.63"},{"title":"Quiz","question":"// BlueJ project: lesson5-2/elevatorWithValidation\r\n\r\nimport java.util.Scanner;\r\n\r\n/**\r\n   This program simulates an elevator panel that skips the 13th floor, checking for\r\n   input errors.\r\n*/\r\npublic class ElevatorDemo\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner in = new Scanner(System.in);\r\n        System.out.print(\"Floor: \");\r\n        if (...) //check if the input is an integer.  Hint: use the Scanner method hasNextInt.\r\n        {\r\n            // Now we know that the user entered an integer\r\n\r\n            int floor = in.nextInt();\r\n\r\n            if (...)\r\n            {\r\n                System.out.println(\"Error: There is no thirteenth floor.\");\r\n            }\r\n            else if (...)\r\n            {\r\n                System.out.println(\"Error: The floor must be between 1 and 18.\");\r\n            }\r\n            else\r\n            {\r\n                // Now we know that the input is valid\r\n\r\n                int actualFloor = floor;\r\n                if (...)\r\n                {\r\n                    actualFloor = floor - 1;\r\n                }\r\n\r\n                System.out.println(\"The elevator will travel to the actual floor \"\r\n                                   + actualFloor);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            System.out.println(\"Error: Not an integer.\");\r\n        }\r\n    }\r\n}\r\n","classname":"ElevatorDemo","expectedoutput":"","input":"10\r\n12\r\n15\r\n18\r\n","programtype":"stdin","type":"program","qid":"10.64"},{"title":" Elevator Demo with Input Validation","video":"videos/module8/23 - Elevator","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.65"},{"title":" Advice to Students","video":"videos/module8/24 - Advice to Students.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"10.66"}]},"11":{"title":"Problem Set 3","lessons":[{"title":"Short Problem 1 - Constant Seconds Per Minute","question":"<img src='images/Problem Set 3/3.1.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0287da912d31717e2409d728d1cc32bf8070b491e2d8f04d5a9c6153ded43935ce03"],"type":"quiz","tips":"","qid":"11.1"},{"title":"Short Problem 2 - Second Per Minute","question":"<img src='images/Problem Set 3/3.2.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["149bd69c287238632448f004f1a31595a70fb791f3c8f34047966553acb6544ab06da4e6cedec613"],"type":"quiz","tips":"","qid":"11.2"},{"title":"Short Problem 3 - Whole Days","question":"<img src='images/Problem Set 3/3.3.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["4c87da8468313022631db143aba353dbe11bcd"],"type":"quiz","tips":"","qid":"11.3"},{"title":"Short Problem 4 - Value of This Expression","question":"<img src='images/Problem Set 3/3.4.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["5d"],"type":"quiz","tips":"","qid":"11.4"},{"title":"Short Problem 5 - What is Printed","question":"<img src='images/Problem Set 3/3.5.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["5c"],"type":"quiz","tips":"","qid":"11.5"},{"title":"Short Problem 6 - 7 divided by 2 in Java","question":"<img src='images/Problem Set 3/3.6.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["57"],"type":"quiz","tips":"","qid":"11.6"},{"title":"Short Problem 7 - 7 modulo 2","question":"<img src='images/Problem Set 3/3.7.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["55"],"type":"quiz","tips":"","qid":"11.7"},{"title":"Short Problem 8 - Volume of cone","question":"// Complete the code to find the volume of a cone with radius r and height h.\r\n// Use Math.PI for pi\r\n\r\nclass Cone\r\n{\r\n    private int r;\r\n    private int h;\r\n\r\n    /**\r\n     * Constructor for the Cone class\r\n     * @param r, the radius of the cone\r\n     * @param h, the height of the cone\r\n     */\r\n    public Cone(int r, int h)\r\n    {\r\n        this.r = r;\r\n        this.h = h;\r\n    }\r\n   \r\n    /**\r\n     * Calculates the volume of the cone\r\n     * @return the volume of the cone\r\n     * (Volume of a cone = 1/3 * PI * r^2 * h)\r\n     */\r\n    public double getVolume()\r\n    {\r\n        double volume;\r\n        // TODO write the code to assign the volume of the cone to the variable volume. Use Math.PI\r\n    }\r\n}\r\n","testcases":"public class ConeTester{\r\n\tpublic static void main(String args[]){\r\n\t\tCone obj=new Cone(4,3);\r\n\t\tSystem.out.println(\"Actual\\tExpected\");\r\n\t\tSystem.out.println(\"---------------------------------------------\");\r\n\t\tdouble volume=obj.getVolume();\r\n\t\tint retval=Double.compare(50.26548245743669,volume);\r\n\t\tif(retval==0)\r\n\t\t\tSystem.out.println(volume+\"\\t\"+50.26548245743669+\"\\t\"+\"pass\");\r\n\t\telse\r\n\t\t\tSystem.out.println(volume+\"\\t\"+50.26548245743669+\"\\t\"+\"fail\");\r\n\t}\r\n}","classname":"ConeTester","programtype":"api","type":"program","qid":"11.8"},{"title":"Short Problem 9 - Last Digit","question":"/**\r\n * Complete the code in this method \r\n * Define last and assign the last digit of the number to it\r\n */\r\nclass Digits\r\n{\r\n    /**\r\n     * Gets the last digit of a number\r\n     * @param number the number whose last digit we want\r\n     * @return the last digit of the parameter\r\n     */\r\n    \r\n    public int lastDigit(int number)\r\n    {\r\n        //your code goes here. \r\n        return last;\r\n    }\r\n}\r\n","testcases":"public class DigitsTest{\r\n\tpublic static void main(String args[]){\r\n\t\tDigits d=new Digits();\r\n\t\tint score=0;\r\n\t\tSystem.out.println(\"Arguments\\tActual\\tExpected\");\r\n\t\tSystem.out.println(\"---------------------------------------------\");\r\n\t\tint testcases[]={10231,1,345,5};\r\n\t\tfor(int i=0;i<testcases.length-1;i+=2){\r\n\t\t\tint last=d.lastDigit(testcases[i]);\r\n\t\t\tString teststatus=\"\";\r\n\t\t\tif(last==testcases[i+1]){\r\n\t\t\t\tteststatus=\"pass\";\r\n\t\t\t\tscore ++;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tteststatus=\"fail\";\r\n\t\t\t}\r\n\t\t\tSystem.out.println(testcases[i]+\"\\t\"+last+\"\\t\"+testcases[i+1]+\"\\t\"+teststatus);\r\n\r\n\t\t}\r\n\t\tSystem.out.println(\"Score: \"+score);\r\n\t}\r\n}","classname":"DigitsTest","programtype":"api","type":"program","qid":"11.9","output":"Arguments\tActual\tExpected\r<br>---------------------------------------------\r<br>10231\t1\t1\tpass\r<br>345\t5\t5\tpass\r<br>Score: 2\r<br>"},{"title":"Short Problem 10 - Average","question":"import java.lang.*;\n/**\r\n * Compelete the method to return the average of three numbers\r\n */\r\nclass AverageTest\r\n{\r\n    public double average(int test1, int test2, int test3)\r\n    {\r\n        //you can put code here\r\n    }\r\n}\r\n","testcases":"public class AverageTestTester{\r\n\tpublic static void main(String args[]){\r\n\t\tAverageTest obj=new AverageTest();\r\n\t\tSystem.out.println(\"Arguments\\tActual\\tExpected\");\r\n\t\tSystem.out.println(\"---------------------------------------------\");\r\n\t\tdouble d1=4.0;\r\n\t\tdouble avg=obj.average(3,4,5);\r\n\t\tint retval = Double.compare(d1,avg);\r\n\t\tString teststatus=\"\";\r\n\t\tif(retval == 0){\r\n\t\t\tteststatus=\"pass\";\r\n\t\t}else{\r\n\t\t\tteststatus=\"fail\";\r\n\t\t}\r\n\t\tSystem.out.println(\"3, 4, 5\"+\"\\t\\t\"+avg+\"\\t\\t\"+d1+\"\\t\"+teststatus);\r\n\t\tdouble d2=6.0;\r\n\t\tavg=obj.average(5,6,7);\r\n\t\tretval = Double.compare(d2,avg);\r\n\t\tif(retval == 0){\r\n\t\t\tteststatus=\"pass\";\r\n\t\t}else{\r\n\t\t\tteststatus=\"fail\";\r\n\t\t}\r\n\t\tSystem.out.println(\"3, 4, 5\"+\"\\t\\t\"+avg+\"\\t\\t\"+d2+\"\\t\"+teststatus);\r\n\t}\r\n}","classname":"AverageTestTester","programtype":"api","type":"program","qid":"11.10"},{"title":"Short Problem 11 - Formatting printf","question":"<img src='images/Problem Set 3/3.11.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["3797c784247c367f255daa1de0ea128fb507c6f181b7933572c31936b9b95821d703"],"type":"quiz","tips":"","qid":"11.11"},{"title":"Short Problem 12 - String Length","question":"/**\r\n * Complete the method to return the length of string parameter\r\n */\r\nclass LengthTest\r\n{\r\n    /**\r\n     * Gets the length of a string\r\n     * @param str the string\r\n     * @return the length of the string\r\n     */\r\n    public int stringLength(String str)\r\n    {\r\n        return str.length();\r\n    }\r\n}\r\n","testcases":"public class LengthTester{\r\n\tpublic static void main(String args[]){\r\n\t\tLengthTest obj=new LengthTest();\r\n\t\tSystem.out.println(\"Arguments\\tActual\\tExpected\");\r\n\t\tSystem.out.println(\"---------------------------------------------\");\r\n\t\tString testcases[]={\"Hello World\",\"11\",\"Udacity\",\"7\"};\r\n\t\tfor(int i=0;i<testcases.length-1;i+=2){\r\n\t\t\tint len=obj.stringLength(testcases[i]);\r\n\t\t\tString teststatus=\"\";\r\n\t\t\tif(len==Integer.parseInt(testcases[i+1])){\r\n\t\t\t\tteststatus=\"pass\";\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tteststatus=\"fail\";\r\n\t\t\t}\r\n\t\t\tSystem.out.println(testcases[i]+\"\\t\"+len+\"\\t\"+testcases[i+1]+\"\\t\"+teststatus);\r\n\t\t}\r\n\t}\r\n}","classname":"LengthTester","programtype":"api","type":"program","qid":"11.12","output":"Arguments\tActual\tExpected\r<br>---------------------------------------------\r<br>Hello World\t11\t11\tpass\r<br>Udacity\t7\t7\tpass\r<br>"},{"title":"Short Problem 13 - Concatenation","question":"/**\r\n * Complete the code to return a string\r\n * consisting of the name, a colon(:), a space, and the score.\r\n * For example:\r\n * concatenation(\"Cay\", 10) will produce \"Cay: 10\"\r\n */\r\nclass ConcatTest\r\n{\r\n    /**\r\n     * Gets a string in the format name: score\r\n     * @param name the name to concatenate\r\n     * @param score the score to concatenate\r\n     * @return the new string\r\n     */\r\n    public String concatenation(String name, int score)\r\n    {\r\n        //your code goes here\r\n\r\n    }\r\n}\r\n","testcases":"public class ConcatTester{\r\n\tpublic static void main(String args[]){\r\n\t\tConcatTest obj=new ConcatTest();\r\n\t\tSystem.out.println(\"Arguments\\tActual\\tExpected\");\r\n\t\tSystem.out.println(\"---------------------------------------------\");\r\n\t\tString testcases[]={\"Jonathan\",\"6\",\"Jonathan: 6\",\"Sara\",\"9001\",\"Sara: 9001\"};\r\n\t\tfor(int i=0;i<testcases.length-1;i+=3){\r\n\t\t\tString str=obj.concatenation(testcases[i],Integer.parseInt(testcases[i+1]));\r\n\t\t\tString teststatus=\"\";\r\n\t\t\tif(str.equals(testcases[i+2])){\r\n\t\t\t\tteststatus=\"pass\";\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tteststatus=\"fail\";\r\n\t\t\t}\r\n\t\t\tSystem.out.println(testcases[i]+\",\"+testcases[i+1]+\"\\t\"+str+\"\\t\"+testcases[i]+\": \"+testcases[i+1]+\"\\t\"+teststatus);\r\n\t\t}\r\n\t}\r\n}","classname":"ConcatTester","programtype":"api","type":"program","qid":"11.13"},{"title":"Short Problem 14 - A String Called book","question":"<img src='images/Problem Set 3/3.14.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["379ac6992f7638723f46ef4dafa35eb6aa0f82b5c6e8cf6d60ac157491867223974bdc83d1bf975ac3862e34f006d9e4b913bab45c3fff3acffefe"],"type":"quiz","tips":"","qid":"11.14"},{"title":"Short Problem 15 -  First Char","question":"/**\r\n * Complete the method to return the first character of the parameter as a String\r\n * (use the substring method)\r\n */\r\n class Substrings\r\n{\r\n    /**\r\n     * Gets the first character of the parameter\r\n     * @param text the string we want the first character of\r\n     * @return a stringf containing the first character\r\n     */\r\n    public String firstCharacter(String text)\r\n    {\r\n        //your code goes here\r\n\r\n    }\r\n}\r\n","testcases":"public class SubstringsTester{\r\n\tpublic static void main(String args[]){\r\n\t\tSubstrings obj=new Substrings();\r\n\t\tSystem.out.println(\"Arguments\\tActual\\tExpected\");\r\n\t\tSystem.out.println(\"---------------------------------------------\");\r\n\t\tString testcases[]={\"C\",\"C\",\"Sara\",\"S\",\"Udacity\",\"U\"};\r\n\t\tfor(int i=0;i<testcases.length-1;i+=2){\r\n\t\t\tString str=obj.firstCharacter(testcases[i]);\r\n\t\t\tString teststatus=\"\";\r\n\t\t\tif(str.equals(testcases[i+1])){\r\n\t\t\t\tteststatus=\"pass\";\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tteststatus=\"fail\";\r\n\t\t\t}\r\n\t\t\tSystem.out.println(testcases[i]+\"\\t\"+str+\"\\t\"+testcases[i+1]+\"\\t\"+teststatus);\r\n\t\t}\r\n\t}\r\n}","classname":"SubstringsTester","programtype":"api","type":"program","qid":"11.15"},{"title":"Short Problem 16 - Legal Drinking Age","question":"<img src='images/Problem Set 3/3.16.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0d8894d820767d306d14a45fa3aa"],"type":"quiz","tips":"","qid":"11.16"},{"title":"Short Problem 17 - Discounted Price","question":"<img src='images/Problem Set 3/3.17.jpg' alt='image'><br><input class='input-sm' id=\"quizinput1\" type=\"text\"></input>&nbsp;&nbsp;<input class='input-sm' id=\"quizinput1\" type=\"text\"></input>&nbsp;&nbsp;<input class='input-sm' id=\"quizinput1\" type=\"text\"></input>","answer":["5cdb","5dde","5cdb"],"type":"quiz","tips":"","qid":"11.17"},{"title":"Short Problem 18 - Last Char","question":"/**\r\n * Complete the method to return the last character of the parameter as a String\r\n * (use substring)\r\n */\r\npublic class Substrings\r\n{\r\n    /**\r\n     * Gets the last character of the parameter\r\n     * @param text the string we want the last character of\r\n     * @return a string containing the last character\r\n     */\r\n    public String lastCharacter(String text)\r\n    {\r\n        //your code goes here\r\n\r\n    }\r\n}\r\n","testcases":"public class SubstringsTester{\r\n\tpublic static void main(String args[]){\r\n\t\tSubstrings obj=new Substrings();\r\n\t\tSystem.out.println(\"Arguments\\tActual\\tExpected\");\r\n\t\tSystem.out.println(\"---------------------------------------------\");\r\n\t\tString testcases[]={\"C\",\"C\",\"Sara\",\"a\",\"Udacity\",\"y\"};\r\n\t\tfor(int i=0;i<testcases.length-1;i+=2){\r\n\t\t\tString str=obj.lastCharacter(testcases[i]);\r\n\t\t\tString teststatus=\"\";\r\n\t\t\tif(str.equals(testcases[i+1])){\r\n\t\t\t\tteststatus=\"pass\";\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tteststatus=\"fail\";\r\n\t\t\t}\r\n\t\t\tSystem.out.println(testcases[i]+\"\\t\"+str+\"\\t\"+testcases[i+1]+\"\\t\"+teststatus);\r\n\t\t}\r\n\t}\r\n}","classname":"SubstringsTester","programtype":"api","type":"program","qid":"11.18"},{"title":"Short Problem 19 - Substring","question":"<img src='images/Problem Set 3/3.19.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["449d9a8334736b642240ea0abab050dbe406df"],"type":"quiz","tips":"","qid":"11.19"},{"title":"Short Problem 20 - What Does This Code Print?","question":"<img src='images/Problem Set 3/3.20.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["56dc"],"type":"quiz","tips":"","qid":"11.20"},{"title":"Question 1 - Yard Calculator","question":"//A landscape designer needs a program to make calculations in meters about a front yard \r\n//given its width and length in feet.  Write a class YardCalculator with a constructor that \r\n//takes the width and length in feet as arguments:\r\n//public YardCalculator(double length, double width)\r\n\r\n//Provide methods:\r\n//  public double perimeter() which returns the perimeter in meters\r\n//  public double area() which returns the area in square meters\r\n//  public double diagonal() which returns the diagonal in meters\r\n\r\n//For reference:\r\n//  1 foot = 0.3048 meters.\r\n\r\n//Define and use a constant for the conversion factor. Define it in the class itself, \r\n//outside any method, so all methods in any class can see it, e.g.\r\n//  public static final double METERS_PER_FOOT = 0.3048;\r\n\r\n//HINT: diagonal = square root of (width^2 plus height^2)\r\n\r\n// Need help starting this question? In the lesson titled \r\n// \"Starting points: Problem Set Questions\", go to the\r\n// problem titled \"Problem Set 3 - Question 1\" for some tips on \r\n// how to begin. \r\n\r\nclass YardCalculator\r\n{\r\n    //Instance variables go here.\r\n    \r\n    /**\r\n     * Constructs a YardCalculator with the given parameters\r\n     * @param theLength the length of the yard\r\n     * @param theWidth the width of the yard\r\n     */\r\n    public YardCalculator(double theLength, double theWidth)\r\n    {\r\n     \r\n    }\r\n\r\n    /**\r\n     * Gets the perimeter of the yard\r\n     * @return the perimeter\r\n     */\r\n    public double perimeter()\r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the area of the yard\r\n     * @return the area\r\n     */\r\n    public double area()\r\n    {\r\n\r\n    }\r\n\r\n     /**\r\n     * Gets the diagonal of the yard\r\n     * @return the diagonal\r\n     */\r\n    public double diagonal()\r\n    {\r\n\r\n    }\r\n\r\n}\r\n","testcases":"// You don't need to modify this file\r\n\r\npublic class YardCalculatorTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        double length = 40.0;\r\n        double width = 30.0;\r\n\r\n        YardCalculator calculator = new YardCalculator(length, width); \r\n        \r\n        double perimeter = calculator.perimeter();\r\n        double area = calculator.area();\r\n        double diagonal = calculator.diagonal();\r\n\r\n        System.out.println(\"perimeter: \" + perimeter);\r\n        System.out.println(\"Expected: 42.672\");\r\n        System.out.println(\"diagonal: \" + diagonal);\r\n        System.out.println(\"Expected: 15.24\");\r\n\r\n        length = 60.1;\r\n        width = 35.5;\r\n        \r\n        calculator = new YardCalculator(length, width); \r\n        perimeter = calculator.perimeter();\r\n        area = calculator.area();\r\n        diagonal = calculator.diagonal();\r\n\r\n        System.out.printf(\"perimeter: %.2f\\n\", perimeter);\r\n        System.out.println(\"Expected: 58.28\");\r\n        System.out.printf(\"area: %.2f\\n\", area);\r\n        System.out.println(\"Expected: 198.21\");\r\n        System.out.printf(\"diagonal: %.2f\\n\", diagonal);\r\n        System.out.println(\"Expected: 21.28\");        \r\n    }\r\n}","classname":"YardCalculatorTester","programtype":"api","type":"program","qid":"11.21"},{"title":"Question 2 - Mileage Printer","question":"//Write a program called MilagePrinter that asks the user to input the following values:\r\n//\tThe number of gallons currently in the tank\r\n//\tThe fuel efficiency in miles per gallon\r\n\r\n//and then prints how far the car can go on the gas in the tank and the cost of driving 100 miles. \r\n//Print the distance with 1 decimal point and the cost with 2 decimals.\r\n\r\n//Use System.out.print and not System.out.println. Otherwise your output will not be\r\n//formatted correctly\r\n\r\n//Assume the cost per gallon is $3.95. Define it as a constant:\r\n//     final double COST_PER_GALLON = 3.95;\r\n\r\n//If value entered for efficiency is less than or equal to 0, print \"No can go\".\r\n//Otherwise continue with the calculations. You output should be in the exact\r\n//format shown below. The text will be identical - only the numbers will change.\r\n\r\n//Sample runs for the final version:\r\n//Enter the number of gallons of gas in the tank 5.1\r\n//Enter the fuel efficiency 35.0\r\n//Distance:   178.5\r\n//Cost:       11.29\r\n\r\n//Enter the number of gallons of gas in the tank 25\r\n//Enter the fuel efficiency -5\r\n//No can go \r\n\r\n// Need help starting this question? In the lesson titled \r\n// \"Starting points: Problem Set Questions\", go to the\r\n// problem titled \"Problem Set 3 - Question 2\" for some tips on \r\n// how to begin. \r\n\r\n//Important: Be sure to print the string exactly as shown \r\n\r\npublic class MileagePrinter\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // your code here\r\n\r\n    }\r\n}\r\n","classname":"MileagePrinter","expectedoutput":"","programtype":"stdin","type":"program","qid":"11.22"},{"title":"Question 3 -  Balloon","question":"//Implement a class Balloon that models a spherical balloon that is being filled with air.  \r\n//The constructor constructs an empty balloon (That is, the volume is 0).\r\n\r\n//Supply these methods: \r\n//\tvoid addAir(double amount) adds the given amount of air\r\n//\tdouble getVolume() gets the current volume\r\n//\tdouble getSurfaceArea() gets the current surface area\r\n//\tdouble getRadius() gets the current radius\r\n\r\n// Need help starting this question? In the lesson titled \r\n// \"Starting points: Problem Set Questions\", go to the\r\n// problem titled \"Problem Set 3 - Question 3\" for some tips on \r\n// how to begin. \r\n\r\n//See this link for formulas for volume and surface area: \r\n//    http://math.about.com/od/formulas/ss/surfaceareavol.htm \r\n\r\n//Hints\r\n//\tYou can find the nth root of a number by using the pow method from the Math class \r\n//  where the exponent is 1/n.\r\n//\tYou will need to solve the volume formula for radius.\r\n\r\n\r\n/**\r\n * models a spherical balloon that is being filled with air\r\n */\r\nclass Balloon\r\n{\r\n\r\n}\r\n","testcases":"/**\r\n * Tests the Balloon class\r\n * You don't need to modify or change this file\r\n */\r\npublic class BalloonTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Balloon balloon = new Balloon();\r\n        balloon.addAir(100);\r\n        System.out.println(balloon.getRadius());\r\n        System.out.println(\"expected: 2.8794119114848606\");\r\n        System.out.println(balloon.getVolume());\r\n        System.out.println(\"expected: 100.0\");\r\n        System.out.println(balloon.getSurfaceArea());\r\n        System.out.println(\"expected: 104.18794157356089\");\r\n        \r\n        balloon.addAir(100);\r\n        System.out.println(balloon.getRadius());\r\n        System.out.println(\"expected: 3.6278316785978095\");\r\n        System.out.println(balloon.getSurfaceArea());\r\n        System.out.println(\"expected: 165.38804805627188\");\r\n    }\r\n}\r\n","classname":"BalloonTester","programtype":"api","type":"program","qid":"11.23"}]},"12":{"title":"Loops","lessons":[{"title":" Introduction","video":"videos/module9/01 - Introduction.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.1"},{"title":" How to Become a  Millionaire","video":"videos/module9/02 - How to Become a  Millionaire.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.2"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-1.jpg'><input style='position:absolute; top:41%; left:23.5%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:50%; left:24.5%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:59%; left:24%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:66%; left:25%;' name='option' value='d' id=\"quizinput4\" type=\"radio\"></input>","answer":["06"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.3"},{"title":" How to Become a  Millionaire","video":"videos/module9/3 - How","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.4"},{"title":" The While Loop","video":"videos/module9/04 - The While Loop.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.5"},{"title":" Who Wants To Be A Billionaire","video":"videos/module9/05 - Who Wants To Be A Billionaire.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.6"},{"title":"Quiz","question":"// Bluej project: lesson6/billionaire1\r\n// TODO: Change the program so that it will calculate the number of years\r\n// to reach 1 billion dollars instead of 1 million.\r\npublic class InterestCalculator\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        double balance = 100;\r\n        int year = 0;\r\n\r\n        while (balance < 1000000)\r\n        {\r\n            double interest = balance * .01;\r\n            balance = balance + interest;\r\n            year++;\r\n        }\r\n        System.out.println(\"It will take \" + year + \" years.\");\r\n    }\r\n}\r\n","classname":"InterestCalculator","expectedoutput":"","programtype":"stdin","type":"program","qid":"12.7"},{"title":" Who Wants To Be A Billionaire","video":"videos/module9/6 - Who","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.8"},{"title":" Better Interest Rates","video":"videos/module9/07 - Better Interest Rates.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.9"},{"title":"Quiz","question":"// Bluej project: lesson6/billionaire2\r\n// TODO: Change the Program so that it will calculate the number of years\r\n// to reach 1 million dollars when the interest rate is 10%\r\npublic class InterestCalculator\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        double balance = 100;\r\n        int year = 0;\r\n\r\n        while (balance < 1000000)\r\n        {\r\n            double interest = balance * .01;\r\n            balance = balance + interest;\r\n            year++;\r\n        }\r\n        System.out.println(\"It will take \" + year + \" years.\");\r\n    }\r\n}\r\n","classname":"InterestCalculator","expectedoutput":"","programtype":"stdin","type":"program","qid":"12.10"},{"title":" Better Interest Rates","video":"videos/module9/8 - Better","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.11"},{"title":" What Does This Loop Print","video":"videos/module9/09 - What Does This Loop Print.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.12"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-2.jpg' alt='no-image'/><input id=\"quizinput1\" style=\"position:absolute; top:60%; left:17%\" type=\"text\"></input>","answer":["56de84c0"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.13"},{"title":" What Does This Loop Print","video":"videos/module9/10 - What","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.14"},{"title":" Hand Tracing","video":"videos/module9/11 - Hand Tracing.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.15"},{"title":" Understanding the Loop","video":"videos/module9/14 - Understanding the Loop.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.16"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-3.png' alt='no-image'/><input style='position:absolute; top: 24%; left: 7%;' type='checkbox' class='Checkboxinput' value='a'><input style='position:absolute; top: 27.5%; left: 7%;' type='checkbox' class='Checkboxinput' value='b'><input style='position:absolute; top: 31.5%; left: 7%;' type='checkbox' class='Checkboxinput' value='c'><input style='position:absolute; top: 43%; left: 7%;' type='checkbox' class='Checkboxinput' value='d'><input style='position:absolute; top: 48%; left: 7%;' type='checkbox' class='Checkboxinput' value='e'><input style='position:absolute; top: 55%; left: 6%;' type='checkbox' class='Checkboxinput' value='f'>","answer":["07","01"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.17"},{"title":" Understanding the Loop","video":"videos/module9/15 - Understanding","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.18"},{"title":" Sum Every Other Digit","video":"videos/module9/16 - Sum Every Other Digit.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.19"},{"title":"Sum Every Other Digit","question":"// Bluej project: lesson6/credit_card1\r\n// Video: Sum Every Other Digit\r\n\r\n// TODO: Implement the sumCertainDigits method.\r\nclass CreditCard\r\n{\r\n    private long cardNumber;\r\n\r\n    public CreditCard(long cardNumber)\r\n    {\r\n        this.cardNumber = cardNumber;\r\n    }\r\n\r\n    /**\r\n     * Calculates the sum of ever other digit in cardNumber \r\n     * starting from the rightmost digit.\r\n     * @return the sum of every other digit starting from the rightmost.\r\n     */\r\n    public int sumCertainDigits()\r\n    {\r\n        // So that we don't accidentally change the credit card number,\r\n        // make a copy called n. \r\n        long n = cardNumber;\r\n        \r\n        // TODO this is the code from the a previous video. You can use it\r\n        // as a starting point, but you will need to change a lot.\r\n        // Change this method so that it will calculate the sum of every\r\n        // second digit instead of all the digits, and then return this \r\n        // special sum. \r\n        // for example, if n is 12345, this method should return the sum \r\n        // 5 + 3 + 1\r\n        // There are links to videos with hints above the submit button. \r\n        // Use them if you want more inspiration.\r\n        int sum = 0;\r\n        \r\n        while (n > 0)\r\n        {\r\n            int digit = (int)(n % 10); \r\n            sum = sum + digit;\r\n            n = n/10;\r\n        }\r\n\r\n        System.out.println(sum);\r\n    }\r\n}\r\n","testcases":"public class CreditCardTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        CreditCard card = new CreditCard(12345);\r\n        System.out.println(\"Actual: \" + card.sumCertainDigits());\r\n        System.out.println(\"Expected: 9\");\r\n\r\n        CreditCard anotherCard = new CreditCard(135792);\r\n        System.out.println(\"Actual: \" + anotherCard.sumCertainDigits());\r\n        System.out.println(\"Expected: 12\");\r\n    }\r\n}\r\n","classname":"CreditCardTester","programtype":"api","type":"program","qid":"12.20"},{"title":" Sum Every Other Digit","video":"videos/module9/17 - Sum","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.21"},{"title":" Credit Card Checksum","video":"videos/module9/12 - Credit Card Checksum.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.22"},{"title":"Quiz","question":"// Bluej project: lesson6/credit_card\r\n// Video: Credit Card Checksum \r\n\r\n// TODO: Implement the isValid method.\r\npublic class CreditCard\r\n{\r\n    private long cardNumber;\r\n\r\n    public CreditCard(long cardNumber)\r\n    {\r\n        this.cardNumber = cardNumber;\r\n    }\r\n\r\n    /**\r\n     * Calculates whether this CreditCard has a valid number.\r\n     * @return true if the number is valid, false if it's not.\r\n     */\r\n    public boolean isValid()\r\n    {\r\n        /* Pseudocode for isValid:\r\n         * sum = 0\r\n         * count = 0\r\n         * for each digit starting from the right\r\n         *     count ++\r\n         *     if count is odd\r\n         *         sum = sum + digit\r\n         *     else if (digit < 5)\r\n         *         sum = sum + 2 * digit\r\n         *     else\r\n         *         sum = sum + 2 * digit - 9\r\n         * if the last digit of the sum is zero\r\n         *     The card number is valid\r\n         */\r\n        long n = cardNumber;\r\n        int sum = 0;\r\n\r\n        // TODO this is the code from the last question. you can use it\r\n        // as a starting point, but you will need to change most of it.\r\n        while (n > 0)\r\n        {\r\n            int digit = (int)(n % 10); // \r\n            sum = sum + digit;\r\n            n = n/10;\r\n        }\r\n   \r\n        return false;\r\n    }\r\n}\r\n","classname":"CreditCard","expectedoutput":"","programtype":"stdin","type":"program","qid":"12.23"},{"title":" Credit Card Checksum","video":"videos/module9/13 - Credit","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.24"},{"title":" How To Deal With Loop Errors","video":"videos/module9/23 - How To Deal With Loop Errors.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.25"},{"title":" Infinite Loops","video":"videos/module9/24 - Infinite Loops.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.26"},{"title":"Quiz","question":"// BlueJ project: lesson6/infinite\r\n// Video: Infinite\r\n\r\n// TODO: Fix the error so that the loop stops\r\n// when the balance has reached the target\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class Interest\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner in = new Scanner(System.in);\r\n        System.out.print(\"Target: \");\r\n        double balance = 100;\r\n        double target = in.nextDouble();\r\n        double rate = 0.01;\r\n        int year = 0;\r\n        while (balance != target)\r\n        {\r\n            double interest = balance * rate;\r\n            balance = balance + interest;\r\n            year++;\r\n            System.out.printf(\"Year %d: %8.2f\\n\",\r\n                              year, balance);\r\n        }\r\n    }\r\n}\r\n","classname":"Interest","expectedoutput":"","programtype":"stdin","type":"program","qid":"12.27"},{"title":" Infinite Loops","video":"videos/module9/25 - Infinite","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.28"},{"title":" While We Still Want To Drive","video":"videos/module9/26 - While We Still Want To Drive.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.29"},{"title":" Trace The Buggy Code","video":"videos/module9/27 - Trace The Buggy Code.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.30"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-4.png' alt='no-image'/><input id=\"quizinput1\" style=\"position:absolute; top:20%; left:54%; width:8%\" type=\"text\"></input><input id=\"quizinput2\" style=\"position:absolute; top:26%; left:54%; width:8%\" type=\"text\"></input><input id=\"quizinput3\" style=\"position:absolute; top:32%; left:54%; width:8%\" type=\"text\"></input><input id=\"quizinput4\" style=\"position:absolute; top:38%; left:54%; width:8%\" type=\"text\"></input><input id=\"quizinput5\" style=\"position:absolute; top:20%; left:66%; width:10%\" type=\"text\"></input><input id=\"quizinput6\" style=\"position:absolute; top:26%; left:66%; width:10%\" type=\"text\"></input><input id=\"quizinput7\" style=\"position:absolute; top:32%; left:66%; width:10%\" type=\"text\"></input><input id=\"quizinput8\" style=\"position:absolute; top:38%; left:66%; width:10%\" type=\"text\"></input><input id=\"quizinput9\" style=\"position:absolute; top:20%; left:84%; width:10%\" type=\"text\"></input><input id=\"quizinput10\" style=\"position:absolute; top:26%; left:84%; width:10%\" type=\"text\"></input><input id=\"quizinput11\" style=\"position:absolute; top:32%; left:84%; width:10%\" type=\"text\"></input><input id=\"quizinput12\" style=\"position:absolute; top:38%; left:84%; width:10%\" type=\"text\"></input>","answer":["54","","","","","","","","55de84","","",""],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.31"},{"title":" Trace The Buggy Code","video":"videos/module9/28 - Trace","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.32"},{"title":" Fix The Pseudocode","video":"videos/module9/29 - Fix The Pseudocode.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.33"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-5.jpg' alt='no-image'/><input id=\"quizinput1\" style=\"position:absolute; top:58%; left:20%; width:28%; height:7%\" type=\"text\"></input><input id=\"quizinput2\" style=\"position:absolute; top:30%; left:64%; width:26%; height:12%\" type=\"text\"></input><input id=\"quizinput3\" style=\"position:absolute; top:55%; left:63%; width:28%; height:7%\" type=\"text\"></input>","answer":["108bd980612f25306119","57","56"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.34"},{"title":" Fix The Pseudocode","video":"videos/module9/30 - Fix","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.35"},{"title":" Fix the Error","video":"videos/module9/31 - Fix the Error.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.36"},{"title":"Quiz","question":"// Bluej project: lesson6/fix_the_error\r\n// Video: Fix the Error \r\n\r\n// There is an error in this code.\r\n// Careful! if you run it in the Udacity IDE you will not get good debugging information\r\n// Try hand tracing or running in BlueJ instead.\r\n\r\n// TODO: fix this code so that it prints the year and balance every year for\r\n// 10 years.\r\npublic class FixTheError\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n       int year = 1;\r\n       double balance = 100;\r\n       double rate = .01;\r\n       while (year <= 10)\r\n       {\r\n           double interest = balance * rate;\r\n           balance = balance + interest;\r\n           System.out.printf(\"Year %d: %8.2f\\n\", year, balance);\r\n       }\r\n    }\r\n}\r\n","classname":"FixTheError","expectedoutput":"","programtype":"stdin","type":"program","qid":"12.37"},{"title":" Fix the Error","video":"videos/module9/32 - Fix","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.38"},{"title":" The For Loop","video":"videos/module9/33 - The For Loop.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.39"},{"title":" Breaking Down the For Loop","video":"videos/module9/34 - Breaking Down the For Loop.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.40"},{"title":" A More Complicated To Do List","video":"videos/module9/35 - A More Complicated To Do List.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.41"},{"title":"Quiz","question":"// Bluej project: lesson6/elizas_todo_list\r\n// Video: A More Complicated To Do List\r\n\r\n// Actually, Elizas todo list should look like this:\r\n// 1. Eat\r\n// 2. Sleep\r\n// 3. Eat\r\n// 4. Sleep\r\n// 5. Eat\r\n// 6. Sleep\r\n// TODO: Change the code inside the for loop to print out this todo list\r\npublic class TodoList\r\n{\r\n   public static void main(String[] args)\r\n   {\r\n       for (int counter = 1; counter <= 6; counter++)\r\n       {\r\n           System.out.println(counter + \". Sleep\");\r\n       }\r\n   }\r\n}\r\n","classname":"TodoList","expectedoutput":"","programtype":"stdin","type":"program","qid":"12.42"},{"title":" A More Complicated To Do List","video":"videos/module9/36 - A","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.43"},{"title":" For or While","video":"videos/module9/37 - For or While.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.44"},{"title":" Counting Down","video":"videos/module9/38 - Counting Down.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.45"},{"title":"Quiz","question":"// Bluej project: counting_down\r\n// Video: Counting Down \r\n\r\n// TODO:Make the loop count down the days left until vacation.\r\npublic class CountingDown\r\n{\r\n   public static void main(String[] args)\r\n   {\r\n       // TODO: Make this loop count down instead of up.\r\n       // It should print\r\n       //   20 days left\r\n       //   19 days left\r\n       //   18 days left\r\n       // and so on, down to 0 days left.\r\n       for (int i = 0; i <= 10; i++)\r\n       {\r\n           System.out.println(i);\r\n       }\r\n   }\r\n}\r\n","classname":"CountingDown","expectedoutput":"","programtype":"stdin","type":"program","qid":"12.46"},{"title":" Counting Down","video":"videos/module9/39 - Counting","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.47"},{"title":" String Traversal","video":"videos/module9/40 - String Traversal.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.48"},{"title":" Only Consonants","video":"videos/module9/41 - Only Consonants.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.49"},{"title":"Quiz","question":"// Bluej project: twitter\r\n//  TODO: Write code for the shorten(String longPost) method.\r\npublic class Twitterizer\r\n{\r\n    /**\r\n     * Shortens and returns long posts by removing vowels\r\n     * @param longPost the post whos vowels need to be removed\r\n     * @return a version of the post without vowels\r\n     */\r\n    public String shorten(String longPost)\r\n    {\r\n        // YOUR CODE HERE\r\n    }\r\n}\r\n","classname":"Twitterizer","expectedoutput":"","programtype":"stdin","type":"program","qid":"12.50"},{"title":" Only Consonants","video":"videos/module9/42 - Only","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.51"},{"title":" Twitter Posts Backwards","video":"videos/module9/43 - Twitter Posts Backwards.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.52"},{"title":"Quiz","question":"// Bluej project: lesson6/twitter_backwards\r\n// TODO: Implement the reverse(String post) method.\r\npublic class Twitterizer\r\n{\r\n    /**\r\n     * Shortens and prints longPost by removing vowels.\r\n     * @param longPost the post whose vowels need to be removed.\r\n     */\r\n    public String shorten(String longPost)\r\n    {\r\n        String shortPost = \"\";\r\n        for (int i = 0; i < longPost.length(); i++)\r\n        {\r\n            if (!\"aeiouAEIOU\".contains(longPost.substring(i, i+1)))\r\n            {\r\n                shortPost = shortPost + longPost.substring(i, i+1);\r\n            }\r\n        }\r\n        return shortPost;\r\n    }\r\n\r\n    /**\r\n     * Prints a post backwards to hide its contents.\r\n     * @param post the post to be reversed.\r\n     */\r\n    public String reverse(String post)\r\n    {\r\n\r\n    }\r\n}\r\n","classname":"Twitterizer","expectedoutput":"","programtype":"stdin","type":"program","qid":"12.53"},{"title":" Twitter Posts Backwards","video":"videos/module9/44 - Twitter","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.54"},{"title":" We Have Intercepted A Secret Message","video":"videos/module9/45 - We Have Intercepted A Secret Message.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.55"},{"title":"Quiz","question":"// Bluej project: secret_messages\r\n//\r\n// TODO: implement the decode method.\r\n//\r\npublic class Decoder\r\n{\r\n    private String encodedMessage;\r\n\r\n    public Decoder(String encodedMessage)\r\n    {\r\n        this.encodedMessage = encodedMessage;\r\n    }\r\n\r\n    /**\r\n     * Reads every 10th letter of encodedMessage and returns a string\r\n     * with the letters it reads.\r\n     * @return\r\n     */\r\n    public String decode()\r\n    {\r\n        String decodedMessage = \"\";\r\n        // YOUR CODE HERE\r\n        return decodedMessage;\r\n    }\r\n\r\n    /**\r\n     * Optional:\r\n     * Decodes the same way as String decode() but takes an index to start at.\r\n     * There may be more than one secret message in the\r\n     */\r\n    public String decode(int startingIndex)\r\n    {\r\n        String decodedMessage = \"\";\r\n        // YOUR CODE HERE\r\n        return decodedMessage;\r\n    }\r\n}\r\n","classname":"Decoder","expectedoutput":"","programtype":"stdin","type":"program","qid":"12.56"},{"title":" We Have Intercepted A Secret Message","video":"videos/module9/46 - We","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.57"},{"title":" Picture Traversal","video":"videos/module9/47 - Picture Traversal.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.58"},{"title":" Dim The Picture","video":"videos/module9/48 - Dim The Picture.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.59"},{"title":"Quiz - Dim The Picture","question":"// Bluej project: lesson6/dim\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\npublic class dim\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Picture mary = new Picture(\"resources\\\\courseware\\\\program_images\\\\queen-mary.png\");\r\n        mary.draw();\r\n        // TODO iterate over the pixels in the image turning every 5th one to Color.BLACK\r\n        // your code here.\r\n        Picture picture = new Picture();\r\n        picture.snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\n","testcases":"class CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\dim.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"dim","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"12.60"},{"title":" Dim The Picture","video":"videos/module9/49 - Dim","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.61"},{"title":" What Does This Code Do to the Queen Mary","video":"videos/module9/50 - What Does This Code Do to the Queen Mary.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.62"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-6.jpg'><input style='position:absolute; top:42.5%; left:9.5%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:61%; left:9.5%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:42.5%; left:58%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:56.5%; left:58%;' name='option' value='d' id=\"quizinput4\" type=\"radio\"></input>","answer":["06"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.63"},{"title":" What Does This Code Do to the Queen Mary","video":"videos/module9/51 - What","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.64"},{"title":" Counting Iterations","video":"videos/module9/52 - Counting Iterations.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.65"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-7.jpg' alt='no-image'/><input id=\"quizinput1\" style=\"position:absolute; top:55%; left:87%; width:8%\" type=\"text\"></input>","answer":["55df"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.66"},{"title":" Counting Iterations","video":"videos/module9/53 - Counting","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.67"},{"title":" Asymmetric Bounds","video":"videos/module9/54 - Asymmetric Bounds.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.68"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-8.png' alt='no-image'/><input id=\"quizinput1\" style=\"position:absolute; top:60%; left:57%; width:10%\" type=\"text\"></input>","answer":["55df"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.69"},{"title":" Asymmetric Bounds","video":"videos/module9/55 - Asymmetric","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.70"},{"title":" How Many Numbers Does This Loop Print","video":"videos/module9/56 - How Many Numbers Does This Loop Print.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.71"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-9.jpg' alt='no-image'/><input id=\"quizinput1\" style=\"position:absolute; top:48%; left:20%; width:55%\" type=\"text\"></input><input id=\"quizinput2\" style=\"position:absolute; top:57%; left:68%\" type=\"text\"></input>","answer":["55de94c961293827701fa458b2b75cc8f31dc4e590b7","55df"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.72"},{"title":" How Many Numbers Does This Loop Print","video":"videos/module9/57 - How","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.73"},{"title":" Asymmetric Bounds","video":"videos/module9/58 - Asymmetric Bounds.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.74"},{"title":" How Many Times Is the Condition Evaluated","video":"videos/module9/59 - How Many Times Is the Condition Evaluated.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.75"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-10.jpg' alt='no-image'/><input id=\"quizinput1\" style=\"position:absolute; top:52%; left:57%; width:20%\" type=\"text\"></input>","answer":["50"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.76"},{"title":" How Many Times Is the Condition Evaluated","video":"videos/module9/60 - How","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.77"},{"title":" What Does this Loop Do with Word","video":"videos/module9/61 - What Does this Loop Do with Word.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.78"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-11.jpg'><input style='position:absolute; top:50%; left:8%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:58%; left:8%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:63%; left:8%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:68%; left:8%;' name='option' value='d' id=\"quizinput4\" type=\"radio\"></input>","answer":["05"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.79"},{"title":" What Does this Loop Do with Word","video":"videos/module9/62 - What","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.80"},{"title":" Input Validation","video":"videos/module9/01 - Input Validation.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.81"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-12.jpg'><input style='position:absolute; top:20%; left:67%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:36%; left:66%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:49%; left:67%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:60%; left:66.5%;' name='option' value='d' id=\"quizinput4\" type=\"radio\"></input>","answer":["07"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.82"},{"title":" Input Validation","video":"videos/module9/2 - Input","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.83"},{"title":" The Do Loop","video":"videos/module9/03 - The Do Loop.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.84"},{"title":" Accept Values Between 0 and 100","video":"videos/module9/04 - Accept Values Between 0 and 100.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.85"},{"title":"Quiz","question":"// BlueJ project: lesson6/inputvalidation\r\n// Video: Accept Values Between 0 and 100\r\n// TODO: Change this program so that it accepts values between 0 and\r\n// 100 inclusive. Remember to change the prompt as well.\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class InputValidation\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner in = new Scanner(System.in);\r\n        int value; // A user entered value between 0 and 100 inclusive.\r\n        do\r\n        {\r\n            System.out.print(\"Enter an integer < 100: \");\r\n            value = in.nextInt();\r\n        }\r\n        while (value >= 100);\r\n\r\n        System.out.println(\"Thank you for entering \" + value);\r\n    }\r\n}\r\n","classname":"InputValidation","input":"-1\r\n101\r\n50\r\n","expectedoutput":"Enter an integer between 0 and 100 inclusive: -1\r\nEnter an integer between 0 and 100 inclusive: 101\r\nEnter an integer between 0 and 100 inclusive: 50\r\nThank you for entering 50\r\n","programtype":"stdin","type":"program","qid":"12.86"},{"title":" Accept Values Between 0 and 100","video":"videos/module9/5 - Accept","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.87"},{"title":" How to Read Multiple Values","video":"videos/module9/06 - How to Read Multiple Values.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.88"},{"title":" Processing Sentinel Values","video":"videos/module9/07 - Processing Sentinel Values.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.89"},{"title":" Average","video":"videos/module9/08 - Average.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.90"},{"title":"Quiz","question":"// Bluej project: lesson6/average\r\n// Write a program that helps a user compute their average time\r\n// for sprinting 100 meters.\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class AverageDemo\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner in = new Scanner(System.in);\r\n        int count = 0;\r\n        double sum = 0;\r\n\r\n        System.out.print(\"Enter a value, 0 to quit: \");\r\n\r\n        // TODO: Collect values from the user until they enter a 0.\r\n        // Track the sum of all the inputs so you can calculate the\r\n        // average at the end\r\n\r\n        double average = sum / count;\r\n        System.out.printf(\"Average: %.2f\\n\", average);\r\n    }\r\n}\r\n","classname":"AverageDemo","expectedoutput":"Enter a value, 0 to quit: 20.1\r\nEnter a value, 0 to quit: 18.9\r\nEnter a value, 0 to quit: 19.3\r\nEnter a value, 0 to quit: 0\r\n","input":"20.1\r\n18.9\r\n19.3\r\n0\r\n","programtype":"stdin","type":"program","qid":"12.91"},{"title":" Average","video":"videos/module9/9 - Average.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.92"},{"title":" Average with Q as Sentinel","video":"videos/module9/10 - Average with Q as Sentinel.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.93"},{"title":"Quiz","question":"// Bluej project: lesson6/average_q\r\n// TODO: Update your method average() so that it can accept\r\n// altitudes (which can be positive, negative or zero).\r\n// Use Q as a sentinel value instead of 0.\r\n// Use the scanner method hasNextDouble to control your loop.\r\n// Remember to change the prompt.\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class Average\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner in = new Scanner(System.in);\r\n        double value;\r\n        int count = 0;\r\n        double sum = 0;\r\n        boolean done = false;\r\n\r\n        while (!done)\r\n        {\r\n            System.out.print(\"Enter a value, 0 to quit: \");\r\n            value = in.nextDouble();\r\n            if (value != 0)\r\n            {\r\n                sum = sum + value;\r\n                count++;\r\n            }\r\n            else\r\n            {\r\n                done = true;\r\n\r\n            }\r\n        }\r\n        double average = sum / count;\r\n        System.out.printf(\"Average: %.2f\\n\", average);\r\n    }\r\n}","classname":"Average","expectedoutput":"Enter a value, Q to quit: 3\r\nEnter a value, Q to quit: 4\r\nEnter a value, Q to quit: 0\r\nEnter a value, Q to quit: q\r\nAverage: 2.33\r\n","input":"3\r\n4\r\n0\r\nq\r\n","programtype":"stdin","type":"program","qid":"12.94"},{"title":" Average with Q as Sentinel","video":"videos/module9/11 - Average","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.95"},{"title":" Average of No Inputs","video":"videos/module9/12 - Average of No Inputs.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.96"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-13.jpg'><input style='position:absolute; top:42%; left:34%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:48%; left:34%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:58.5%; left:33.5%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:65%; left:34%;' name='option' value='d' id=\"quizinput4\" type=\"radio\"></input>","answer":["07"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.97"},{"title":" Average of No Inputs","video":"videos/module9/13 - Average","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.98"},{"title":" NaN","video":"videos/module9/14 - NaN.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.99"},{"title":"Quiz","question":"// Bluej project: lesson6/average_q\r\n// TODO: Update your method average() so that it can accept\r\n// altitudes (which can be positive, negative or zero).\r\n// Use Q as a sentinel value instead of 0.\r\n// Use the scanner method hasNextDouble to control your loop.\r\n// Remember to change the prompt.\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class Average\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner in = new Scanner(System.in);\r\n        double value;\r\n        int count = 0;\r\n        double sum = 0;\r\n        boolean done = false;\r\n\r\n        while (!done)\r\n        {\r\n            System.out.print(\"Enter a value, 0 to quit: \");\r\n            value = in.nextDouble();\r\n            if (value != 0)\r\n            {\r\n                sum = sum + value;\r\n                count++;\r\n            }\r\n            else\r\n            {\r\n                done = true;\r\n\r\n            }\r\n        }\r\n        double average = sum / count;\r\n        System.out.printf(\"Average: %.2f\\n\", average);\r\n    }\r\n}","classname":"Average","expectedoutput":"Enter a value: 3\r\nEnter a value, Q to quit: 4\r\nEnter a value, Q to quit: 0\r\nEnter a value, Q to quit: q\r\nAverage: 2.33\r\n","input":"3\r\n4\r\n0\r\nq\r\n","programtype":"stdin","type":"program","qid":"12.100"},{"title":" NaN","video":"videos/module9/15 - NaN.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.101"},{"title":" Find The Maximum","video":"videos/module9/16 - Find The Maximum.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.102"},{"title":"Quiz","question":"// BlueJ project: lesson6/largest1\r\n// Read in the values that the user supplies, stopping\r\n// when the user enters Q (or any other input that is\r\n// not a number). Print out the largest value that\r\n// the user entered.\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class Largest\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner in = new Scanner(System.in);\r\n        System.out.println(\"Enter values, Q to quit: \");\r\n        double largest = in.nextDouble();\r\n        while (...) //supply condition here\r\n        {\r\n            double input = ...;\r\n            if (...) // and here\r\n            {\r\n                ...;\r\n            }\r\n        }\r\n        System.out.println(\"Largest value: \" + largest);\r\n    }\r\n}\r\n","classname":"Largest","expectedoutput":"Enter values, Q to quit: \r\n18.3\r\n20.7\r\n23.5\r\n28.3\r\n33.2\r\n38.8\r\n40.1\r\n39.1\r\n36.3\r\n30.2\r\n22.9\r\n18.3\r\nQ\r\nLargest value:40.1\r\n","input":"18.3\r\n20.7\r\n23.5\r\n28.3\r\n33.2\r\n38.8\r\n40.1\r\n39.1\r\n36.3\r\n30.2\r\n22.9\r\n18.3\r\nQ\r\n","programtype":"stdin","type":"program","qid":"12.103"},{"title":" Find The Maximum","video":"videos/module9/17 - Find","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"12.104"}]},"13":{"title":"Problem Set 4","lessons":[{"title":"Question #1 - Gas Checker","question":"/**\n * Complete the method below to simulate a warning light in a\n * car that is usually green but that turns red if the gas in the tank is\n * less than one gallon\n */\nclass GasChecker\n{\n   /**\n    * Determines if the fuel in the tank is low.\n    * @param gasInTank the amount of fuel in the car's gas tank\n    * @return \"red\" if the amount of gas in the tank is less than 1. Otherwise \"green\"\n    */\n    public String testGas(double gasInTank)\n    {\n\n    }\n}\n\n","testcases":"public class GasCheckerTester{\r\n\tpublic static void main(String args[]){\r\n\t\tGasChecker obj=new GasChecker();\r\n\t\tSystem.out.println(\"Arguments\\tActual\\tExpected\");\r\n\t\tSystem.out.println(\"---------------------------------------------\");\r\n\t\tString testcases[]={\"1.1\",\"green\",\"5\",\"green\",\"0\",\"red\",\"0.9\",\"red\"};\r\n\t\tfor(int i=0;i<testcases.length-1;i+=2){\r\n\t\t\tString clr=obj.testGas(Double.parseDouble(testcases[i]));\r\n\t\t\tString teststatus=\"\";\r\n\t\t\tif(clr.equals(testcases[i+1])){\r\n\t\t\t\tteststatus=\"pass\";\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tteststatus=\"fail\";\r\n\t\t\t}\r\n\t\t\tSystem.out.println(testcases[i]+\"\\t\"+clr+\"\\t\"+testcases[i+1]+\"\\t\"+teststatus);\r\n\t\t}\r\n\t}\r\n}","classname":"GasCheckerTester","programtype":"api","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"13.1"},{"title":"Short Question #2 - What Does This Print","question":"<img src='images/Problem Set 4/4.2.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["49df"],"type":"quiz","tips":"","qid":"13.2"},{"title":"Short Question #3 - What Does This Print 2","question":"<img src='images/Problem Set 4/4.3.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0b81c483"],"type":"quiz","tips":"","qid":"13.3"},{"title":"Short Question #4 - What Does This Print 3","question":"<img src='images/Problem Set 4/4.4.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["20"],"type":"quiz","tips":"","qid":"13.4"},{"title":"Short Question #5 - What Does This Print 4","question":"<img src='images/Problem Set 4/4.5.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["52de"],"type":"quiz","tips":"","qid":"13.5"},{"title":"Short Question #6 - What Does This Print 5","question":"<img src='images/Problem Set 4/4.6.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0a81c0d024606d713c"],"type":"quiz","tips":"","qid":"13.6"},{"title":"Short Question #7 - Grade Book","question":"/**\n * Complete the method below so that it returns the correct letter grade\n * for the number grade and return the letter grade as a string\n */\nclass GradeBook\n{\n    /*\n     * Gets the letter grade associated with this numeric grade\n     * @param grade the numeric grade\n     * @return the corresponding letter grade\n     */\n    public String getLetterGrade(int grade)\n    {\n        //your code goes here\n    }\n}\n\n","testcases":"public class GradeBookTester{\r\n\tpublic static void main(String args[]){\r\n\t\tGradeBook obj=new GradeBook();\r\n\t\tSystem.out.println(\"Arguments\\tActual\\tExpected\");\r\n\t\tSystem.out.println(\"---------------------------------------------\");\r\n\t\tString testcases[]={\"90\",\"A\",\"80\",\"B\",\"70\",\"C\",\"60\",\"D\",\"50\",\"F\",\"81\",\"B\",\"79\",\"C\"};\r\n\t\tfor(int i=0;i<testcases.length-1;i+=2){\r\n\t\t\tString grade=obj.getLetterGrade(Integer.parseInt(testcases[i]));\r\n\t\t\tString teststatus=\"\";\r\n\t\t\tif(grade.equals(testcases[i+1])){\r\n\t\t\t\tteststatus=\"pass\";\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tteststatus=\"fail\";\r\n\t\t\t}\r\n\t\t\tSystem.out.println(testcases[i]+\"\\t\\t\"+grade+\"\\t\\t\"+testcases[i+1]+\"\\t\"+teststatus);\r\n\t\t}\r\n\t}\r\n}","classname":"GradeBookTester","programtype":"api","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"13.7"},{"title":"Short Question #8 Complete This If Statement","question":"<img src='images/Problem Set 4/4.8.jpg' alt='image'><br><h4>if( &nbsp;<input class='input-lg' id=\"quizinput1\" type=\"text\"></input>&nbsp; )</h4>","answer":["0a8fd9957c2c76653c45"],"type":"quiz","tips":"","qid":"13.8"},{"title":"Short Question #9 - Lexicographic Order 1","question":"<img src='images/Problem Set 4/4.9.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["55dc87"],"type":"quiz","tips":"","qid":"13.9"},{"title":"Short Question #10 - Lexicographic Order 2","question":"<img src='images/Problem Set 4/4.10.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["088bc7832e7f2a"],"type":"quiz","tips":"","qid":"13.10"},{"title":"Short Question #11 - Range","question":"/**\n * Complete the method to return true if the parameter is between 0 and 100,\n * inclusive of both 0 and 100\n */\nclass Range\n{\n    /**\n     * Determine if the parameter is greater than or equal to 0 and less than or equal to 100\n     * @param value the value to test\n     * @return true if value is greater than or equal to 0 and less than or equal to 100\n     * Otherwise return false\n     */\n    public boolean inRange(int value)\n    {\n\n    }\n}\n\n","testcases":"public class RangeTester{\r\n\tpublic static void main(String args[]){\r\n\t\tRange obj=new Range();\r\n\t\tSystem.out.println(\"Arguments\\tActual\\tExpected\");\r\n\t\tSystem.out.println(\"---------------------------------------------\");\r\n\t\tString testcases[]={\"0\",\"true\",\"100\",\"true\",\"55\",\"true\",\"-1\",\"false\",\"102\",\"false\",\"999\",\"false\"};\r\n\t\tfor(int i=0;i<testcases.length-1;i+=2){\r\n\t\t\tboolean val=obj.inRange(Integer.parseInt(testcases[i]));\r\n\t\t\tString teststatus=\"\";\r\n\t\t\tif(val==Boolean.parseBoolean(testcases[i+1])){\r\n\t\t\t\tteststatus=\"pass\";\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tteststatus=\"fail\";\r\n\t\t\t}\r\n\t\t\tSystem.out.println(testcases[i]+\"\\t\\t\"+val+\"\\t\\t\"+testcases[i+1]+\"\\t\"+teststatus);\r\n\t\t}\r\n\t}\r\n}","classname":"RangeTester","programtype":"api","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"13.11"},{"title":"Short Question #12 - Comparer","question":"/**\n * Complete the method to return true if the parameter comes after \"Udacity\" in\n * lexicographic order\n */\nclass Comparer\n{\n    /**\n     * Determine if the string comes after \"Udacity\" in lexicographic order\n     * @param string1 the first string\n     * @return true if string1 comes after \"Udacity' in lexicographic order.\n     * Otherwise return false\n     */\n    public boolean comesAfter(String string1)\n    {\n\n    }\n}\n\n","testcases":"public class ComparerTester{\r\n\tpublic static void main(String args[]){\r\n\t\tComparer obj=new Comparer();\r\n\t\tSystem.out.println(\"Arguments\\tActual\\tExpected\");\r\n\t\tSystem.out.println(\"---------------------------------------------\");\r\n\t\tString testcases[]={\"Zoo\",\"true\",\"Apple\",\"false\",\"University\",\"true\",\"Udacity\",\"false\",\"apple\",\"true\"};\r\n\t\tfor(int i=0;i<testcases.length-1;i+=2){\r\n\t\t\tboolean val=obj.comesAfter(testcases[i]);\r\n\t\t\tString teststatus=\"\";\r\n\t\t\tif(val==Boolean.parseBoolean(testcases[i+1])){\r\n\t\t\t\tteststatus=\"pass\";\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tteststatus=\"fail\";\r\n\t\t\t}\r\n\t\t\tSystem.out.println(testcases[i]+\"\\t\\t\"+val+\"\\t\\t\"+testcases[i+1]+\"\\t\"+teststatus);\r\n\t\t}\r\n\t}\r\n}","classname":"ComparerTester","programtype":"api","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"13.12"},{"title":"Short Question #13 - String Equals","question":"/**\n * Complete this method to determine if the string parameter instructor is the same as\n * your Udacity instructor, Cay Horstmann\n */\n\nclass StringEquals\n{\n    private String firstName = \"Cay\";\n    private String lastName = \"Horstmann\";\n\n    /**\n     * Determines if the instructor given is the instructor in this course, Cay Horstmann\n     * @param instructor the name to check\n     * @return true if the instructor is Cay Horstmann. False otherwise\n     */\n    public boolean isMyInstructor(String instructor)\n    {\n        //fullName contains Cay Horstmann\n        String fullName = firstName + \"\" + lastName;\n        // your code goes here\n    }\n}\n\n","testcases":"public class StringEqualsTester{\r\n\tpublic static void main(String args[]){\r\n\t\tStringEquals obj=new StringEquals();\r\n\t\tSystem.out.println(\"Arguments\\tActual\\tExpected\");\r\n\t\tSystem.out.println(\"---------------------------------------------\");\r\n\t\tString testcases[]={\"Cay Huffmann\",\"false\",\"Barack obama\",\"false\",\"Cay Horstmann\",\"true\"};\r\n\t\tfor(int i=0;i<testcases.length-1;i+=2){\r\n\t\t\tboolean val=obj.isMyInstructor(testcases[i]);\r\n\t\t\tString teststatus=\"\";\r\n\t\t\tif(val==Boolean.parseBoolean(testcases[i+1])){\r\n\t\t\t\tteststatus=\"pass\";\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tteststatus=\"fail\";\r\n\t\t\t}\r\n\t\t\tSystem.out.println(testcases[i]+\"\\t\"+val+\"\\t\"+testcases[i+1]+\"\\t\"+teststatus);\r\n\t\t}\r\n\t}\r\n}","classname":"StringEqualsTester","programtype":"api","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"13.13"},{"title":"Short Question #15 -Month","question":"/**\n * Complete the method to determine if the parameter month is one of the summer\n * months, \"June\", \"July\", \"August\". Use a compound \"if\" statement.\n */\nclass Month\n{\n    /**\n     * determine if the parameter is one of the summer\n     * months, \"June\", \"July\", \"August\"\n     * @param month the month to test\n     * @return true if month is \"June\", \"July\" or \"August\"\n     */\n    public boolean isSummer(String month)\n    {\n\n    }\n}\n\n","testcases":"public class MonthTester{\r\n\tpublic static void main(String args[]){\r\n\t\tMonth obj=new Month();\r\n\t\tSystem.out.println(\"Arguments\\tActual\\tExpected\");\r\n\t\tSystem.out.println(\"---------------------------------------------\");\r\n\t\tString testcases[]={\"June\",\"true\",\"July\",\"true\",\"August\",\"true\",\"May\",\"false\"};\r\n\t\tfor(int i=0;i<testcases.length-1;i+=2){\r\n\t\t\tboolean val=obj.isSummer(testcases[i]);\r\n\t\t\tString teststatus=\"\";\r\n\t\t\tif(val==Boolean.parseBoolean(testcases[i+1])){\r\n\t\t\t\tteststatus=\"pass\";\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tteststatus=\"fail\";\r\n\t\t\t}\r\n\t\t\tSystem.out.println(testcases[i]+\"\\t\"+val+\"\\t\"+testcases[i+1]+\"\\t\"+teststatus);\r\n\t\t}\r\n\t}\r\n}","classname":"MonthTester","programtype":"api","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"13.14"},{"title":"Short Question #16 - What Does This Print 6","question":"<img src='images/Problem Set 4/4.16.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["56ce80d079312926701ab64da4b75ccae117"],"type":"quiz","tips":"","qid":"13.15"},{"title":"Short Question #17 - What Does This Print 7","question":"<img src='images/Problem Set 4/4.17.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["349cdd9e357876777018a419fda34dcbe9"],"type":"quiz","tips":"","qid":"13.16"},{"title":"Short Question #18 - Largest Power Of 2","question":"/**\n * Complete the method to find the largest power of 2 less than the given number\n * Use a loop\n */\nclass MathUtil\n{\n    public int largestPowerOf2(int n)\n    {\n        //TODO: implement this method.\n    }\n}\n\n","testcases":"public class MathUtilTester{\r\n\tpublic static void main(String args[]){\r\n\t\tMathUtil obj=new MathUtil();\r\n\t\tSystem.out.println(\"Arguments\\tActual\\tExpected\");\r\n\t\tSystem.out.println(\"---------------------------------------------\");\r\n\t\tint testcases[]={9,8,100,64,1000,512,64,32};\r\n\t\tfor(int i=0;i<testcases.length-1;i+=2){\r\n\t\t\tint val=obj.largestPowerOf2(testcases[i]);\r\n\t\t\tString teststatus=\"\";\r\n\t\t\tif(val==testcases[i+1]){\r\n\t\t\t\tteststatus=\"pass\";\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tteststatus=\"fail\";\r\n\t\t\t}\r\n\t\t\tSystem.out.println(testcases[i]+\"\\t\\t\"+val+\"\\t\\t\"+testcases[i+1]+\"\\t\"+teststatus);\r\n\t\t}\r\n\t}\r\n}","classname":"MathUtilTester","programtype":"api","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"13.17"},{"title":"Short Question #19 - Sum","question":"/**\n * Complete the method to find sum of all the positive even numbers less than or equal to the given number\n * use a loop\n */\nclass Sum\n{\n    /**\n     * Gets the sum of all the even numbers less than or equal to the given number\n     * @param n the given number, the ceiling\n     * @return the sum of all the even numbers less that the ceiling\n     */\n    public int sum(int n)\n    {\n        //TODO: implement this method.\n    }\n}\n\n","testcases":"public class SumTester{\r\n\tpublic static void main(String args[]){\r\n\t\tSum obj=new Sum();\r\n\t\tSystem.out.println(\"Arguments\\tActual\\tExpected\");\r\n\t\tSystem.out.println(\"---------------------------------------------\");\r\n\t\tint testcases[]={10,30,11,30,12,42};\r\n\t\tfor(int i=0;i<testcases.length-1;i+=2){\r\n\t\t\tint val=obj.sum(testcases[i]);\r\n\t\t\tString teststatus=\"\";\r\n\t\t\tif(val==testcases[i+1]){\r\n\t\t\t\tteststatus=\"pass\";\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tteststatus=\"fail\";\r\n\t\t\t}\r\n\t\t\tSystem.out.println(testcases[i]+\"\\t\\t\"+val+\"\\t\\t\"+testcases[i+1]+\"\\t\"+teststatus);\r\n\t\t}\r\n\t}\r\n}","classname":"SumTester","programtype":"api","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"13.18"},{"title":"Short Question #20 - Count Even","question":"/**\n * Complete the class. Using a Scanner, ask the user to enter a series of integers with \n * the following string \"Enter an integer\" and count the number of even numbers\n * Use a loop. Do not let bad input (a non-integer) terminate your program with an error.\n * When the user enters any non-integer, print the number of even integers entered and quit.\n * Hint: remember hasNextInt()\n * Hint: use the % operator to determine if a number is even\n */\nimport java.util.Scanner;\npublic class CountEvenTester\n{\n    public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        //your code goes here\n    }\n}\n\n","testcases":"3","classname":"CountEvenTester","programtype":"api","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"13.19"},{"title":"Question #1 - Month","question":"//Write a class Month.\r\n\r\n//A Month has a constructor that takes the month number as a parameter (1 for January,\r\n//2 for February and so forth):\r\n//   public Month(int monthNumber)\r\n//If monthNumber is not 1 to 12, set it to 1.  (This final case you can think of as\r\n//a kind of safeguard against someone using your Month class incorrectly: even if\r\n//someone passes a bad number to your constructor, it will still make a valid month.\r\n//You will make a separate safeguard in your MonthPrinter class to reject bad user\r\n//inputs, but making your code as resiliant as possible to incorrect usage is good\r\n//practice as a programmer!)\r\n\r\n//The Month class has 2 methods:\r\n//   public String getMonthName() Use if / else if /else if ...\r\n//   public int getNumberOfDays() Do NOT use a separate if / else branch for each month. \r\n//Use Boolean operators (&&, ||, !). You will have an if then else if then else\r\n//For February return 28\r\n\r\n//These are implemented for you as stubs\r\n\r\n//Now write a class MonthPrinter which will instantiate a Month object, ask the user\r\n//for a month number and print the name of the month and the number or days.\r\n\r\n//If the month is 6, the output should look exactly like this:\r\n//June 30\r\n\r\n//If the user enters an invalid month number print this error message: \r\n//\"Number must be 1 through 12\"\r\n//(We include this even though our Month constructor will gracefully handle improper\r\n//inputs.  Using multiple safeguards against incorrect usage is a good idea!)\r\n\r\n//If the user enters a non-integer, give this error message: \r\n//\"Not an integer. Terminating\"\r\n\r\n//To be considered correct, you must enter the message exactly as specified, so be\r\n//careful with the strings you print.\r\n\r\n// Need help starting this question? In the lesson titled \r\n// \"Starting points: Problem Set Questions\", go to the\r\n// problem titled \"Problem Set 4 - Question 1\" for some tips on \r\n// how to begin.\r\nimport java.util.Scanner;\r\nclass Month\r\n{\r\n    //instance variables\r\n\r\n    /**\r\n     * Contructs a Month\r\n     * @param the month number. Must be 1 to 12. For any other number, the month number is set to 1\r\n     */\r\n    public Month(int theMonthNumber)\r\n    {\r\n        //TODO: initialize the instance variable(s) to complete this constructor\r\n        //Remember to make the constructor resiliant to improper inputs!\r\n    }\r\n\r\n    /**\r\n     * Gets the name of this month\r\n     * @return the name of this month\r\n     */\r\n    public String getMonthName()\r\n    {\r\n        //TODO: implement this method (you will replace the return null statement below)\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of days in this month\r\n     * @return the number of days in this month in a non-leap year\r\n     */\r\n    public int getNumberOfDays()\r\n    {\r\n        //TODO: implement this method (you will replace the return 0 statement below)\r\n        return 0;\r\n    }\r\n}\r\n","testcases":"//Write a class Month.\r\n\r\n//A Month has a constructor that takes the month number as a parameter (1 for January,\r\n//2 for February and so forth):\r\n//   public Month(int monthNumber)\r\n//If monthNumber is not 1 to 12, set it to 1.  (This final case you can think of as\r\n//a kind of safeguard against someone using your Month class incorrectly: even if\r\n//someone passes a bad number to your constructor, it will still make a valid month.\r\n//You will make a separate safeguard in your MonthPrinter class to reject bad user\r\n//inputs, but making your code as resiliant as possible to incorrect usage is good\r\n//practice as a programmer!)\r\n\r\n//The Month class has 2 methods:\r\n//   public String getMonthName() Use if / else if /else if ...\r\n//   public int getNumberOfDays() Do NOT use a separate if / else branch for each month. \r\n//Use Boolean operators (&&, ||, !). You will have an if then else if then else\r\n//For February return 28\r\n\r\n//These are implemented for you as stubs\r\n\r\n//Now write a class MonthPrinter which will instantiate a Month object, ask the user\r\n//for a month number and print the name of the month and the number or days.\r\n\r\n//If the month is 6, the output should look exactly like this:\r\n//June 30\r\n\r\n//If the user enters an invalid month number print this error message: \r\n//\"Number must be 1 through 12\"\r\n//(We include this even though our Month constructor will gracefully handle improper\r\n//inputs.  Using multiple safeguards against incorrect usage is a good idea!)\r\n\r\n//If the user enters a non-integer, give this error message: \r\n//\"Not an integer. Terminating\"\r\n\r\n//To be considered correct, you must enter the message exactly as specified, so be\r\n//careful with the strings you print.\r\n\r\n/**\r\n * Exercises the methods in the Month class\r\n */\r\n\r\npublic class MonthPrinter\r\n{\r\n   public static void main(String[] args)\r\n   {\r\n       Scanner in = new Scanner(System.in);\r\n\r\n       System.out.print(\"Enter a month number (1 through 12) \" );\r\n\r\n       //your code here\r\n\r\n\r\n   }\r\n}","classname":"MonthPrinter","programtype":"api","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"13.20"},{"title":"Question #2 - Country Names","question":"//Country names in French are feminine when they end with the letter e,\n//masculine otherwise, except for the following which are masculine\n//even though they end with e:\n\n//le Belize\n//le Cambodge\n//le Mexique\n//le Mozambique\n//le Zaire\n//le Zimbabwe\n\n\n//Complete the method getCompleteName in the class CountryNames.\n//getCompleteName takes the French name of a country as a parameter\n//and adds the article: le for masculine or la for feminine,\n//such as le Canada or la Belgique. However, if the country name starts\n//with a vowel, use l'; for example, l'Afghanistan.\n//\n\n//For the following plural country names, use les:\n//les Etats-Unis\n//les Pays-Bas\n//\n\n//Here is a URL that gives English and French names for countries:\n//http://www.btb.gc.ca/btb.php?lang=eng&cont=690\n\n//Use helper methods to simplify your code and make it easier to read.\n\n// Need help starting this question? In the lesson titled \n// \"Starting points: Problem Set Questions\", go to the\n// problem titled \"Problem Set 4 - Question 2\" for some tips on \n// how to begin.\n\npublic class CountryNames\n{\n    /**\n     * Gets the name with the proper article\n     * @param name the country name\n     * @return the name prepended with the proper article\n     */\n    public String getCompleteName(String name)\n    {\n\n         //your code goes here\n    }\n\n}\n\n\n","classname":"CountryNames","expectedoutput":"","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"13.21"},{"title":"Question #3 - Max Min Printer","question":"//Write a class called MinMaxPrinter. Using a Scanner, ask the user to enter\n//a series of integers and find the maximum and the minimum value.\n//Use a loop.\n\n//Do not let bad input (a non-integer) terminate your program with an error.\n//When the user enters any non-integer, print the maximum and minimun values\n//on separate line and quit.\n\n//If the numbers entered are 5 10 3 8 1, 2 9, the output will be\n\n//10\n//1\n\n//HINT: remember hasNextInt()\n//HINT: initialize max to Integer.MIN_INTEGER rather than to 0 and min to \n// Integer.MAX_INTEGER before the loop.\n\n// Need help starting this question? In the lesson titled \n// \"Starting points: Problem Set Questions\", go to the\n// problem titled \"Problem Set 4 - Question 3\" for some tips on \n// how to begin.\n\nimport java.util.Scanner;\n\npublic class MaxMinPrinter\n{\n    public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n\n        System.out.print(\"Enter an integer: \");\n        //your code here\n    }\n}\n\n","classname":"MaxMinPrinter","expectedoutput":"","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"13.22"}]},"14":{"title":"Loops","lessons":[{"title":" Reading from File","video":"videos/module10/20 - Reading from File.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.1"},{"title":"Quiz","question":"// BlueJ project: lesson6/largest2\r\n// Read in the values from the file input.txt, stopping\r\n// at the end of the file (or if the file contains\r\n// an input that is not a number). Print out the largest\r\n// value that you read.\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\npublic class Largest2\r\n{\r\n    public static void main(String[] args)\r\n    throws FileNotFoundException\r\n    {\r\n        String filename = \"input.txt\"; // please don't change this line\r\n        // ... create a file object that uses filename as a argument \r\n        Scanner in = new Scanner(...);\r\n\r\n        double largest = ...;\r\n        while (...)\r\n        {\r\n            double input = ...;\r\n            if (input > largest)\r\n            {\r\n                largest = input;\r\n            }\r\n        }\r\n        System.out.println(\"Largest value: \" + largest);\r\n    }\r\n}\r\n","classname":"Largest2","expectedoutput":"","programtype":"stdin","type":"program","qid":"14.2"},{"title":" Reading from File","video":"videos/module10/21 - Reading","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.3"},{"title":" The Most Populous Country","video":"videos/module10/22 - The Most Populous Country.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.4"},{"title":"Quiz","question":"// Bluej project: lesson6/largest_countries\r\n\r\nimport java.util.Scanner;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\n\r\npublic class LargestCountries\r\n{\r\n    public static void main(String[] args) throws FileNotFoundException\r\n    {\r\n        String filename = \"population.txt\";\r\n        File inputFile = new File(filename);\r\n        Scanner in = new Scanner(inputFile);\r\n\r\n        String country = in.next();\r\n        double population = in.nextDouble();\r\n        double largest = population;\r\n\r\n        // TODO: Print the population and name of the country with largest population\r\n\r\n        // HINT: What else do you need to remember?\r\n        // What variable(s) should you add so you can\r\n        // print the population and the country name at the end?\r\n        while (in.hasNext())\r\n        {\r\n            country = in.next();\r\n            population = in.nextDouble();\r\n            if (population > largest)\r\n            {\r\n                largest = population;\r\n            }\r\n        }\r\n        System.out.println(\"The country with the largest population is \" + \"TODO\");\r\n        System.out.println(\"The largest population is \" + largest);\r\n    }\r\n}\r\n","classname":"LargestCountries","expectedoutput":"","programtype":"stdin","type":"program","qid":"14.5"},{"title":" The Most Populous Country","video":"videos/module10/23 - The","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.6"},{"title":" Common Algorithms","video":"videos/module10/24 - Common Algorithms.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.7"},{"title":" Counting Matches","video":"videos/module10/25 - Counting Matches.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.8"},{"title":"Quiz","question":"// BlueJ project: lesson6/counting_matches\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class CountingMatches\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner in = new Scanner(System.in);\r\n        int counter = 0;\r\n\r\n        // TODO: Prompt the user for a value until they enter Q\r\n        // count how many times the user enters a negative number\r\n        // using the variable counter\r\n        System.out.print(\"Enter a value, Q to quit: \" );\r\n\r\n        //your code here.\r\n\r\n        System.out.println(\"The water line fell on \" + counter + \" years.\");\r\n    }\r\n}\r\n","classname":"CountingMatches","expectedoutput":"Enter a value, Q to quit: 1.5\r\nEnter a value, Q to quit: -1.1\r\n Enter a value, Q to quit: 5.2\r\nEnter a value, Q to quit: -2.675\r\nEnter a value, Q to quit: -1\r\nEnter a value, Q to quit: 2\r\nEnter a value, Q to quit: q\r\nThe water line fell on 3 years.\r\n","input":"1.5\r\n-1.1\r\n5.2\r\n-2.675\r\n-1\r\n2\r\nq\r\n","programtype":"stdin","type":"program","qid":"14.9"},{"title":" Counting Matches","video":"videos/module10/26 - Counting","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.10"},{"title":" Counting Matching Digits","video":"videos/module10/27 - Counting Matching Digits.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.11"},{"title":"Quiz","question":"// Bluej project: lesson6/counting_matches_digits\r\n/**\r\n * A class that represents a number and can report\r\n * properties of the number.\r\n */\r\npublic class Number\r\n{\r\n    private long number;\r\n\r\n    public Number(long number)\r\n    {\r\n        this.number = number;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of times digitToMatch appears\r\n     * in this number.\r\n     * @param digitToMatch the digit to search for.\r\n     *   must be at least 0 and at most 9.\r\n     * @return number of occurrences of digitToMatch\r\n     */\r\n    public int countMatchingDigits(int digitToMatch)\r\n    {\r\n        // TODO: count and return the number of times the given digit appears in the number\r\n\r\n        // Hint: The last digit is (int)(numbers % 10).\r\n    }\r\n}\r\n","classname":"Number","expectedoutput":"","programtype":"stdin","type":"program","qid":"14.12"},{"title":" Counting Matching Digits","video":"videos/module10/28 - Counting","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.13"},{"title":" Finding the First Match","video":"videos/module10/29 - Finding the First Match.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.14"},{"title":"Quiz","question":"// Bluej project: finding_the_first_match\r\n// Write a program that finds the first word in Alice In Wonderland\r\n// that is longer than a given number of characters.\r\n\r\nimport java.util.Scanner;\r\nimport java.io.FileReader;\r\nimport java.io.FileNotFoundException;\r\n\r\npublic class FirstMatch\r\n{\r\n    public static void main(String[] args) throws java.io.FileNotFoundException\r\n    {\r\n        Scanner in = new Scanner(new FileReader(\"aliceInWonderland.txt\"));\r\n        String longWord = \"\";\r\n        boolean found = false;\r\n        final int THRESHOLD = 9;\r\n        // TODO: Write a loop that searches for long words\r\n        // (more than THRESHOLD letters)\r\n        // The loop should stop if you find one or if you run out of words\r\n        System.out.println(\"The first long word is: \" + longWord);\r\n    }\r\n}\r\n","classname":"FirstMatch","expectedoutput":"","programtype":"stdin","type":"program","qid":"14.15"},{"title":" Finding the First Match","video":"videos/module10/30 - Finding","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.16"},{"title":" What If There Are No Long Words","video":"videos/module10/31 - What If There Are No Long Words.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.17"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-14.jpg'><input style='position:absolute; top:33.5%; left:52%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:45%; left:52%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:62%; left:52%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:72%; left:52%;' name='option' value='d' id=\"quizinput4\" type=\"radio\"></input>","answer":["06"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.18"},{"title":" What If There Are No Long Words","video":"videos/module10/32 - What","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.19"},{"title":" Fix the Long Word Finding Code","video":"videos/module10/33 - Fix the Long Word Finding Code.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.20"},{"title":"Quiz","question":"// Bluej project: lesson6/first_match_no_long_words\r\n// Write a program that finds the first word in Alice In Wonderland\r\n// that is longer than 60 characters, and if there are no words\r\n// that long, prints \"There are no long words\".\r\n\r\nimport java.util.Scanner;\r\nimport java.io.FileReader;\r\nimport java.io.FileNotFoundException;\r\n\r\npublic class FirstMatch\r\n{\r\n    public static void main(String[] args) throws FileNotFoundException\r\n    {\r\n        Scanner in = new Scanner(new FileReader(\"aliceInWonderland.txt\"));\r\n        String longWord = \"\";\r\n        boolean found = false;\r\n\r\n        final int THRESHOLD = 60;\r\n\r\n        while (in.hasNext() && !found)\r\n        {\r\n            String word = in.next();\r\n            if (word.length() > THRESHOLD)\r\n            {\r\n                longWord = word;\r\n                found = true;\r\n            }\r\n        }\r\n        // TODO: if there are no long words, print\r\n        // \"There are no long words\"\r\n        // instead of\r\n        // \"The first long word is: \" ...\r\n\r\n        System.out.println(\"The first long word is: \" + longWord);\r\n    }\r\n}\r\n","classname":"FirstMatch","expectedoutput":"","programtype":"stdin","type":"program","qid":"14.21"},{"title":" Fix the Long Word Finding Code","video":"videos/module10/34 - Fix","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.22"},{"title":" Finding the Position of the First Match","video":"videos/module10/35 - Finding the Position of the First Match.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.23"},{"title":"Quiz","question":"// Bluej project: lesson6/position_of_first_match\r\n// Write a program that finds the first word in Alice In Wonderland\r\n// that is longer than 9 characters, and if there are no words\r\n// that long, prints \"There are no long words\".\r\n\r\nimport java.util.Scanner;\r\nimport java.io.FileReader;\r\n\r\npublic class FirstMatch\r\n{\r\n    public static void main(String[] args) throws java.io.FileNotFoundException\r\n    {\r\n        Scanner in = new Scanner(new FileReader(\"aliceInWonderland.txt\"));\r\n        String longWord = \"\";\r\n        boolean found = false;\r\n\r\n        final int THRESHOLD = 9;\r\n\r\n        // TODO: Remember and print the position of the first word\r\n        // longer than THRESHOLD characters.\r\n        while (in.hasNext() && !found)\r\n        {\r\n            String word = in.next();\r\n            if (word.length() > THRESHOLD)\r\n            {\r\n                longWord = word;\r\n                found = true;\r\n            }\r\n        }\r\n        if (found)\r\n        {\r\n            System.out.println(\"The first long word is \" + longWord + \" at position \" + ...);\r\n        }\r\n        else\r\n        {\r\n            System.out.println(\"There are no long words\");\r\n        }\r\n    }\r\n}\r\n","classname":"FirstMatch","expectedoutput":"","programtype":"stdin","type":"program","qid":"14.24"},{"title":" Finding the Position of the First Match","video":"videos/module10/36 - Finding","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.25"},{"title":" Nested For Loops","video":"videos/module10/37 - Nested For Loops.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.26"},{"title":"Quiz - Nested For Loops","question":"// BlueJ project: lesson6/nested\r\n\r\n// The x- and y- positions of the rectangles should start at\r\n// 0, WIDTH, 2 * WIDTH, and so on.\r\n// The colors should start at 0, end up at 255, and grow in\r\n// equal increments.\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\npublic class nested\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        final int WIDTH = 10;\r\n        final int ROWS = 16;\r\n        final int COLUMNS = 16;\r\n\r\n        for (int i = 0; i < ROWS; i++)\r\n        {\r\n            for (int j = 0; j < COLUMNS; j++)\r\n            {\r\n                int x = ...;\r\n                int y = ...;\r\n                Rectangle rect = new Rectangle(x, y,\r\n                                               WIDTH - 1, WIDTH - 1);\r\n                int blue =...;\r\n                int green =...;\r\n                Color fillColor = new Color(0, green, blue);\r\n                rect.setColor(fillColor);\r\n                rect.fill();\r\n            }\r\n        }\r\n        Canvas.getInstance().snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\n","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\nested.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"nested","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"14.27"},{"title":" Nested For Loops","video":"videos/module10/38 - Nested","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.28"},{"title":" Clock Times","video":"videos/module10/39 - Clock Times.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.29"},{"title":"Quiz","question":"// lesson6/clock-times\r\n//\r\n// Write code that prints a table of all the possible times a digital\r\n// clock can show. The clock only shows hours and minutes. \r\n// print the table this way : \r\n// 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00 9:00 10:00 11:00 12:00 \r\n// 1:01 2:01 3:01 4:01 5:01 6:01 7:01 8:01 9:01 10:01 11:01 12:01 \r\n// 1:02 2:02 3:02 4:02 5:02 6:02 7:02 8:02 9:02 10:02 11:02 12:02 \r\n// 1:03 2:03 3:03 4:03 5:03 6:03 7:03 8:03 9:03 10:03 11:03 12:03 \r\n// 1:04 2:04 3:04 4:04 5:04 6:04 7:04 8:04 9:04 10:04 11:04 12:04 \r\n// 1:05 2:05 3:05 4:05 5:05 6:05 7:05 8:05 9:05 10:05 11:05 12:05 \r\n// ...\r\n// 1:59 2:59 3:59 4:59 5:59 6:59 7:59 8:59 9:59 10:59 11:59 12:59 \r\n\r\npublic class ClockTimes\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        for (int minute = 0; minute < 60; minute++)\r\n        {\r\n            // YOUR CODE HERE\r\n            // Use nested loops to count through all the hours \r\n            // and all the minutes, and print formatted strings. \r\n            // Hint: use %02d to print single digit numbers with \r\n            // a leading zero. The 0 means \"zero-padded\" check out\r\n            // the fact sheet from lesson 4 to read about more \r\n            // formatting options. \r\n        }\r\n    }\r\n}","classname":"ClockTimes","expectedoutput":"","programtype":"stdin","type":"program","qid":"14.30"},{"title":" Clock Times","video":"videos/module10/40 - Clock","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.31"},{"title":" Triangle Pattern","video":"videos/module10/41 - Triangle Pattern.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.32"},{"title":"Quiz","question":"// lesson6/triangle_pattern\r\n//\r\n// Write nested loops that make the following pattern of brackets\r\n// (Use the numberOfRows variable so it can easily be modified\r\n// to print any number of rows): \r\n// []\r\n// [][]\r\n// [][][]\r\n// [][][][]\r\n// [][][][][]\r\n\r\n// If numberOfRows were 6, the pattern would be: \r\n// []\r\n// [][]\r\n// [][][]\r\n// [][][][]\r\n// [][][][][]\r\n// [][][][][][]\r\n\r\npublic class TrianglePattern\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Please do not modify this line. \r\n        int numberOfRows = 5;\r\n        \r\n        // YOUR CODE HERE\r\n        // Use nested for loops to print the triangle pattern. \r\n        // Please use the variable numberOfRows to control how many\r\n        // rows you print.\r\n        // Note: the desired number of columns depends on which row\r\n        // you are printing. \r\n        \r\n    }\r\n}\r\n","classname":"TrianglePattern","expectedoutput":"","programtype":"stdin","type":"program","qid":"14.33"},{"title":" Triangle Pattern","video":"videos/module10/42 - Triangle","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.34"},{"title":" Telescope","video":"videos/module10/43 - Telescope.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.35"},{"title":"Quiz - Telescope","question":"// BlueJ project: lesson6/telescope\r\n\r\n// Your task is to color all pixels black that are outside the\r\n// telescope circle. The center and radius of the circle are\r\n// given below.\r\n\r\n// For each point, find out the distance to the center and\r\n// check if it is larger than the radius.\r\n\r\n// Hint: The distance between two points (x1, y1) and (x2, y2) is\r\n// Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2))\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\npublic class telescope\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Picture pic = new Picture();\r\n        pic.load(\"resources//courseware//program_images//queen-mary.png\");\r\n        pic.draw();\r\n\r\n        double centerX = pic.getWidth() / 2;\r\n        double centerY = pic.getHeight() / 2;\r\n        double radius = pic.getHeight() / 4;\r\n\r\n        for (int x = ...; ...; ...)\r\n        {\r\n            for (int y = ...; y < ...; ...)\r\n            {\r\n                double distance = ...;\r\n                if (...)\r\n                {\r\n                    pic.setColorAt(..., ..., Color.BLACK);\r\n                }\r\n            }\r\n        }\r\n        Picture picture = new Picture();\r\n        picture.snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\n","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\telescope.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"telescope","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"14.36"},{"title":" Telescope","video":"videos/module10/44 - Telescope.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.37"},{"title":" Random Numbers","video":"videos/module10/45 - Random Numbers.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.38"},{"title":"Quiz","question":"// BlueJ project: lesson6/dice\r\n// In the cast method, call the nextInt method and return a\r\n// random value between 1 and sides\r\n\r\nimport java.util.Random;\r\n\r\n/**\r\n   This class models a die that, when cast, lands on a random\r\n   face.\r\n*/\r\npublic class Die\r\n{\r\n    private Random generator;\r\n    private int sides;\r\n\r\n    /**\r\n       Constructs a die with a given number of sides.\r\n       @param s the number of sides, e.g. 6 for a normal die\r\n    */\r\n    public Die(int s)\r\n    {\r\n        sides = s;\r\n        final int SEED = 42;\r\n        generator = new Random(SEED);\r\n    }\r\n\r\n    /**\r\n       Simulates a throw of the die\r\n       @return the face of the die\r\n    */\r\n    public int cast()\r\n    {\r\n        // TODO: Complete this method\r\n    }\r\n}\r\n","classname":"Die","expectedoutput":"","programtype":"stdin","type":"program","qid":"14.39"},{"title":" Random Numbers","video":"videos/module10/46 - Random","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.40"},{"title":" Computing Pi with Darts","video":"videos/module10/47 - Computing Pi with Darts.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.41"},{"title":"Quiz","question":"// BlueJ project: lesson6/darts\r\n// Generate a random floating-point number and transform it so\r\n// that it is between -1 and 1. Store in x. Repeat for y.\r\n// Check that (x, y) is in the unit circle, that is, the distance\r\n// between (0, 0) and (x, y) is <= 1.\r\n// Hint: The distance between two points (x1, y1) and (x2, y2) is\r\n// Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2))\r\n\r\nimport java.util.Random;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n   This program computes an estimate of pi by simulating dart throws onto a square.\r\n*/\r\npublic class MonteCarlo\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        System.out.println(\"Number of tries\");\r\n        Random generator = new Random(42);\r\n        Scanner in = new Scanner(System.in);\r\n        int tries = in.nextInt();\r\n\r\n        int hits = 0;\r\n        for (int i = 1; i <= tries; i++)\r\n        {\r\n            // Generate two random numbers between -1 and 1\r\n\r\n            double x = ...;\r\n\r\n            double y = ...;\r\n\r\n            // Check whether the point lies in the unit circle\r\n\r\n            if (...)\r\n            {\r\n                hits++;\r\n            }\r\n        }\r\n\r\n        /*\r\n           The ratio hits / tries is approximately the same as the ratio\r\n           circle area / square area = pi / 4\r\n        */\r\n\r\n        double piEstimate = 4.0 * hits / tries;\r\n        System.out.println(\"Estimate for pi: \" + piEstimate);\r\n    }\r\n}\r\n","classname":"MonteCarlo","expectedoutput":"","programtype":"stdin","type":"program","qid":"14.42"},{"title":" Computing Pi with Darts","video":"videos/module10/48 - Computing","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.43"},{"title":" Throwing a Die","video":"videos/module10/49 - Throwing a Die.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.44"},{"title":"Quiz","question":"// lesson6/throwing_a_die\r\n// A program that simulates tossing a die 100 times. \r\n// It prints the number of times you roll a 6. \r\n\r\nimport java.util.Random;\r\n\r\npublic class ThrowingADie\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // This line nitializes the generator and gives it 42 as a \"seed.\" \r\n        // The generator will generate a sequence of numbers that\r\n        // look random, but if you create another generator and seed \r\n        // it with 42, it will generate the same sequence. \r\n        Random generator = new Random(42);\r\n        \r\n        // YOUR CODE HERE\r\n        // Use a loop to roll a die 100 times. \r\n        // Count how many sixes you see, and print the number of\r\n        // 6's at the end. \r\n        // Hint: if you're not sure how to simulate rolling a die, \r\n        // check out the fact sheet on generating random numbers. \r\n        \r\n    }\r\n}\r\n","classname":"ThrowingADie","expectedoutput":"","programtype":"stdin","type":"program","qid":"14.45"},{"title":" Throwing a Die","video":"videos/module10/50 - Throwing","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.46"},{"title":" The Chevalier de Mere","video":"videos/module10/51 - The Chevalier de Mere.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.47"},{"title":"Quiz","question":"// lesson6/chevalier_de_mere\r\n\r\nimport java.util.Random;\r\n\r\npublic class DiceGame\r\n{\r\n    Random generator;\r\n    \r\n    public DiceGame()\r\n    {   \r\n        generator = new Random(45);\r\n    }\r\n    /** \r\n     * Throw a die four times and bet on at least one 6. \r\n     * @return true if the chevalier wins. \r\n     */\r\n    public boolean game1()\r\n    {\r\n        // YOUR CODE HERE\r\n        // Use the instance variable generator to simulate \r\n        // 4 die rolls. \r\n        // Return true if the chevalier wins (at least one is a 6).\r\n    }\r\n    \r\n    /**\r\n     * Throw two dice 24 times and bet on at least one double-six.\r\n     * @return true if the chevalier wins. \r\n     */\r\n    public boolean game2()\r\n    {   \r\n        // YOUR CODE HERE \r\n        // Use the instance variable generator to simulate \r\n        // 24 rolls of a pair of dice.\r\n        // Return true if at least one pair is both 6s. \r\n    }\r\n}\r\n","classname":"DiceGame","expectedoutput":"","programtype":"stdin","type":"program","qid":"14.48"},{"title":" The Chevalier de Mere","video":"videos/module10/52 - The","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.49"},{"title":" Estimating Pi Using Buffon Way","video":"videos/module10/53 - Estimating Pi Using Buffon Way.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.50"},{"title":"Quiz","question":"// BlueJ Project: lesson6/BuffonPiExperiment\r\n// Estimates pi using the Compte de Buffon's needle dropping method\r\n// Take a 1 inch needle. Repeatedly drop it on a sheet of\r\n// ruled paper whose lines are 2 inches apart \r\n// tries / hits = an approximation of pi\r\n\r\nimport java.util.Random;\r\nimport java.util.Scanner;\r\n\r\npublic class BuffonPiEstimation\r\n{\r\n    public static void main(String[] args) \r\n    {\r\n        System.out.println(\"Buffon Pi Estimation\");\r\n        System.out.println(\"Enter the number of tries: \");\r\n        Scanner in = new Scanner(System.in);\r\n        int tries = in.nextInt();\r\n\r\n        Random generator = new Random(42);\r\n\r\n        // YOUR CODE HERE\r\n        // Calculate the number of hits. \r\n        // generate a yLow, the lowest point, or the farthest point on \r\n        // the needle from the line (a number between 0 and 2).\r\n        // generate a random angle a between 0 and 180 degrees. \r\n        // yHigh is yLow plus the sine of a. \r\n        // if yHigh is above the line (the line is at a height of 2), \r\n        // the needle is touching the line, and counts as a hit.\r\n        // Hint: Math.sin takes an angle in radians. \r\n        \r\n        \r\n        System.out.println();\r\n        System.out.println(piEstimate);\r\n    }   \r\n}\r\n","classname":"BuffonPiEstimation","expectedoutput":"","programtype":"stdin","type":"program","qid":"14.51"},{"title":" Estimating Pi Using Buffon Way","video":"videos/module10/54 - Estimating","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.52"},{"title":" Using the Debugger 1","video":"videos/module10/55 - Using the Debugger 1.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.53"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-15.png' alt='no-image'/><input id=\"quizinput1\" style=\"position:absolute; top:54%; left:57%; width:10%\" type=\"text\"></input>","answer":["57"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.54"},{"title":" Using the Debugger 1","video":"videos/module10/56 - Using","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.55"},{"title":" Using the Debugger 2","video":"videos/module10/57 - Using the Debugger 2.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.56"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-16.png' alt='no-image'/><input id=\"quizinput1\" style=\"position:absolute; top:57%; left:16%; width:10%\" type=\"text\"></input>","answer":["57"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.57"},{"title":" Using the Debugger 2","video":"videos/module10/58 - Using","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.58"},{"title":" Using the Debugger 3","video":"videos/module10/59 - Using the Debugger 3.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.59"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-17.png' alt='no-image'/><input id=\"quizinput1\" style=\"position:absolute; top:49.5%; left:53.5%; width:10%\" type=\"text\"></input>","answer":["50"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.60"},{"title":" Using the Debugger 3","video":"videos/module10/60 - Using","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.61"},{"title":" Using the Debugger with Sara 1","video":"videos/module10/61 - Using the Debugger with Sara 1.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.62"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-18.jpg' alt='no-image'/><input id=\"quizinput1\" style=\"position:absolute; top:45%; left:62%; width:15%\" type=\"text\"></input><input id=\"quizinput2\" style=\"position:absolute; top:60%; left:62%; width:15%\" type=\"text\"></input>","answer":["54","50"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.63"},{"title":" Using the Debugger with Sara 1","video":"videos/module10/62 - Using","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.64"},{"title":" Using the Debugger with Sara 2","video":"videos/module10/63 - Using the Debugger with Sara 2.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.65"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-19.jpg' alt='no-image'/><input id=\"quizinput1\" style=\"position:absolute; top:43%; left:12%; width:25%\" type=\"text\"></input>","answer":["2c8bd89c"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.66"},{"title":" Using the Debugger with Sara 2","video":"videos/module10/64 - Using","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.67"},{"title":" Using the Debugger with Sara 3","video":"videos/module10/65 - Using the Debugger with Sara 3.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.68"},{"title":"Quiz","question":"// Lesson6 debugger1\r\n\r\n// Fix the constructor of the Word class so that it \r\n// doesn't cut off the last letter of words. \r\n\r\n/**\r\n   This class describes words in a document. There are a couple\r\n   of bugs in this class.\r\n*/\r\npublic class Word\r\n{\r\n    private String text;\r\n\r\n    /**\r\n       Constructs a word by removing leading and trailing non-\r\n       letter characters, such as punctuation marks.\r\n       @param s the input string\r\n    */\r\n    public Word(String s)\r\n    {\r\n        // YOUR CODE SOMEWHERE NEAR HERE\r\n        // The constructor currently cuts off the last letter \r\n        // of the word. How would you fix that? \r\n        // Hint: In the video you saw that i and j were calculated correctly. \r\n        text = s.toLowerCase();\r\n        int i = 0;\r\n\r\n        while (i < s.length() && !Character.isLetter(s.charAt(i)))\r\n        {\r\n            i++;\r\n        }\r\n        int j = s.length() - 1;\r\n        while (j > i && !Character.isLetter(s.charAt(j)))\r\n        {\r\n            j--;\r\n        }\r\n        text = s.substring(i, j);\r\n    }\r\n\r\n    /**\r\n       Returns the text of the word, after removal of the\r\n       leading and trailing non-letter characters.\r\n       @return the text of the word\r\n    */\r\n    public String getText()\r\n    {\r\n        return text;\r\n    }\r\n\r\n    /**\r\n       Counts the syllables in the word.\r\n       @return the syllable count\r\n    */\r\n    public int countSyllables()\r\n    {\r\n        int count = 0;\r\n        int end = text.length() - 1;\r\n        if (end < 0)\r\n        {\r\n            return 0;    // The empty string has no syllables\r\n        }\r\n\r\n        // An e at the end of the word doesn't count as a vowel\r\n        if (text.endsWith(\"e\"))\r\n        {\r\n            end--;\r\n        }\r\n\r\n        boolean insideVowelGroup = false;\r\n        for (int i = 0; i <= end; i++)\r\n        {\r\n            String letter = text.substring(i, i + 1);\r\n            if (\"aeiou\".contains(letter))\r\n            {\r\n                // letter is a vowel\r\n                if (!insideVowelGroup)\r\n                {\r\n                    // Start of new vowel group\r\n                    count++;\r\n                    insideVowelGroup = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Every word has at least one syllable\r\n        if (count == 0)\r\n        {\r\n            count = 1;\r\n        }\r\n\r\n        return count;\r\n    }\r\n}","classname":"Word","expectedoutput":"","programtype":"stdin","type":"program","qid":"14.69"},{"title":" Using the Debugger with Sara 3","video":"videos/module10/66 - Using","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.70"},{"title":" Hello Yellow Peach","video":"videos/module10/67 - Hello Yellow Peach.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.71"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-20.jpg' alt='no-image'/><input style='position:absolute; top: 36%; left: 25%;' type='checkbox' class='Checkboxinput' value='a'><input style='position:absolute; top: 47.5%; left: 25%;' type='checkbox' class='Checkboxinput' value='b'><input style='position:absolute; top: 58%; left: 25%;' type='checkbox' class='Checkboxinput' value='c'>","answer":["07"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.72"},{"title":" Hello Yellow Peach","video":"videos/module10/68 - Hello","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.73"},{"title":" Figuring out What is Wrong","video":"videos/module10/69 - Figuring out What is Wrong.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.74"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-21.jpg' alt='no-image'/><input id=\"quizinput1\" style=\"position:absolute; top:46%; left:72%; width:17%; height:6%\" type=\"text\"></input>","answer":["01"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.75"},{"title":" Figuring out What is Wrong","video":"videos/module10/70 - Figuring","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.76"},{"title":" What Happens Next","video":"videos/module10/71 - What Happens Next.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.77"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-22.png' alt='no-image'/><input style='position:absolute; top: 48.5%; left: 16%;' type='checkbox' class='Checkboxinput' value='a'><input style='position:absolute; top: 57.5%; left: 16%;' type='checkbox' class='Checkboxinput' value='b'><input style='position:absolute; top: 65.5%; left: 16.5%;' type='checkbox' class='Checkboxinput' value='c'><input style='position:absolute; top: 72.5%; left: 16%;' type='checkbox' class='Checkboxinput' value='d'>","answer":["05"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.78"},{"title":" What Happens Next","video":"videos/module10/72 - What","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.79"},{"title":" How Would We Fix That","video":"videos/module10/73 - How Would We Fix That.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.80"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-23.jpg'><input style='position:absolute; top:39.5%; left:8%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:51%; left:8%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:62%; left:8%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><input style='position:absolute; top:71%; left:8.5%;' name='option' value='d' id=\"quizinput4\" type=\"radio\"></input>","answer":["00"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.81"},{"title":" How Would We Fix That","video":"videos/module10/74 - How","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.82"},{"title":" Let us Fix the Code","video":"videos/module10/75 - Let us Fix the Code.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.83"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson6/image-24.jpg' alt='no-image'/><input style='position:absolute; top: 46%; left: 25%;' type='checkbox' class='Checkboxinput' value='a'><input style='position:absolute; top: 54%; left: 25%;' type='checkbox' class='Checkboxinput' value='b'><input style='position:absolute; top: 61%; left: 25%;' type='checkbox' class='Checkboxinput' value='c'>","answer":["05","06","07"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.84"},{"title":" Let us Fix the Code","video":"videos/module10/76 - Let","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.85"},{"title":" Fixing the code","video":"videos/module10/77 - Fixing the code.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"14.86"}]},"15":{"title":"Problem Set 5","lessons":[{"title":"Short Problem 1 ","question":"<img src='images/Problem Set 5/5.1.jpg' alt='image'><br><p style='text-align:left; color:green; font-size:20px'><input name='option' value='a' id=\"quizinput1\" type=\"radio\">&nbsp;5</input><br><input name='option' value='b' id=\"quizinput2\" type=\"radio\">&nbsp;6</input><br><input name='option' value='c' id=\"quizinput3\" type=\"radio\">&nbsp;nothing,The code does not compile</input><br><input name='option' value='d' id=\"quizinput4\" type=\"radio\">&nbsp;nothing,this is an infinite loop.</input>","answer":["07"],"type":"quiz","tips":"","qid":"15.1"},{"title":"Short problem 2","question":"<img src='images/Problem Set 5/5.2.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["52"],"type":"quiz","tips":"","qid":"15.2"},{"title":"Short problem 3","question":"<img src='images/Problem Set 5/5.3.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["51ce80d072312a306109b44dbfb2"],"type":"quiz","tips":"","qid":"15.3"},{"title":"Short problem 4","question":"<img src='images/Problem Set 5/5.4.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["54ce86d0612538267011a45ca2a34dc9"],"type":"quiz","tips":"","qid":"15.4"},{"title":"Short problem 5","question":"//Complete the code below to print each letter in the string name followed by a space. \r\n//\r\npublic class StringTester\r\n{\r\n   public static void main(String[] args)\r\n   {\r\n       String name = \"Udacity\";\r\n\r\n       //your code here\r\n\r\n   }\r\n}\r\n","expectedoutput":"U d a c i t y\r\n","classname":"StringTester","programtype":"stdin","type":"program","qid":"15.5"},{"title":"Short problem 6","question":"<img src='images/Problem Set 5/5.6.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["52"],"type":"quiz","tips":"","qid":"15.6"},{"title":"Short problem 7","question":"//Complete the method to return the product of\r\n//all the numbers 1 to the parameter n (inclusive)\r\n\r\nclass MathUtil\r\n{\r\n   public int product(int n)\r\n   {\r\n        // TODO: Complete the function to return\r\n        // the product of 1, ..., N-1, N\r\n        \r\n   }\r\n}","testcases":"public class MathUtilTester{\r\n  public static void main(String args[]){\r\n    MathUtil d=new MathUtil();\r\n    System.out.println(\"Arguments\\tActual\\tExpected\");\r\n    System.out.println(\"---------------------------------------------\");\r\n    int testcases[]={6,720,10,3628800};\r\n    for(int i=0;i<testcases.length-1;i+=2){\r\n      int last=d.product(testcases[i]);\r\n      String teststatus=\"\";\r\n      if(last==testcases[i+1]){\r\n        teststatus=\"pass\";\r\n      }\r\n      else{\r\n        teststatus=\"fail\";\r\n      }\r\n      System.out.println(testcases[i]+\"\\t\\t\"+last+\"\\t\"+testcases[i+1]+\"\\t\"+teststatus);\r\n    }\r\n  }\r\n}","classname":"MathUtilTester","programtype":"api","type":"program","qid":"15.7"},{"title":"Short problem 8","question":"//Complete the method to return the number of non-vowels in the parameter\r\n//Assume the vowels are  a,e,i,o,u or A, E, I, O, U\r\n\r\nclass Word\r\n{\r\n    /**\r\n     * Gets the number of non-vowels in the parameter\r\n     * @param word the string to count the non-vowels in\r\n     * @return the number of non-vowels in the word\r\n     */\r\n    public int nonVowelCount(String word)\r\n    {\r\n        //TODO Write the code to return the number of non-vowels\r\n    }\r\n}\r\n","testcases":"public class WordTester{\r\n\tpublic static void main(String args[]){\r\n\t\tWord d=new Word();\r\n\t\tSystem.out.println(\"Arguments\\tActual\\tExpected\");\r\n\t\tSystem.out.println(\"---------------------------------------------\");\r\n\t\tString testcases[]={\"beauty12\",5,\"Udacity*\",5};\r\n\t\tfor(int i=0;i<testcases.length-1;i+=2){\r\n\t\t\tString last=d.nonVowelCount(testcases[i]);\r\n\t\t\tString teststatus=\"\";\r\n\t\t\tif(last.equals(testcases[i+1])){\r\n\t\t\t\tteststatus=\"pass\";\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tteststatus=\"fail\";\r\n\t\t\t}\r\n\t\t\tSystem.out.println(testcases[i]+\"\\t\"+last+\"\\t\"+testcases[i+1]+\"\\t\"+teststatus);\r\n\t\t}\r\n\t}\r\n}","classname":"WordTester","programtype":"api","type":"program","qid":"15.8"},{"title":"Short problem 9","question":"<img src='images/Problem Set 5/5.9.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["56"],"type":"quiz","tips":"","qid":"15.9"},{"title":"Short problem 10","question":"// TODO Write code to get a number in the range of 1 to 10\r\n// HINT: You need to use a do while loop.\r\n// HINT: You will need to create a Scanner object to read input from the user.\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class InputWithDo\r\n{\r\n    /*\r\n     * Gets a number betwwen 1 and 10 (inclusive) from the user\r\n     * @return user input between 1 and 10 (inclusive)\r\n     */\r\n    public int getValidInput()\r\n    {\r\n        //TODO Write code to get a number in the range of 1 to 10\r\n        // System.out.print(\"Enter an integer >=1 and <=10: \"); //use this for the prompt\r\n\r\n    }\r\n}\r\n","classname":"InputWithDo","expectedoutput":"10\r\n","input":"0\r\n11\r\n10\r\n","programtype":"stdin","type":"program","qid":"15.10"},{"title":"Short problem 11","question":"// Complete this method to read integer scores from the user and find the average\r\n// Stop asking for input when the user enters a negative number.\r\n// Keep a running total and keep track of the number of entries,\r\n// then find and return the average\r\n\r\n// Be sure not to divide by 0. Return 0 if no scores are entered\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class MathUtil\r\n{\r\n    public static void main(String args[]){\r\n       System.out.println(averageScore());\r\n    }\r\n    public static double averageScore()\r\n    {\r\n        //TODO Find and return the average of the numbers entered.\r\n       \r\n       \r\n       // System.out.print(\"Enter a score. -1 to quit: \"); //use this for the prompt\r\n    return 0;\r\n    }\r\n}\r\n","classname":"MathUtil","expectedoutput":"66.67\r\n","input":"65\r\n65\r\n70\r\n-1\r\n","programtype":"stdin","type":"program","qid":"15.11"},{"title":"Short problem 12","question":"<img src='images/Problem Set 5/5.12.jpg' alt='image'><br><input class='input-md' id=\"quizinput1\" type=\"text\"></input>&nbsp;&nbsp;<input class='input-md' id=\"quizinput2\" type=\"text\"></input>","answer":["1d","53"],"type":"quiz","tips":"","qid":"15.12"},{"title":"Short problem 14","question":"<img src='images/Problem Set 5/5.14.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["009bc49c287279643514f01fe7e647"],"type":"quiz","tips":"","qid":"15.13"},{"title":"Short problem 15","question":"<img src='images/Problem Set 5/5.15.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["54df86c34b202a236423b65ea6b6"],"type":"quiz","tips":"","qid":"15.14"},{"title":"Short problem 16","question":"<img src='images/Problem Set 5/5.16.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["038bda9533706c7f2207ea08eaf73595a707d5e499"],"type":"quiz","tips":"","qid":"15.15"},{"title":"Short problem 17","question":"<img src='images/Problem Set 5/5.17.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["038bda9533706c7f2207ea08eaf73595a707d5e499ac8c"],"type":"quiz","tips":"","qid":"15.16"},{"title":"Short problem 18","question":"<img src='images/Problem Set 5/5.18.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["55de84da267476752248f002e0ad129eab5ba0bbc5e5d1613ce0"],"type":"quiz","tips":"","qid":"15.17"},{"title":"Short problem 19","question":"// Complete the code to write nested loops that make the following pattern of brackets:\r\n//[][][][]\r\n//[][][][]\r\n//[][][][]\r\n\r\nclass Drawings\r\n{\r\n\r\n    public void blockPrinter()\r\n    {\r\n        //TODO Write code to print the pattern above.\r\n    }\r\n}\r\n","classname":"DrawingTester","testcases":"public class DrawingsTester{\r\n\tpublic static void main(String args[]){\r\n\t\tDrawings d=new Drawings();\r\n\t\tSystem.out.println(\"Actual\");\r\n\t\tSystem.out.println(\"-------------\");\r\n\t\tString testcases=\"[][][][]\\n[][][][]\\n[][][][]\";\r\n\t\td.blockPrinter();\r\n\t\tSystem.out.println(\"Expected\");\r\n\t\tSystem.out.println(\"-------------\");\r\n\t\tSystem.out.println(testcases);\r\n\r\n\t}\r\n}","programtype":"api","type":"program","qid":"15.18"},{"title":"Short problem 20","question":"// This modifies the previous problem. Start with that solution as your base\r\n// Complete the code to write nested loops that make the a pattern of brackets: a\r\n// rows x colomuns figure of []\r\n// For example if rows = 2 and columns = 5, the figure will look like this:\r\n//[][][][][]\r\n//[][][][][]\r\n\r\nclass Drawings\r\n{\r\n    /**\r\n     * Prints a rows by column array of blocks ([])\r\n     * @param rows the number of rows of []\r\n     * @param columns the number of columns of []\r\n     */\r\n     public void blockPrinter(int rows, int columns)\r\n     {\r\n         //TODO print the specified number of rows and columns of []\r\n     }\r\n}\r\n","testcases":"public class DrawingsTester{\r\n\tpublic static void main(String args[]){\r\n\t\tDrawings d=new Drawings();\r\n\t\tSystem.out.println(\"Actual\");\r\n\t\tSystem.out.println(\"-------------\");\r\n\t\tString testcases=\"[][][][][]\\n[][][][][]\\n\";\r\n\t\td.blockPrinter(2,5);\r\n\t\tSystem.out.println(\"Expected\");\r\n\t\tSystem.out.println(\"-------------\");\r\n\t\tSystem.out.println(testcases);\r\n\r\n\t}\r\n}","programtype":"api","type":"program","qid":"15.19"},{"title":"Question 1","question":"//Complete the given code to compute the sum of all odd digits of a integer.\r\n//The integer may be positive or negative. (For example, if the input is 32677,\r\n//the sum would be 3 + 7 + 7 = 17.)\r\n\r\n//HINT: Use a method of the Math class to get the absolute value of the parameter\r\n\r\n// Need help starting this question? In the lesson titled \r\n// \"Starting points: Problem Set Questions\", go to the\r\n// problem titled \"Problem Set 5 - Question 1\" for some tips on \r\n// how to begin.\r\n\r\n\r\nclass MathUtil\r\n{\r\n   /**\r\n    * Gets the sum of all the odd digits in the parameter\r\n    * @param n the number to use\r\n    * @return the sum of the odd digits.\r\n    */\r\n\r\n   public int sumOfOdd(int n)\r\n   {\r\n      //TODO calculate and return the sum of the odd digits\r\n\r\n       return 0;\r\n   }\r\n}\r\n","testcases":"public class MathUtilTester{\r\n\tpublic static void main(String args[]){\r\n\t\tMathUtil d=new MathUtil();\r\n\t\tSystem.out.println(\"Arguments\\tActual\\tExpected\");\r\n\t\tSystem.out.println(\"---------------------------------------------\");\r\n\t\tint testcases[]={34787,17,48628,0,-675,12};\r\n\t\tfor(int i=0;i<testcases.length-1;i+=2){\r\n\t\t\tint last=d.sumOfOdd(testcases[i]);\r\n\t\t\tString teststatus=\"\";\r\n\t\t\tif(last==testcases[i+1]){\r\n\t\t\t\tteststatus=\"pass\";\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tteststatus=\"fail\";\r\n\t\t\t}\r\n\t\t\tSystem.out.println(testcases[i]+\"\\t\"+last+\"\\t\"+testcases[i+1]+\"\\t\"+teststatus);\r\n\t\t}\r\n\t}\r\n}","classname":"MathUtilTester","programtype":"api","type":"program","qid":"15.20"},{"title":"Question 2","question":"//Translate the following pseudocode for randomly permuting the characters in\r\n//a string into a method in the given Java class.\r\n\r\n//Read a word.\r\n//Repeat word.length() times\r\n//   Pick a random position i in the word, but not the last position.\r\n//   Pick a random position j > i in the word. (this is tricky)\r\n//   Swap the letters at positions j and i.\r\n//Print the word.\r\n\r\n//To swap the letters, construct substrings as follows:\r\n//  http://i.imgur.com/re4bGPu.png\r\n\r\n//Create and return the string:\r\n//   first + word.substring(j, j + 1) + middle\r\n//         + word.substring(i, i + 1) + last\r\n\r\n// Need help starting this question? In the lesson titled \r\n// \"Starting points: Problem Set Questions\", go to the\r\n// problem titled \"Problem Set 5 - Question 2\" for some tips on \r\n// how to begin.\r\n\r\n//I recommend that you implement and test the swapping before implementing\r\n//the loop. If something is wrong in the swap, it will be much more difficult\r\n//to find it you have executed the swap many times. That is an example of\r\n//step-wise refinement. Code a little, test, code a little more.\r\n\r\nimport java.util.Random;\r\n/**\r\n\r\n */\r\nclass Word\r\n{\r\n   private Random generator = new Random();\r\n\r\n   public Word()  //leave the constructor alone\r\n   {\r\n        generator = new Random();\r\n        final long SEED = 42;\r\n        generator.setSeed(SEED);\r\n   }\r\n   /**\r\n    * Gets a version of this word with the leters scrambled\r\n    * @param word the string to scramble\r\n    * @return the scrabled string\r\n    */\r\n   public String scramble(String word)\r\n   {\r\n        //TODO scramble the letters following the pseudocode\r\n   }\r\n\r\n\r\n}\r\n","testcases":"public class WordTester{\r\n\tpublic static void main(String args[]){\r\n\t\tWord d=new Word();\r\n\t\tString s= d.scramble(\"Udacity\");\r\n\t\tString testcases=\"yciUadt\";\r\n\t\tSystem.out.println(\"Actual\"+\"\\t\"+\"Expected\");\r\n\t\tSystem.out.println(\"-------------------------\");\r\n\t\tSystem.out.println(s+\"\\t\"+testcases);\r\n\r\n\t}\r\n}","classname":"WordTester","programtype":"api","type":"program","qid":"15.21"},{"title":"Question 3","question":"//Create a class Word. Word has a constructor that takes a string argument\r\n//and one method getSubstrings which returns a String containing\r\n//all substring of word, sorted by length.\r\n\r\n//For example, if the user provides the input \"rum\", the method returns a\r\n//string that will print like this\r\n//r\r\n//u\r\n//m\r\n//ru\r\n//um\r\n//rum\r\n\r\n\r\n//You can concatenate the substrings in a String, separating them with a newline\r\n//(\"\\n\"). Then return the string\r\n\r\n// Need help starting this question? In the lesson titled \r\n// \"Starting points: Problem Set Questions\", go to the\r\n// problem titled \"Problem Set 5 - Question 3\" for some tips on \r\n// how to begin.\r\n\r\nclass Word\r\n{\r\n\r\n    //TODO write the constructor and define the instance variable\r\n\r\n    /**\r\n     * Gets all the substrings of this Word.\r\n     * @return all substrings of this Word separated by newline\r\n     */\r\n    public String getSubstrings()\r\n    {\r\n       //TODO implement this method\r\n    }\r\n}\r\n\r\n","testcases":"public class WordTester{\r\n    public static void main(String args[]){\r\n        Word d=new Word(\"rum\");\r\n        String s= d.getSubstrings();\r\n        String testcases=\"r\\nu\\nm\\nru\\num\\nrum\\n\";\r\n        String teststatus=\"\";\r\n        if(testcases.equals(s)){\r\n            teststatus=\"pass\";\r\n        }\r\n        else{\r\n            teststatus=\"fail\";\r\n        }\r\n        System.out.println(\"Actual\"+\"\\t\"+\"Expected\");\r\n        System.out.println(\"-------------------------\");\r\n        System.out.println(s+\"\\t\"+testcases+\"\\n\"+teststatus);\r\n\r\n    }\r\n}","classname":"WordTester","programtype":"api","type":"program","qid":"15.22"}]},"16":{"title":"ArrayLists and Arrays","lessons":[{"title":" ArrayLists","video":"videos/module11/01 - ArrayLists.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.1"},{"title":" Elements","video":"videos/module11/02 - Elements.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.2"},{"title":" Drawing All the Elements","video":"videos/module11/03 - Drawing All the Elements.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.3"},{"title":"Question 3 - ListOfPictures","question":"// BlueJ project: lesson7/gallery1\r\n\r\n// BlueJ project: lesson7/gallery1\r\n\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\npublic class ListOfPictures\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<Picture> gallery = new ArrayList<Picture>();\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//degas1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//gaugin1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//monet1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//monet2.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//renoir1.jpg\"));\r\n\r\n        for (int i = 0; i < gallery.size(); i++)\r\n        {\r\n            Picture pic = gallery.get(i);\r\n            //Your Code Here\r\n            pic.draw();\r\n        }\r\n        Picture picture = new Picture();\r\n        picture.snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\n","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\ListOfPictures.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"ListOfPictures","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"16.4"},{"title":" Drawing All the Elements","video":"videos/module11/4 - Drawing","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.5"},{"title":" Fixing the Overlap","video":"videos/module11/05 - Fixing the Overlap.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.6"},{"title":" Look at the Element Before this One","video":"videos/module11/06 - Look at the Element Before this One.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.7"},{"title":"Quiz - Look at the Element Before this One","question":"// BlueJ project: lesson7/gallery2\r\n\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\npublic class ListOfPictures2\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<Picture> gallery = new ArrayList<Picture>();\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//degas1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//gaugin1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//monet1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//monet2.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//renoir1.jpg\"));\r\n\r\n        for(int i = 1; i < gallery.size(); i++)\r\n        {\r\n            Picture pic = gallery.get(i);\r\n            Picture left = gallery.get(i - 1);\r\n            pic.translate(left.getMaxX() + 10, 0);\r\n            // Move pic 10 pixels to the right of left\r\n            // Hint: left.getMaxX()\r\n        }\r\n\r\n        for (int i = 0; i < gallery.size(); i++)\r\n        {\r\n            Picture pic = gallery.get(i);\r\n            pic.draw();\r\n        }\r\n        Picture picture = new Picture();\r\n        picture.snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\n","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\ListOfPictures2.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"ListOfPictures2","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"16.8"},{"title":" Look at the Element Before this One","video":"videos/module11/7 - Look","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.9"},{"title":" Meet the Enhanced For Loop","video":"videos/module11/08 - Meet the Enhanced For Loop.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.10"},{"title":" Enhanced For Loop","video":"videos/module11/09 - Enhanced For Loop.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.11"},{"title":"Quiz - Enhanced For Loop","question":"// BlueJ project: lesson7/gallery3\r\n\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\npublic class ListOfPictures3\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<Picture> gallery = new ArrayList<Picture>();\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//degas1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//gaugin1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//monet1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//monet2.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//renoir1.jpg\"));\r\n        for (Picture pic : gallery)\r\n        {\r\n            // TODO: Move the first picture to offset 10,\r\n            // the second picture ten pixels to the right of the first one,\r\n            // and so on\r\n        }\r\n\r\n        for (Picture pic : gallery)\r\n        {\r\n            pic.draw();\r\n        }\r\n        Picture picture = new Picture();\r\n        picture.snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\n","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\ListOfPictures3.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"ListOfPictures3","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"16.12"},{"title":" Enhanced For Loop","video":"videos/module11/10 - Enhanced","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.13"},{"title":" Friends Done Right","video":"videos/module11/11 - Friends Done Right.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.14"},{"title":"Quiz","question":"// This is part of the Person class from lesson 3.\r\n// A String is not the right way to store the friends of a Person\r\n// We need to refactor this code.\r\n// Change the friends variable to store an ArrayList<String>\r\n// that contains the names of the friends.\r\n// Re-implement the addFriend and getFriends methods.\r\npublic class Person\r\n{\r\n    private String name;\r\n    private String friends;\r\n    private static final String SEPARATOR = \", \";\r\n\r\n    public Person(String name)\r\n    {\r\n        this.name = name;\r\n        this.friends = \"\";\r\n    }\r\n\r\n    /**\r\n     * Adds the given friend to this Person's friends list.\r\n     * @param friend the friend to add.\r\n     */\r\n    public void addFriend(Person friend)\r\n    {\r\n        friends = friends + friend.name + SEPARATOR;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of all of this Person's friends.\r\n     * @return the names of the friends separated by a comma and a space.\r\n     *     e.g. \"Sara, Cheng-Han, Cay\"\r\n     */\r\n    public String getFriends()\r\n    {\r\n        if (friends.length() == 0) \r\n        {\r\n            return \"\";\r\n        }\r\n        else\r\n        {\r\n            return friends.substring(0, friends.length() - SEPARATOR.length());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a friend at a given index.\r\n     * @param friendIndex the index at which to find the friend (starting at 0)\r\n     * @return the name of the friend at friendIndex, or \"\" if the friend is not present\r\n     */\r\n    public String getFriend(int friendIndex)\r\n    {\r\n        int start = 0;\r\n        // Skip to the beginning of the name with the given index\r\n        for (int i = 0; i < friendIndex; i++)\r\n        {\r\n            int separatorIndex = friends.indexOf(SEPARATOR, start);\r\n            if (separatorIndex == -1) { return \"\"; }\r\n            start = separatorIndex + SEPARATOR.length();\r\n        }\r\n        int nextSeparatorIndex = friends.indexOf(SEPARATOR, start);\r\n        return friends.substring(start, nextSeparatorIndex);\r\n    }\r\n}\r\n","classname":"Person","expectedoutput":"","programtype":"stdin","type":"program","qid":"16.15"},{"title":" Friends Done Right","video":"videos/module11/12 - Friends","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.16"},{"title":" Get Num Friends","video":"videos/module11/13 - Get Num Friends.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.17"},{"title":"Quiz","question":"import java.util.ArrayList;\r\n// Implement the getNumFriends method.\r\npublic class Person\r\n{\r\n    private String name;\r\n    private ArrayList<String> friends;\r\n\r\n    public Person(String name)\r\n    {\r\n        this.name = name;\r\n        friends = new ArrayList<String>();\r\n    }\r\n\r\n    /**\r\n     * Adds the given friend to this Person's friends list.\r\n     * @param friend the friend to add.\r\n     */\r\n    public void addFriend(Person friend)\r\n    {\r\n        friends.add(friend.name);\r\n    }\r\n\r\n    /**\r\n     * Gets a list of all of this Person's friends.\r\n     * @return the names of the friends separated by a comma and a space.\r\n     *     e.g. \"Sara, Cheng-Han, Cay\"\r\n     */\r\n    public String getFriends()\r\n    {\r\n        String friendsWithBrackets = friends.toString();\r\n        return friendsWithBrackets.substring(1, friendsWithBrackets.length() - 1);\r\n    }\r\n\r\n    /**\r\n     * Gets a friend at a given index\r\n     * @param friendIndex the index at which to find the friend (starting at 0)\r\n     * @return the name of the friend at friendIndex\r\n     */\r\n    public String getFriend(int friendIndex)\r\n    {\r\n        return friends.get(friendIndex);\r\n    }\r\n\r\n    /**\r\n     * Gets the number of friends this Person has.\r\n     * @return the number of friends.\r\n     */\r\n    public int getNumFriends()\r\n    {\r\n        // YOUR CODE HERE\r\n        // How would you do this without adding more than one line?\r\n        // Think about ArrayList methods we talked about that might help you.\r\n    }\r\n}\r\n","classname":"Person","expectedoutput":"","programtype":"stdin","type":"program","qid":"16.18"},{"title":" Get Num Friends","video":"videos/module11/14 - Get","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.19"},{"title":" refractoring","video":"videos/module11/15 - refractoring.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.20"},{"title":" Modifying an ArrayList","video":"videos/module11/16 - Modifying an ArrayList.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.21"},{"title":" Modifying the Contents","video":"videos/module11/17 - Modifying the Contents.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.22"},{"title":"Quiz - Modifying the Contents","question":"// BlueJ project: lesson7/gallery4\r\n\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\npublic class ListOfPictures4\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<Picture> gallery = new ArrayList<Picture>();\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//degas1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//gaugin1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//monet1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//monet2.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//renoir1.jpg\"));\r\n\r\n        // TODO: Rotate the gallery so that the last picture\r\n        // becomes the first one, the first the second, and so on.\r\n\r\n\r\n        int rightmostX = 0;\r\n        for (Picture pic : gallery)\r\n        {\r\n            pic.translate(rightmostX + 10, 0);\r\n            rightmostX = pic.getMaxX();\r\n            pic.draw();\r\n        }\r\n        Picture picture = new Picture();\r\n        picture.snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\n","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\ListOfPictures4.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"ListOfPictures4","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"16.23"},{"title":" Modifying the Contents","video":"videos/module11/18 - Modifying","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.24"},{"title":" Books To Read","video":"videos/module11/19 - Books To Read.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.25"},{"title":"Quiz","question":"import java.util.ArrayList;\r\npublic class BookListDemo\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<String> booksToRead = new ArrayList<String>();\r\n\r\n        booksToRead.add(\"The Eyre Affair by Jasper Fforde\");\r\n        booksToRead.add(\"Night Watch by Terry Pratchett\");\r\n        booksToRead.add(\"Next by Michael Crichton\");\r\n        booksToRead.add(\"The Brain That Changes Itself by Norman Doidge\");\r\n        booksToRead.add(\"Effective Java by Joshua Bloch\");\r\n        booksToRead.add(\"The Visual Display of Quantitative Information by Edward R. Tufte\");\r\n\r\n        String anotherBook = \"Why zebras don't get ulcers by Robert M. Sapolsky\";\r\n        // YOUR CODE HERE\r\n        // Insert Why Zebras Don't Get Ulcers after\r\n        // Night Watch and before Next.\r\n        // You can use the variable anotherBook that I defined above.\r\n\r\n\r\n        // Please don't modify the following line:\r\n        System.out.println(booksToRead);\r\n    }\r\n}\r\n","classname":"BookListDemo","expectedoutput":"","programtype":"stdin","type":"program","qid":"16.26"},{"title":" Books To Read","video":"videos/module11/20 - Books","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.27"},{"title":" Lost In A Good Book","video":"videos/module11/21 - Lost In A Good Book.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.28"},{"title":"Quiz","question":"import java.util.ArrayList;\r\npublic class BookListDemo\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<String> booksToRead = new ArrayList<String>();\r\n\r\n        booksToRead.add(\"The Eyre Affair by Jasper Fforde\");\r\n        booksToRead.add(\"Night Watch by Terry Pratchett\");\r\n        booksToRead.add(\"Next by Michael Crichton\");\r\n        booksToRead.add(\"The Brain That Changes Itself by Norman Doidge\");\r\n        booksToRead.add(\"Effective Java by Joshua Bloch\");\r\n        booksToRead.add(\"The Visual Display of Quantitative Information by Edward R. Tufte\");\r\n\r\n        String anotherBook = \"Why zebras don't get ulcers by Robert M. Sapolsky\";\r\n        booksToRead.add(2, anotherBook);\r\n\r\n        String sequel = \"Lost in a Good Book by Jasper Fforde\";\r\n        // YOUR CODE HERE\r\n        // Replace The Eyre Affair with\r\n        // Lost in a Good Book\r\n        // you can use the variable sequel that I defined above.\r\n\r\n        // Please don't modify the following line:\r\n        System.out.println(booksToRead);\r\n    }\r\n}\r\n","classname":"BookListDemo","expectedoutput":"","programtype":"stdin","type":"program","qid":"16.29"},{"title":" Lost In A Good Book","video":"videos/module11/22 - Lost","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.30"},{"title":" Lost In A Good Book 2","video":"videos/module11/23 - Lost In A Good Book 2.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.31"},{"title":"Quiz","question":"import java.util.ArrayList;\r\npublic class BookListDemo\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<String> booksToRead = new ArrayList<String>();\r\n\r\n        booksToRead.add(\"The Eyre Affair by Jasper Fforde\");\r\n        booksToRead.add(\"Night Watch by Terry Pratchett\");\r\n        booksToRead.add(\"Next by Michael Crichton\");\r\n        booksToRead.add(\"The Brain That Changes Itself by Norman Doidge\");\r\n        booksToRead.add(\"Effective Java by Joshua Bloch\");\r\n        booksToRead.add(\"The Visual Display of Quantitative Information by Edward R. Tufte\");\r\n\r\n        String anotherBook = \"Why zebras don't get ulcers by Robert M. Sapolsky\";\r\n        booksToRead.add(2, anotherBook);\r\n\r\n        String sequel = \"Lost in a Good Book by Jasper Fforde\";\r\n        booksToRead.set(0, sequel);\r\n\r\n        // YOUR CODE HERE\r\n        // Take Why Zebras Don't Get Ulcers off the list of books to read.\r\n        // Note, it may have moved from its original index.\r\n\r\n        // Please don't modify the following line:\r\n        System.out.println(booksToRead);\r\n    }\r\n}\r\n","classname":"BookListDemo","expectedoutput":"","programtype":"stdin","type":"program","qid":"16.32"},{"title":" Lost In A Good Book 2","video":"videos/module11/24 - Lost","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.33"},{"title":" Array Algorithms Sum Over All Elements","video":"videos/module11/25 - Array Algorithms Sum Over All Elements.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.34"},{"title":"Quiz","question":"// BlueJ project: lesson7/gallery5\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class ListOfPictures\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<Picture> gallery = new ArrayList<Picture>();\r\n        gallery.add(new Picture(\"degas1.jpg\"));\r\n        gallery.add(new Picture(\"gaugin1.jpg\"));\r\n        gallery.add(new Picture(\"monet1.jpg\"));\r\n        gallery.add(new Picture(\"monet2.jpg\"));\r\n        gallery.add(new Picture(\"renoir1.jpg\"));\r\n        \r\n        // Your code here\r\n\r\n        System.out.println(\"Sum of widths: \" + sum);\r\n    }\r\n}\r\n","classname":"ListOfPictures","expectedoutput":"","programtype":"stdin","type":"program","qid":"16.35"},{"title":" Array Algorithms Sum Over All Elements","video":"videos/module11/26 - Array","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.36"},{"title":" Array Algorithms Max and Min","video":"videos/module11/27 - Array Algorithms Max and Min.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.37"},{"title":"Quiz - Array Algorithms Max and Min","question":"// BlueJ project: lesson7/gallery6\r\n\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\npublic class ListOfPictures6\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<Picture> gallery = new ArrayList<Picture>();\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures6//degas1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures6//gaugon1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures6//gaugin1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures6//monet1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures6//seurat1.jpg\"));\r\n        // Your code here\r\n        Picture tallest = gallery.get(0);\r\n        for (int i = 0; i < gallery.size(); i++)\r\n        {\r\n            Picture pic = gallery.get(i);\r\n            if (pic.getHeight() > tallest.getHeight())\r\n            {\r\n                tallest = pic;\r\n            }\r\n        }\r\n        tallest.draw();\r\n        Picture picture = new Picture();\r\n        picture.snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\n","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\ListOfPictures6.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"ListOfPictures6","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"16.38"},{"title":" Array Algorithms Max and Min","video":"videos/module11/28 - Array","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.39"},{"title":" Array Algorithms Count Matches","video":"videos/module11/29 - Array Algorithms Count Matches.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.40"},{"title":"Quiz","question":"// BlueJ project: lesson7/gallery7\r\n//Find the number of pictures in the ArrayList whose height is bigger than their width (portrait pictures)\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class ListOfPictures\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<Picture> gallery = new ArrayList<Picture>();\r\n        gallery.add(new Picture(\"degas1.jpg\"));\r\n        gallery.add(new Picture(\"gaugin1.jpg\"));\r\n        gallery.add(new Picture(\"monet1.jpg\"));\r\n        gallery.add(new Picture(\"monet2.jpg\"));\r\n        gallery.add(new Picture(\"renoir1.jpg\"));\r\n        \r\n        // Your code here\r\n        \r\n        System.out.println(\"Pictures with portrait orientation: \" + count);\r\n    }\r\n}\r\n","classname":"ListOfPictures","expectedoutput":"","programtype":"stdin","type":"program","qid":"16.41"},{"title":" Array Algorithms Count Matches","video":"videos/module11/30 - Array","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.42"},{"title":" Array Algorithms Find the First Match","video":"videos/module11/31 - Array Algorithms Find the First Match.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.43"},{"title":"Quiz - Array Algorithms Find the First Match","question":"// BlueJ project: lesson7/gallery8\r\n\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\npublic class ListOfPictures8\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<Picture> gallery = new ArrayList<Picture>();\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures8//degas1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures8//gaugin1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures8//monet1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures8//monet2.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures8//renoir1.jpg\"));\r\n\r\n        int i = 0;\r\n        boolean found = false;\r\n        while ()\r\n        {\r\n        }\r\n\r\n        if (found)\r\n        {\r\n        }\r\n        \r\n        Picture picture = new Picture();\r\n        picture.snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\n","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\ListOfPictures8.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"ListOfPictures8","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"16.44"},{"title":" Array Algorithms Find the First Match","video":"videos/module11/32 - Array","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.45"},{"title":" Array Algorithms Find All Matches","video":"videos/module11/33 - Array Algorithms Find All Matches.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.46"},{"title":"Quiz - Array Algorithms Find All Matches","question":"// BlueJ project: lesson7/gallery9\r\n\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\npublic class ListOfPictures9\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<Picture> gallery = new ArrayList<Picture>();\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures9//degas1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures9//monet1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures9//monet2.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures9//renoir1.jpg\"));\r\n        gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures9//seurat1.jpg\"));\r\n\r\n        ArrayList<Picture> matches = new ArrayList<Picture>();\r\n        for (Picture pic : gallery)\r\n        {\r\n            if (pic.getHeight() > pic.getWidth())\r\n            {\r\n                matches.add(pic);\r\n            }\r\n        }\r\n\r\n        int rightmostX = 0;\r\n        for (Picture pic : matches)\r\n        {\r\n            pic.translate(rightmostX + 10, 0);\r\n            rightmostX = pic.getMaxX();\r\n            pic.draw();\r\n        }\r\n        Picture picture = new Picture();\r\n        picture.snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\n","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\ListOfPictures9.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"ListOfPictures9","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"16.47"},{"title":" Array Algorithms Find All Matches","video":"videos/module11/34 - Array","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.48"},{"title":" Separators","video":"videos/module11/35 - Separators.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.49"},{"title":"Quiz","question":"import java.util.ArrayList;\r\n\r\npublic class Person\r\n{\r\n    private String name;\r\n    private ArrayList<String> friends;\r\n\r\n    public Person(String name)\r\n    {\r\n        this.name = name;\r\n        friends = new ArrayList<String>();\r\n    }\r\n\r\n    /**\r\n     * Adds the given friend to this Person's friends list.\r\n     * @param friend the friend to add.\r\n     */\r\n    public void addFriend(Person friend)\r\n    {\r\n        friends.add(friend.name);\r\n    }\r\n\r\n    /**\r\n     * Gets a list of all of this Person's friends.\r\n     * @return the names of the friends separated by a comma and a space.\r\n     *     e.g. \"Sara, Cheng-Han, Cay\"\r\n     */\r\n    public String getFriends()\r\n    {\r\n        String friendsWithBrackets = friends.toString();\r\n        return friendsWithBrackets.substring(1, friendsWithBrackets.length() - 1);\r\n    }\r\n\r\n    /**\r\n     * Returns the names of the friends with separator between them.\r\n     * @param separator string to put between names.\r\n     * @return the names of the friends.\r\n     */\r\n    public String getFriends(String separator)\r\n    {\r\n        // TODO:\r\n        // Create a string with all the names separated by separator.\r\n        // make sure that there is not an extra trailing separator.\r\n        // If my friends are Cay and Cheng-Han, and the separator is #\r\n        // It should print\r\n        // Cay#Cheng-Han\r\n        // not\r\n        // Cay#Cheng-Han#\r\n    }\r\n\r\n    /**\r\n     * Gets the number of friends this Person has.\r\n     * @return the number of friends.\r\n     */\r\n    public int getNumFriends()\r\n    {\r\n        return friends.size();\r\n    }\r\n\r\n    /**\r\n     * Gets the ith friend.\r\n     * @param i the index of the friend you want to get.\r\n     * @return the ith friend's name.\r\n     */\r\n    public String getFriend(int i)\r\n    {\r\n        return friends.get(i);\r\n    }\r\n}\r\n","classname":"Person","expectedoutput":"","programtype":"stdin","type":"program","qid":"16.50"},{"title":" Separators","video":"videos/module11/36 - Separators.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.51"},{"title":" Unfriend Revisited","video":"videos/module11/37 - Unfriend Revisited.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.52"},{"title":"Quiz","question":"// TODO\r\n// Refactor the code to store an ArrayList of Person objects,\r\n// in the list of friends (instead of just storing the names\r\n// of the friends);\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Person\r\n{\r\n    private String name;\r\n    private ArrayList<String> friends;\r\n\r\n    public Person(String name)\r\n    {\r\n        this.name = name;\r\n        friends = new ArrayList<String>();\r\n    }\r\n\r\n    /**\r\n     * Adds the given friend to this Person's friends list.\r\n     * @param friend the friend to add.\r\n     */\r\n    public void addFriend(Person friend)\r\n    {\r\n        friends.add(friend.name);\r\n    }\r\n\r\n    /**\r\n     * Gets a list of all of this Person's friends.\r\n     * @return the names of the friends separated by a comma and a space.\r\n     *     e.g. \"Sara, Cheng-Han, Cay\"\r\n     */\r\n    public String getFriends()\r\n    {\r\n        String friendsWithBrackets = friends.toString();\r\n        return friendsWithBrackets.substring(1, friendsWithBrackets.length() - 1);\r\n    }\r\n\r\n    /**\r\n     * Returns the names of the friends with separator between them.\r\n     * @param separator string to put between names.\r\n     * @return the names of the friends.\r\n     */\r\n    public String getFriends(String separator)\r\n    {\r\n        String separatedFriends = \"\";\r\n        if (friends.size() > 0)\r\n        {\r\n            separatedFriends = separatedFriends + friends.get(0);\r\n        }\r\n        for (int i = 1; i < friends.size(); i++)\r\n        {\r\n            separatedFriends = separatedFriends + separator + friends.get(i);\r\n        }\r\n        return separatedFriends;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of friends this Person has.\r\n     * @return the number of friends.\r\n     */\r\n    public int getNumFriends()\r\n    {\r\n        return friends.size();\r\n    }\r\n}\r\n","classname":"Person","expectedoutput":"","programtype":"stdin","type":"program","qid":"16.53"},{"title":" Unfriend Revisited","video":"videos/module11/38 - Unfriend","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.54"},{"title":" Another Way to Implement Get Friends","video":"videos/module11/39 - Another Way to Implement Get Friends.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.55"},{"title":" Implementing Unfriend","video":"videos/module11/40 - Implementing Unfriend.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.56"},{"title":"Quiz","question":"// Implement the unfriend method.\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Person\r\n{\r\n    private String name;\r\n    private ArrayList<Person> friends;\r\n\r\n    public Person(String name)\r\n    {\r\n        this.name = name;\r\n        friends = new ArrayList<Person>();\r\n    }\r\n\r\n    /**\r\n     * Adds the given friend to this Person's friends list.\r\n     * @param friend the friend to add.\r\n     */\r\n    public void addFriend(Person friend)\r\n    {\r\n        friends.add(friend);\r\n    }\r\n\r\n    /**\r\n     * Removes nonFriend from the list of friends.\r\n     * @param nonFriend the friend to remove\r\n     */\r\n    public void unfriend(Person nonFriend)\r\n    {\r\n        // YOUR CODE HERE\r\n        // Implement the unfriend method.\r\n        // you can use the find(Person friend) method to get\r\n        // the index of a friend (Code below).\r\n\r\n    }\r\n\r\n    /**\r\n     * Finds friend in the friends list\r\n     * @param a person to search for\r\n     * @return -1 if the person is not found. The index of the person otherwise.\r\n     */\r\n    public int find(Person friend)\r\n    {\r\n        for (int i = 0; i < friends.size(); i++)\r\n        {\r\n            if (friends.get(i).equals(friend))\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n        // If the person is not found by the end of the friends list\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of all of this Person's friends.\r\n     * @return the names of the friends separated by a comma and a space.\r\n     *     e.g. \"Sara, Cheng-Han, Cay\"\r\n     */\r\n    public String getFriends()\r\n    {\r\n        return getFriends(\", \");\r\n    }\r\n\r\n    /**\r\n     * Returns the names of the friends with separator between them.\r\n     * @param separator string to put between names.\r\n     * @return the names of the friends.\r\n     */\r\n    public String getFriends(String separator)\r\n    {\r\n        String separatedFriends = \"\";\r\n        if (friends.size() > 0)\r\n        {\r\n            separatedFriends = separatedFriends + friends.get(0).name;\r\n        }\r\n        for (int i = 1; i < friends.size(); i++)\r\n        {\r\n            separatedFriends = separatedFriends + separator + friends.get(i).name;\r\n        }\r\n        return separatedFriends;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of friends this Person has.\r\n     * @return the number of friends.\r\n     */\r\n    public int getNumFriends()\r\n    {\r\n        return friends.size();\r\n    }\r\n}\r\n","classname":"Person","expectedoutput":"","programtype":"stdin","type":"program","qid":"16.57"},{"title":" Implementing Unfriend","video":"videos/module11/41 - Implementing","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.58"},{"title":" Talk To","video":"videos/module11/42 - Talk To.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.59"},{"title":"Quiz","question":"// Implement the talkTo method\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Person\r\n{\r\n    private String name;\r\n    private ArrayList<Person> friends;\r\n\r\n    public Person(String name)\r\n    {\r\n        this.name = name;\r\n        friends = new ArrayList<Person>();\r\n    }\r\n\r\n    /**\r\n     * When a person talks to some one, if that person is already\r\n     * a friend, they move to the front of the list. Otherwise nothing\r\n     * changes.\r\n     * @param the person to potentially move to the front of the friends list.\r\n     */\r\n    public void talkTo(Person person)\r\n    {\r\n        // YOUR CODE HERE\r\n        // Move person to the front of the list if they\r\n        // are already in it.\r\n        // Make sure that they won't appear twice in the list.\r\n        // Don't change the friends list if the person is not already in it.\r\n    }\r\n\r\n    /**\r\n     * Adds the given friend to this Person's friends list.\r\n     * @param friend the friend to add.\r\n     */\r\n    public void addFriend(Person friend)\r\n    {\r\n        friends.add(friend);\r\n    }\r\n\r\n    /**\r\n     * Removes nonFriend from the list of friends.\r\n     * @param nonFriend the friend to remove\r\n     */\r\n    public void unfriend(Person nonFriend)\r\n    {\r\n        int nonFriendIndex = find(nonFriend);\r\n        if (nonFriendIndex != -1)\r\n        {\r\n            friends.remove(nonFriendIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Finds friend in the friends list\r\n     * @param a person to search for\r\n     * @return -1 if the person is not found. The index of the person otherwise.\r\n     */\r\n    public int find(Person friend)\r\n    {\r\n        for (int i = 0; i < friends.size(); i++)\r\n        {\r\n            if (friends.get(i).equals(friend))\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n        // If the person is not found by the end of the friends list\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of all of this Person's friends.\r\n     * @return the names of the friends separated by a comma and a space.\r\n     *     e.g. \"Sara, Cheng-Han, Cay\"\r\n     */\r\n    public String getFriends()\r\n    {\r\n        return getFriends(\", \");\r\n    }\r\n\r\n    /**\r\n     * Returns the names of the friends with separator between them.\r\n     * @param separator string to put between names.\r\n     * @return the names of the friends.\r\n     */\r\n    public String getFriends(String separator)\r\n    {\r\n        String separatedFriends = \"\";\r\n        if (friends.size() > 0)\r\n        {\r\n            separatedFriends = separatedFriends + friends.get(0).name;\r\n        }\r\n        for (int i = 1; i < friends.size(); i++)\r\n        {\r\n            separatedFriends = separatedFriends + separator + friends.get(i).name;\r\n        }\r\n        return separatedFriends;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of friends this Person has.\r\n     * @return the number of friends.\r\n     */\r\n    public int getNumFriends()\r\n    {\r\n        return friends.size();\r\n    }\r\n}\r\n","classname":"Person","expectedoutput":"","programtype":"stdin","type":"program","qid":"16.60"},{"title":" Talk To","video":"videos/module11/43 - Talk","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.61"},{"title":" Removing Mean Friends","video":"videos/module11/44 - Removing Mean Friends.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.62"},{"title":" Is This Code Correct","video":"videos/module11/45 - Is This Code Correct.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.63"},{"title":"Quiz","question":"<img height='100%' width='100%' src='images/lesson7/codecorrect.jpg'><input style='position:absolute; top:55%; left:12%;' name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><input style='position:absolute; top:60.5%; left:12%;' name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><input style='position:absolute; top:68%; left:12%;' name='option' value='c' id=\"quizinput3\" type=\"radio\"></input>","answer":["05"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.64"},{"title":" Is This Code Correct","video":"videos/module11/46 - Is","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.65"},{"title":" Implementing Removing Mean Friends","video":"videos/module11/47 - Implementing Removing Mean Friends.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.66"},{"title":"Quiz","question":"// Implement the removeMeanFriends method\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Person\r\n{\r\n    private String name;\r\n    private ArrayList<Person> friends;\r\n\r\n    public Person(String name)\r\n    {\r\n        this.name = name;\r\n        friends = new ArrayList<Person>();\r\n    }\r\n\r\n    /**\r\n     * When a person talks to someone, if that person is already\r\n     * a friend, they move to the front of the list. Otherwise nothing\r\n     * changes.\r\n     * @param the person to potentially move to the front of the friends list.\r\n     */\r\n    public void talkTo(Person person)\r\n    {\r\n        int oldIndex = find(person);\r\n        if (oldIndex != -1)\r\n        {\r\n            friends.remove(oldIndex);\r\n            friends.add(0, person);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds the given friend to this Person's friends list.\r\n     * @param friend the friend to add.\r\n     */\r\n    public void addFriend(Person friend)\r\n    {\r\n        friends.add(friend);\r\n    }\r\n\r\n    /**\r\n     * Removes nonFriend from the list of friends.\r\n     * @param nonFriend the friend to remove\r\n     */\r\n    public void unfriend(Person nonFriend)\r\n    {\r\n        int nonFriendIndex = find(nonFriend);\r\n        if (nonFriendIndex != -1)\r\n        {\r\n            friends.remove(nonFriendIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes unrequited friendships. All Persons who do not have this\r\n     * Person as a friend, are removed from this Person's friend list.\r\n     */\r\n    public void removeMeanFriends()\r\n    {\r\n        // YOUR CODE HERE\r\n        // Remove all the friends who don't have you as a friend.\r\n        // You may want to use the find method.\r\n    }\r\n\r\n    /**\r\n     * Finds friend in the friends list\r\n     * @param a person to search for\r\n     * @return -1 if the person is not found. The index of the person otherwise.\r\n     */\r\n    public int find(Person friend)\r\n    {\r\n        for (int i = 0; i < friends.size(); i++)\r\n        {\r\n            if (friends.get(i).equals(friend))\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n        // If the person is not found by the end of the friends list\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of all of this Person's friends.\r\n     * @return the names of the friends separated by a comma and a space.\r\n     *     e.g. \"Sara, Cheng-Han, Cay\"\r\n     */\r\n    public String getFriends()\r\n    {\r\n        return getFriends(\", \");\r\n    }\r\n\r\n    /**\r\n     * Returns the names of the friends with separator between them.\r\n     * @param separator string to put between names.\r\n     * @return the names of the friends.\r\n     */\r\n    public String getFriends(String separator)\r\n    {\r\n        String separatedFriends = \"\";\r\n        if (friends.size() > 0)\r\n        {\r\n            separatedFriends = separatedFriends + friends.get(0).name;\r\n        }\r\n        for (int i = 1; i < friends.size(); i++)\r\n        {\r\n            separatedFriends = separatedFriends + separator + friends.get(i).name;\r\n        }\r\n        return separatedFriends;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of friends this Person has.\r\n     * @return the number of friends.\r\n     */\r\n    public int getNumFriends()\r\n    {\r\n        return friends.size();\r\n    }\r\n}\r\n","classname":"Person","expectedoutput":"","programtype":"stdin","type":"program","qid":"16.67"},{"title":" Implementing Removing Mean Friends","video":"videos/module11/48 - Implementing","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"16.68"}]},"17":{"title":"Problem Set 6","lessons":[{"title":"Short Problem #1","question":"<img src='images/Problem Set 6/6.1.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["259cc691385d71632415c702feec0ec5f35f85b8d5f3c96134f415789b9e39428c4a91dabf81855c8dac2e2ab807c78de058"],"type":"quiz","tips":"","qid":"17.1"},{"title":"Short Problem #2","question":"<img src='images/Problem Set 6/6.2.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["148fd89535657d3e314de045d1ec1094a101b691f4ae86"],"type":"quiz","tips":"","qid":"17.2"},{"title":"Short Problem #3","question":"<img src='images/Problem Set 6/6.3.jpg' alt='image'><br><h4>Color color = &nbsp;<input class='input-lg' id=\"quizinput1\" type=\"text\"></input> &nbsp; ;</h4>","answer":["148fd89535657d3e374cf045aaaa55"],"type":"quiz","tips":"","qid":"17.3"},{"title":"Short Problem #4 Vertical Pictures","question":"//\r\n// Complete the given class to display the picture object vertically\r\n// (rather than horizontally).\r\n// You can find the pictures required in the bluej project\r\n//\r\n\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\npublic class ListOfVerticalPictures\r\n{\r\n   public static void main(String[] args)\r\n   {\r\n      ArrayList<Picture> gallery = new ArrayList<Picture>();\r\n      gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//degas1.jpg\"));\r\n      gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//gaugin1.jpg\"));\r\n      gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//monet1.jpg\"));\r\n      gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//monet2.jpg\"));\r\n      gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//renoir1.jpg\"));\r\n\r\n      // your code goes here\r\n      // TODO Write the code to display the pictures vertically\r\n     \r\n      Picture picture = new Picture();\r\n      picture.snapshot();\r\n      CheckOutput out = new CheckOutput();\r\n      out.compareOutput();\r\n    System.exit(0); \r\n   }\r\n}\r\n","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\ListOfVerticalPictures.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"ListOfVerticalPictures","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"17.4"},{"title":"Short Problem #5","question":"<img src='images/Problem Set 6/6.5.jpg' alt='image'><br><h4>int size = &nbsp;<input class='input-lg' id=\"quizinput1\" type=\"text\"></input>&nbsp; ;</h4>","answer":["148fd89535657d3e2340fe08baaa"],"type":"quiz","tips":"","qid":"17.5"},{"title":"Short Problem #6","question":"<img src='images/Problem Set 6/6.6.jpg' alt='image'><br><h4>Color color = &nbsp;<input class='input-lg' id=\"quizinput1\" type=\"text\"></input>&nbsp; ;</h4>","answer":["148fd89535657d3c374cf045e2e2109ea75b81fac3eec7613ce01827d7"],"type":"quiz","tips":"","qid":"17.6"},{"title":"Short Problem #7","question":"//\r\n// Complete the given class to shift the first picture (the one at index 0)\r\n// to the end of the array list and  display the pictures object in the modified list\r\n// horizontally as was done in the lesson.\r\n// You can find the pictures required in in the bluej project\r\n//\r\n\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\npublic class ShiftFirstToEnd\r\n{\r\n   public static void main(String[] args)\r\n   {\r\n      ArrayList<Picture> gallery = new ArrayList<Picture>();\r\n      gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//degas1.jpg\"));\r\n      gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//gaugin1.jpg\"));\r\n      gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//monet1.jpg\"));\r\n      gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//monet2.jpg\"));\r\n      gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//renoir1.jpg\"));\r\n\r\n      // TODO Write code to shift the first picture (the one at index 0)\r\n      // to the end of the array list and  display the pictures object in the modified list\r\n      // horizontally\r\n      gallery.add(gallery.size(), gallery.get(0));\r\n      gallery.remove(0);\r\n      int previousX = 10;\r\n      for(Picture pic : gallery) {\r\n          pic.translate(previousX, 0);\r\n          previousX = pic.getMaxX() + 10;\r\n          pic.draw();\r\n      }\r\n      Picture picture = new Picture();\r\n      picture.snapshot();\r\n      CheckOutput out = new CheckOutput();\r\n      out.compareOutput();\r\n    System.exit(0); \r\n   }\r\n}\r\n","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\ShiftFirstToEnd.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"ShiftFirstToEnd","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"17.7"},{"title":"Short Problem #8","question":"//\r\n// Complete the given class to display the last picture in the array list\r\n// The required pictures are in the Blluej project\r\n//\r\n\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\npublic class DisplayLastPictures\r\n{\r\n   public static void main(String[] args)\r\n   {\r\n      ArrayList<Picture> gallery = new ArrayList<Picture>();\r\n      gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//degas1.jpg\"));\r\n      gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//gaugin1.jpg\"));\r\n      gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//monet1.jpg\"));\r\n      gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//monet2.jpg\"));\r\n      gallery.add(new Picture(\"resources//courseware//programs//ListOfPictures//renoir1.jpg\"));\r\n\r\n      // TODO display the last picture in the array list\r\n      // your code goes here\r\n      \r\n      Picture picture = new Picture();\r\n      picture.snapshot();\r\n      CheckOutput out = new CheckOutput();\r\n      out.compareOutput();\r\n    System.exit(0); \r\n   }\r\n}\r\n","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\DisplayLastPictures.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"DisplayLastPictures","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"17.8"},{"title":"Short Problem #9","question":"<img src='images/Problem Set 6/6.9.jpg' alt='image'><br><h4>int index = &nbsp;<input class='input-lg' id=\"quizinput1\" type=\"text\"></input>&nbsp; ;</h4>","answer":[""],"type":"quiz","tips":"","qid":"17.9"},{"title":"Short Problem #10","question":"<img src='images/Problem Set 6/6.10.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["3fafda9e6d52797c0d"],"type":"quiz","tips":"","qid":"17.10"},{"title":"Short Problem #11","question":"// Complete this class to do the following.\n// 1. Define and create an ArrayList of Strings called animals\n// 2. Add the string \"ape\"\n// 3. Add the string \"dog\"\n// 4. Add the string \"horse\"\n// 5. print the arraylist\n\nimport java.util.Scanner;\nimport java.util.ArrayList;\n\npublic class AddTester\n{\n    public static void main(String[] args)\n    {\n        // TODO: Define and create an ArrayList of Strings called animals\n\n        // TODO: Add the strings \"ape\", \"dog\", \"horse\"\n\n        System.out.println(animals);\n        System.out.println(\"Expected: [ape, dog, horse]\");\n    }\n}\n\n","classname":"AddTester","expectedoutput":"[ape, dog, horse]\r\nExpected: [ape, dog, horse]\r\n","input":"[ape, dog, horse]\r\nExpected: [ape, dog, horse]\r\n","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"17.11"},{"title":"Short Problem #12","question":"// Complete this class. An array list of Strings called cities has been defined\n// for you and partially populated. Add code to do the following:\n// 1. Add the string \"New York so that it is first in the arraylist\n// 2. replace the string \"Dallas\" (should be at index 2. Don't search) with \"Houston\"\n// 3. remove last element in the list\n// 4. print the arraylist\n\nimport java.util.ArrayList;\n\npublic class ArrayListMethodTester\n{\n    public static void main(String[] args)\n    {\n        ArrayList<String> cities = new ArrayList<String>();\n        cities.add(\"Chicago\");\n        cities.add(\"Dallas\");\n        cities.add(\"San Jose\");\n        cities.add(\"Seattle\");\n\n        // TODO: Add code for steps 1-4 above\n\n        // TODO: Print the arraylist\n        System.out.println(\"Expected: [New York, Chicago, Houston, San Jose]\");\n    }\n}\n\n","classname":"ArrayListMethodTester","expectedoutput":"[New York, Chicago, Houston, San Jose]\r\nExpected: [New York, Chicago, Houston, San Jose]\r\n","input":"[New York, Chicago, Houston, San Jose]\r\nExpected: [New York, Chicago, Houston, San Jose]\r\n","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"17.12"},{"title":"Short Problem #13","question":"// Complete this class. An array list of Strings called cities has been defined\n// for you and populated. You are to print the elements, one to a line (please \n// use a for loop). Afterwards, print the element at index 2.\n\nimport java.util.ArrayList;\n\npublic class GetAndLoopDemo\n{\n    public static void main(String[] args)\n    {\n        ArrayList<String> cities = new ArrayList<String>();\n        cities.add(\"Chicago\");\n        cities.add(\"Dallas\");\n        cities.add(\"San Jose\");\n        cities.add(\"Seattle\");\n\n        // TODO: Use a loop to print the elements one to a line\n        // TODO: Print the element at index 2\n\n    }\n}\n\n","classname":"GetAndLoopDemo","input":"Chicago\r\nDallas\r\nSan Jose\r\nSeattle\r\nSan Jose\r\n","testcases":"Chicago\nDallas\nSan Jose\nSeattle\nSan Jose\n","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"17.13"},{"title":"Short Problem #14","question":"// Complete the method in this class to find the average length of the words in an\n// array list of strings and return it. The average length of words is sometimes used\n// as a simple measure of reading difficulty.\n// Note that you want to keep the fractional part of the average\n// Hint: If you do not know where to start, look at the ArrayList Algorithms to find\n// an appropriate one.\n\nimport java.util.ArrayList;\n\npublic class StringArrays\n{\n    public double averageCountPerWord(ArrayList<String> words)\n    {\n        double average = 0;\n        double count = 0.0; //defined as double so we do double division\n\n        // TODO: Find the total number of characters in all the words\n\n        // TODO: Calculate the average\n        if (....) //supply the condition\n        {\n            //your code here\n        }\n\n        return average;\n    }\n}\n\n","classname":"StringArrays","expectedoutput":"","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"17.14"},{"title":"Short Problem #15","question":"// Complete the method in this class to compute and return the shortest string\n// (the one with the fewest characters)\n// HINT: You can use the ArrayList algorithm for finding the minimum\n\nimport java.util.ArrayList;\n\npublic class StringArrayUtil\n{\n    public String shortestString(ArrayList<String> words)\n    {\n        // TODO: initialize the string to the hold the shortest string\n        String shortest = ... //initialize\n\n        // TODO: Write the code to find the shortest string\n\n        return shortest;\n    }\n}\n\n","classname":"StringArrayUtil","testcases":"","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"17.15"},{"title":"Short Problem #16","question":"// Complete the method in the class to print the elements in the array list in reverse order,\n// one to a line.\n// HINT: Use a for loop. Start with i = last index and work backwards.\n\nimport java.util.ArrayList;\n\npublic class ReversePrinter\n{\n    /**\n     * prints the array list in reverse order, one to a line\n     * @param text the array list to print\n     */\n     public void reversePrint(ArrayList<String> text)\n     {\n         // TODO: Write the code to print the elements in the array list in reverse order,\n         // one to a line.\n     }\n}\n\n","classname":"ReversePrinter","expectedoutput":"","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"17.16"},{"title":"Short Problem #17","question":"// Complete the method in this class to print the length of each string\n// all on one line separated by spaces.\n\nimport java.util.ArrayList;\n\npublic class ArrayListUtil\n{\n    /**\n     * prints length of each string in the arraylist all on one line\n     * @param text the array list to process\n     */\n     public void getLengths(ArrayList<String> text)\n     {\n         // TODO: Use a loop to print the length of each string all on one line\n         // separated by spaces\n     }\n}\n\n","classname":"ArrayListUtil","expectedoutput":"","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"17.17"},{"title":"Short Problem #18","question":"// Complete the method in this class to return the number of strings\n// that start with the target\n\nimport java.util.ArrayList;\n\npublic class Counter\n{\n    /**\n     * Gets the number of strings that starts with the target\n     * @param text the array list to process\n     * @param target the desired letter\n     * @return the count of strings starting with target\n     */\n     public int getCount(ArrayList<String> text, String target)\n     {\n         // TODO: Adapt an ArrayList algorithm to return the number of Strings that\n         // start within the target\n     }\n}\n\n","classname":"Counter","expectedoutput":"","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"17.18"},{"title":"Short Problem #19","question":"// Complete the method in this class to return the index of the first string\n// that starts with the target. Return -1 if no string starts with the target\n\nimport java.util.ArrayList;\n\npublic class Finder\n{\n    /**\n     * Gets the index of the first String that starts with the target\n     * @param text the array list to process\n     * @param target the desired letter\n     * @return the index of first string starting with target or -1 if not found\n     */\n     public int getIndex(ArrayList<String> text, String target)\n     {\n         int i = 0;\n         int index = -1;\n         boolean found = false;\n         while (...) //supply condition\n         {\n             // TODO: Adapt an ArrayList algorithm to return the index of the first\n             // string that start with the target\n             // TODO: Return -1 if no string starts with the target\n         }\n         return index;\n     }\n}\n\n","classname":"Finder","expectedoutput":"","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"17.19"},{"title":"Short Problem #20","question":"// Complete the method in this class to return the first string that starts\n// with the target. Return null if no string starts with the target.\n\nimport java.util.ArrayList;\n\npublic class StringFinder\n{\n    /**\n     * Gets the first String that starts with the target\n     * @param text the array list to process\n     * @param target the desired letter\n     * @return the first string starting with target or null if not found\n     */\n     public String getTarget(ArrayList<String> text, String target)\n     {\n         int i = 0;\n         String startsWith = null;\n         boolean found = false;\n         while (...) //supply condition\n         {\n             //your code goes here\n         }\n         return startsWith;\n     }\n}\n\n","classname":"StringFinder","expectedoutput":"","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"17.20"},{"title":"Question #1","question":"//Complete the class ArrayListMethods. It consists of four short methods\n//to manipulate an array list of strings. The method header and javadoc\n//are given to you.\n\n// Need help starting this question? In the lesson titled \n// \"Starting points: Problem Set Questions\", go to the\n// problem titled \"Problem Set 6 - Question 1\" for some tips on \n// how to begin.\n\nimport java.util.ArrayList;\n\npublic class ArrayListMethods\n{\n    ArrayList<String> list; //instance variable\n    /**\n     * Constructor for objects of class ArrayListMethods\n     */\n    public ArrayListMethods(ArrayList<String> arrayList)\n    {\n        // initialise instance variables\n        list = arrayList;\n    }\n\n    /**\n     * Determines if the array list is sorted (do not sort)\n     * When Strings are sorted, they are in alphabetical order\n     * Use the compareTo method to determine which string comes first\n     * You can look at the String compareTo method in the Java API\n     * @return true if the array list is sorted else false.\n     */\n    public boolean isSorted()\n    {\n        boolean sorted = true;\n\n        // TODO: Determine if the array is sorted.\n\n        return sorted;\n    }\n\n    /**\n     * Replaces all but the first and last elements with the larger of its two neighbors\n     * You can use the compareTo() method to determine which string is larger (larger in alphabetical\n     * order).\n     * Example: if the list is originally\n     *    [\"cat\", \"ape\", \"dog\", \"horse\", \"zebra\"]\n     * after this method it should be: \n     *    [\"cat\", \"dog\", \"horse\", \"zebra\", \"zebra\"]\n     */\n    public void replaceWithLargerNeighbor()\n    {\n\n        // TODO: Replace all but the first and last elements with the larger of its two neighbors\n\n    }\n\n    /**\n     * Gets the number of duplicates in the list.\n     * Be careful to only count each duplicate once. Start at index 0. (Does it match any of the other elements?)\n     * Get the next word. It is at index i. (Does it match any of the words with index > i?)\n     * @return the number of duplicate words in the list\n     */\n    public int countDuplicates()\n    {\n        int duplicates = 0;\n\n        // TODO: Write the code to get the number of duplicates in the list\n\n        return duplicates;\n    }\n\n     /**\n     * Moves any word that starts with x, y, or z to the front of the ArrayList, but\n     * otherwise preserves the order\n     * Example: if the list is orginially\n     *   [\"ape\", \"dog\", \"xantus\", \"zebra\", \"cat\", \"yak\"]\n     * after this method is called it should be\n     *   [\"xantus\", \"zebra\", \"yak\", \"ape\", \"dog\", \"cat\"]\n     */\n    public void xyzToFront()\n    {\n        int insertAt = 0;\n\n        // TODO:  Move any word that starts with x, y, or z to the front of the ArrayList, but otherwise preserves the order\n\n    }\n\n    /**\n     * gets the string representation of this array list\n     * @returns the string representation of this array list in\n     * standard collection format\n     */\n    public String toString()\n    {\n        return list.toString();\n    }\n}\n\n","classname":"ArrayListMethods","expectedoutput":"","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"17.21"},{"title":"Question #2","question":"//Complete the class TripPlan which describes the cities that are visited by a tour conducted\n//by Java Now Tours. Keep an arraylist of cities (just the string name). Have methods to add a \n//city, remove a city, to return the names of the cities in a String, and to reverse the order \n//of the elements in the array list.\n\n//Notice that the reverse method is void.\n\n// Need help starting this question? In the lesson titled \n// \"Starting points: Problem Set Questions\", go to the\n// problem titled \"Problem Set 6 - Question 2\" for some tips on \n// how to begin.\n\nimport java.util.ArrayList;\n\n/**\n * A TripPlan represents a trip and holds a collection of city names.\n */\npublic class TripPlan\n{\n    // TODO: add instance variable here\n\n    /**\n     * Constructs an empty trip.\n     */\n    public TripPlan()\n    {\n        // TODO: Initialize the instance variable\n    }\n\n    /**\n     * Add a city to the list.\n     * @param cityName the city to add\n     */\n    public void addCity(String cityName)\n    {\n        // TODO: Write code to add a city to the array list instance variable\n    }\n\n    /**\n     * Returns a string describing the object.\n     * @return a string in the format \"TripPlan[cityName1,cityName2,...]\"\n     */\n    public String toString()\n    {\n\n        return ...\n    }\n\n    /**\n     * Removes a city form the this trip\n     * @param cityName city to remove\n     */\n    public void removeCity(String cityName)\n    {\n        // TODO: Write code to remove a city to the array list instance variable\n    }\n\n    /**\n     * Reverses the elements in the itinerary.\n     */\n    public void reverse()\n    {\n\n    }\n}\n\n","classname":"TripPlan","expectedoutput":"","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"17.22"},{"title":"Question 3 - BlockTower","question":"//Create a Polygon class. A polygon is a closed shape with lines joining the corner points.\r\n//You will keep the points in an array list. Use object of java.awt.Point for the point.\r\n\r\n//Polygon will have as an instance variable an ArrayList of Points to hold the points\r\n//The constructor takes no parameters but initializes the instance variable\r\n//\r\n//The add method adds a Point to the polygon\r\n//\r\n//The perimeter method returns the perimeter of the polygon\r\n//\r\n//The draw method draws the polygon by connecting consecutive points and then\r\n//connecting the last point to the first.\r\n//\r\n//No methods headers or javadoc is provided this time. You get to try your hand at writing a class almost from scratch\r\n//\r\n//For the draft, finish the constructor.\r\n//Have the perimeter method return 0 and have the draw mwthod draw a\r\n//line from point 0, 0 to point 30, 40\r\n//\r\n\r\nimport java.util.ArrayList;\r\nimport java.awt.Point;\r\npublic class Polygon\r\n{\r\n    // TODO: provide the required constructor, instance variable, and methods\r\n    ArrayList<Point> points;\r\n\r\n    public Polygon() {\r\n        points = new ArrayList<Point>();\r\n    }\r\n\r\n    public double perimeter()\r\n    {\r\n        double peri = 0.0;\r\n        double sideLength = 0.0;\r\n        int i = 0;\r\n        int m = points.size() - 1;\r\n        for (i = 0; i < m ; i++)\r\n        {\r\n            sideLength = Math.sqrt( Math.pow(points.get(i).getX() - points.get(i + 1).getX(), 2) + Math.pow(points.get(i).getY() - points.get(i + 1).getY(), 2) );\r\n            peri+= sideLength;\r\n        }\r\n        double lastSideLength = Math.sqrt( Math.pow(points.get(0).getX() - points.get(m).getX(), 2) + Math.pow(points.get(0).getY() - points.get(m).getY(), 2) );\r\n        peri = peri + lastSideLength;\r\n\r\n        return peri;\r\n    }\r\n\r\n    public void draw()\r\n    {\r\n        Point first, second;\r\n\r\n        for(int i = 0; i < points.size() - 1; i++)\r\n        {\r\n            first = points.get(i);\r\n            second = points.get(i+1);\r\n\r\n            Line line = new Line(first.getX(), first.getY(), second.getX(), second.getY());\r\n            line.draw();\r\n        }\r\n\r\n        first = points.get(0);\r\n        second = points.get(points.size() - 1);\r\n        Line line = new Line(first.getX(), first.getY(), second.getX(), second.getY());\r\n        line.draw();\r\n    }\r\n\r\n    public void add(Point newPoint) {\r\n        points.add(newPoint);\r\n    }\r\n}\r\n","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\Polygon.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"Polygon","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"17.23"}]},"18":{"title":"ArrayLists and Arrays","lessons":[{"title":" Arrays","video":"videos/module12/01 - Arrays.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.1"},{"title":" Array Elements","video":"videos/module12/02 - Array Elements.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.2"},{"title":" First Five Primes","video":"videos/module12/03 - First Five Primes.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.3"},{"title":"First Five Primes","question":"<img src='images/lesson7/First Five Primes.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0d80c0ab1c3168623944e11eaff84ed7e003d1f887ab8c3569f2"],"type":"quiz","tips":"","qid":"18.4"},{"title":" First Five Primes","video":"videos/module12/4 - First","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.5"},{"title":" Modifying the Array","video":"videos/module12/05 - Modifying the Array.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.6"},{"title":"Modifying the Array","question":"<img src='images/lesson7/Modifying the Array.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["56c287dc743d2b3c62"],"type":"quiz","tips":"","qid":"18.7"},{"title":" Modifying the Array","video":"videos/module12/6 - Modifying","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.8"},{"title":" Put 10 in the First and Last Spaces","video":"videos/module12/07 - Put 10 in the First and Last Spaces.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.9"},{"title":"Quiz","question":"<img  src='images/lesson7/Put 10 in the First and Last Spaces.jpg'> <br/><textarea rows=6 cols=10 id=\"quizinput1\" type=\"textarea\"></textarea>","answer":["128fd885246243200d14b55da9890a9abf5a81a7ebf1dc6861ac4638928c77648a50dd92aed5c7188a"],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.10"},{"title":" Put 10 in the First and Last Spaces","video":"videos/module12/8 - Put","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.11"},{"title":" Array of Strings","video":"videos/module12/09 - Array of Strings.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.12"},{"title":"Array of Strings","question":"<img src='images/lesson7/Array of Strings.jpg' alt='image'><br><input class='input-md' id=\"quizinput1\" type=\"text\">&nbsp;&nbsp;<input class='input-md' id=\"quizinput2\" type=\"text\"></input>","answer":["379ac6992f76434d705eeb1ff6f04195b658c487c4f5d46a73920426a3d2","379ac6992f76434d705eeb1ff6f04180f15681a792ab9f6a7beb482d"],"type":"quiz","tips":"","qid":"18.13"},{"title":" Array of Strings","video":"videos/module12/10 - Array","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.14"},{"title":" Enhanced For Loop","video":"videos/module12/11 - Enhanced For Loop.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.15"},{"title":"Enhanced For Loop","question":"<img src='images/lesson7/Enhanced For Loop.jpg' alt='image'><br><br><form class='form-horizontal'><div class='form-group text-left' style='margin-left:155px'><input style='position:absolute; top:27%; left:44%;' type='checkbox' class='Checkboxinput' value='a'><input style='position:absolute; top:52%; left:44%;' type='checkbox' class='Checkboxinput' value='b'><input style='position:absolute; top:41%; left:90%;' type='checkbox' class='Checkboxinput' value='c'></div></form>","answer":["05"],"type":"quiz","tips":"","qid":"18.16"},{"title":" Enhanced For Loop","video":"videos/module12/12 - Enhanced","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.17"},{"title":" Arrays or ArrayLists","video":"videos/module12/13 - Arrays or ArrayLists.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.18"},{"title":" Partially Filled Arrays","video":"videos/module12/14 - Partially Filled Arrays.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.19"},{"title":" Homework Scores","video":"videos/module12/15 - Homework Scores.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.20"},{"title":" Homework Scores Continued","video":"videos/module12/16 - Homework Scores Continued.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.21"},{"title":" Read Scores","video":"videos/module12/17 - Read Scores.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.22"},{"title":"Quiz","question":"// BlueJ project: lesson7/scores1\r\n\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Holds the homework scores for a student.\r\n */\r\npublic class HomeworkScores\r\n{\r\n    private double[] scores;\r\n    private int currentSize; // The currentSize of the array of scores.\r\n\r\n    /**\r\n     * @param maxScores the maximum number of scores this object can hold.\r\n     */\r\n    public HomeworkScores(int maxScores)\r\n    {\r\n        scores = new double[maxScores];\r\n        currentSize = 0;\r\n    }\r\n\r\n    public void readScores(Scanner userInput)\r\n    {\r\n        // YOUR CODE HERE\r\n        // Read (userInput) scores between 0 and 100 until a non number is entered.\r\n        // Use the scanner passed in in the argument userInput.\r\n        // Save each score that is read in the partially filled scores array.\r\n        // Make sure not to lose track of how filled the array is.\r\n    }\r\n\r\n    /**\r\n     * Builds an easy-to-read description of the scores in the object.\r\n     * @return A description of the scores.\r\n     */\r\n    public String toString()\r\n    {\r\n        return Arrays.toString(Arrays.copyOf(scores, currentSize));\r\n    }\r\n}\r\n","classname":"HomeworkScores","expectedoutput":"","programtype":"stdin","type":"program","qid":"18.23"},{"title":" Read Scores","video":"videos/module12/18 - Read","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.24"},{"title":" Sum Scores","video":"videos/   module12/19 - Sum Scores.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.25"},{"title":"Quiz","question":"// BlueJ project: lesson7/scores2\r\n\r\n// Implement the sumScores Method.\r\n\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Holds the homework scores for a student.\r\n */\r\npublic class HomeworkScores\r\n{\r\n    private double[] scores;\r\n    private int currentSize; // The currentSize of the array of scores.\r\n\r\n    /**\r\n     * @param maxScores the maximum number of scores this object can hold.\r\n     */\r\n    public HomeworkScores(int maxScores)\r\n    {\r\n        scores = new double[maxScores];\r\n        currentSize = 0;\r\n    }\r\n\r\n    /**\r\n     * Calculates the Sum of all the scores entered.\r\n     * @return the sum of all the scores in scores.\r\n     */\r\n    public double sumScores()\r\n    {\r\n        // YOUR CODE HERE\r\n        // Sum all the scores that have been entered so far and\r\n        // return the result.\r\n        return 0;\r\n    }\r\n\r\n    public void readScores(Scanner userInput)\r\n    {\r\n        while (userInput.hasNextDouble())\r\n        {\r\n            double nextScore = userInput.nextDouble();\r\n            scores[currentSize] = nextScore;\r\n            currentSize++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds an easy-to-read description of the scores in the object.\r\n     * @return A description of the scores.\r\n     */\r\n    public String toString()\r\n    {\r\n        return Arrays.toString(Arrays.copyOf(scores, currentSize));\r\n    }\r\n}\r\n","classname":"HomeworkScores","expectedoutput":"","programtype":"stdin","type":"program","qid":"18.26"},{"title":" Sum Scores","video":"videos/   module12/20 - Sum","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.27"},{"title":" Average Scores","video":"videos/module12/21 - Average Scores.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.28"},{"title":"Quiz","question":"// BlueJ project: lesson7/scores3\r\n\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Holds the homework scores for a student.\r\n */\r\npublic class HomeworkScores\r\n{\r\n    private double[] scores;\r\n    private int currentSize; // The currentSize of the array of scores.\r\n\r\n    /**\r\n     * @param maxScores the maximum number of scores this object can hold.\r\n     */\r\n    public HomeworkScores(int maxScores)\r\n    {\r\n        scores = new double[maxScores];\r\n        currentSize = 0;\r\n    }\r\n\r\n    /**\r\n     * Calculates the average of all the scores collected so far.\r\n     * @return the average of the scores in scores.\r\n     */\r\n    public double averageScore()\r\n    {\r\n        // TODO: Calculate the average score.\r\n        // Add up all the scores and divide by the number of scores.\r\n        // return the result.\r\n        return 0;\r\n    }\r\n\r\n    public void readScores(Scanner userInput)\r\n    {\r\n        while (userInput.hasNextDouble())\r\n        {\r\n            double nextScore = userInput.nextDouble();\r\n            scores[currentSize] = nextScore;\r\n            currentSize++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates the sum of all the scores entered.\r\n     * @return the sum of all the scores in scores.\r\n     */\r\n    public double sumScores()\r\n    {\r\n        double sum = 0;\r\n        for (int i = 0; i < currentSize; i++)\r\n        {\r\n            sum = sum + scores[i];\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    /**\r\n     * Builds an easy-to-read description of the scores in the object.\r\n     * @return A description of the scores.\r\n     */\r\n    public String toString()\r\n    {\r\n        return Arrays.toString(Arrays.copyOf(scores, currentSize));\r\n    }\r\n}\r\n","classname":"HomeworkScores","expectedoutput":"","programtype":"stdin","type":"program","qid":"18.29"},{"title":" Average Scores","video":"videos/module12/22 - Average","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.30"},{"title":" Inserting and Removing Arrays","video":"videos/module12/23 - Inserting and Removing Arrays.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.31"},{"title":" Inserting and Removing Arrays Continued","video":"videos/module12/24 - Inserting and Removing Arrays Continued.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.32"},{"title":"Inserting and Removing Arrays Continued","question":"<img src='images/lesson7/Inserting and Removing Arrays Continued.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["55de"],"type":"quiz","tips":"","qid":"18.33"},{"title":" Inserting and Removing Arrays Continued","video":"videos/module12/25 - Inserting","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.34"},{"title":" Removing Lowest Score","video":"videos/module12/26 - Removing Lowest Score.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.35"},{"title":"Quiz","question":"// BlueJ project: lesson7/scores4\r\n\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Holds the homework scores for a student.\r\n */\r\npublic class HomeworkScores\r\n{\r\n    private double[] scores;\r\n    private int currentSize; // The currentSize of the array of scores.\r\n\r\n    /**\r\n     * @param maxScores the maximum number of scores this object can hold.\r\n     */\r\n    public HomeworkScores(int maxScores)\r\n    {\r\n        scores = new double[maxScores];\r\n        currentSize = 0;\r\n    }\r\n\r\n    public void readScores(Scanner userInput)\r\n    {\r\n        while (userInput.hasNextDouble())\r\n        {\r\n            double nextScore = userInput.nextDouble();\r\n            scores[currentSize] = nextScore;\r\n            currentSize++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes the lowest score.\r\n     */\r\n    public void removeLowest()\r\n    {\r\n        // YOUR CODE HERE\r\n        // Remove the lowest score.\r\n        // You can use any of the other methods in this class.\r\n    }\r\n\r\n    /**\r\n     * Finds the first occurrence of the given score.\r\n     * @param searchedValue the score to look for\r\n     * @return the position of scoreToFind, -1 if it's not there\r\n     */\r\n    public int find(double searchedValue)\r\n    {\r\n        int pos = 0;\r\n        boolean found = false;\r\n        while (pos < currentSize && !found)\r\n        {\r\n            if (scores[pos] == searchedValue)\r\n            {\r\n                found = true;\r\n            }\r\n            else\r\n            {\r\n                pos++;\r\n            }\r\n        }\r\n        if (found)\r\n        {\r\n            return pos;\r\n        }\r\n        else\r\n        {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the lowest of the scores.\r\n     * @return the lowest score\r\n     */\r\n    public double lowScore()\r\n    {\r\n        double lowestSoFar = scores[0];\r\n        for (int i = 1; i < currentSize; i++)\r\n        {\r\n            if (scores[i] < lowestSoFar)\r\n            {\r\n                lowestSoFar = scores[i];\r\n            }\r\n        }\r\n        return lowestSoFar;\r\n    }\r\n\r\n    /**\r\n     * Removes the score at the given position.\r\n     * @param pos the position of the value to remove.\r\n     */\r\n    public void remove(int pos)\r\n    {\r\n        for (int i = pos + 1; i < currentSize; i++)\r\n        {\r\n            scores[i - 1] = scores[i];\r\n        }\r\n        currentSize--;\r\n    }\r\n\r\n    /**\r\n     * Builds an easy-to-read description of the scores in the object.\r\n     * @return A description of the scores.\r\n     */\r\n    public String toString()\r\n    {\r\n        return Arrays.toString(Arrays.copyOf(scores, currentSize));\r\n    }\r\n}\r\n","classname":"HomeworkScores","expectedoutput":"","programtype":"stdin","type":"program","qid":"18.36"},{"title":" Removing Lowest Score","video":"videos/module12/27 - Removing","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.37"},{"title":" Find Lowest Scoring Position","video":"videos/module12/28 - Find Lowest Scoring Position.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.38"},{"title":"Quiz","question":"// BlueJ project: lesson7/scores5\r\n\r\n// Implement the sumAfterRemovingMinScore method more efficiently\r\n// by implementing a getLowScoreIndex method which is used in removeLowest\r\n\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Holds the homework scores for a student.\r\n */\r\npublic class HomeworkScores\r\n{\r\n    private double[] scores;\r\n    private int currentSize; // The currentSize of the array of scores.\r\n\r\n    /**\r\n     * @param maxScores the maximum number of scores this object can hold.\r\n     */\r\n    public HomeworkScores(int maxScores)\r\n    {\r\n        scores = new double[maxScores];\r\n        currentSize = 0;\r\n    }\r\n\r\n    /**\r\n     * Removes the lowest score.\r\n     */\r\n    public void removeLowest()\r\n    {\r\n        int lowScoreIndex = getLowScoreIndex();\r\n        remove(lowScoreIndex);\r\n    }\r\n\r\n    /**\r\n     * Finds the index of the lowest score.\r\n     * @return the index of the lowest score.\r\n     */\r\n    public int getLowScoreIndex()\r\n    {\r\n        // TODO: Find and return the index of the lowest score in scores.\r\n    }\r\n\r\n    public void readScores(Scanner userInput)\r\n    {\r\n        while (userInput.hasNextDouble())\r\n        {\r\n            double nextScore = userInput.nextDouble();\r\n            scores[currentSize] = nextScore;\r\n            currentSize++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Finds the first occurrence of the given score.\r\n     * @param searchedValue the score to look for\r\n     * @return the position of scoreToFind, -1 if it's not there\r\n     */\r\n    public int find(double searchedValue)\r\n    {\r\n        int pos = 0;\r\n        boolean found = false;\r\n        while (pos < currentSize && !found)\r\n        {\r\n            if (scores[pos] == searchedValue)\r\n            {\r\n                found = true;\r\n            }\r\n            else\r\n            {\r\n                pos++;\r\n            }\r\n        }\r\n        if (found)\r\n        {\r\n            return pos;\r\n        }\r\n        else\r\n        {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the lowest of the scores.\r\n     * @return the lowest score\r\n     */\r\n    public double lowScore()\r\n    {\r\n        double lowestSoFar = scores[0];\r\n        for (int i = 1; i < currentSize; i++)\r\n        {\r\n            if (scores[i] < lowestSoFar)\r\n            {\r\n                lowestSoFar = scores[i];\r\n            }\r\n        }\r\n        return lowestSoFar;\r\n    }\r\n\r\n    /**\r\n     * Removes the score at the given position.\r\n     * @param pos the position of the value to remove.\r\n     */\r\n    public void remove(int pos)\r\n    {\r\n        for (int i = pos + 1; i < currentSize; i++)\r\n        {\r\n            scores[i - 1] = scores[i];\r\n        }\r\n        currentSize--;\r\n    }\r\n\r\n    /**\r\n     * Builds an easy-to-read description of the scores in the object.\r\n     * @return A description of the scores.\r\n     */\r\n    public String toString()\r\n    {\r\n        return Arrays.toString(Arrays.copyOf(scores, currentSize));\r\n    }\r\n}\r\n","classname":"HomeworkScores","expectedoutput":"","programtype":"stdin","type":"program","qid":"18.39"},{"title":" Find Lowest Scoring Position","video":"videos/module12/29 - Find","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.40"},{"title":" Can We Streamline More","video":"videos/module12/30 - Can We Streamline More.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.41"},{"title":" Discovering  Algorithms","video":"videos/module12/01 - Discovering  Algorithms.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.42"},{"title":" Swapping Halves","video":"videos/module12/02 - Swapping Halves.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.43"},{"title":"Quiz","question":"// BlueJ project: lesson7/swapHalves\r\n\r\n//Reminder: Here is how you swap two elements:\r\n//int saved = elements[i];\r\n//elements[i] = elements[j];\r\n//elements[j] = saved;\r\n\r\nimport java.util.Arrays;\r\n\r\npublic class SwapHalves\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        int[] elements = { 1, 4, 9, 7, 3, 2, 5, 11, 0, 9 };\r\n\r\n        // TODO: Swap the first and second half\r\n\r\n        // Print all elements\r\n        System.out.println(Arrays.toString(elements));\r\n    }\r\n}\r\n","classname":"SwapHalves","expectedoutput":"","programtype":"stdin","type":"program","qid":"18.44"},{"title":" Swapping Halves","video":"videos/module12/3 - Swapping","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.45"},{"title":" 2-D Arrays Part 1","video":"videos/module12/04 - 2-D Arrays Part 1.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.46"},{"title":" 2-D Arrays Part 2","video":"videos/module12/05 - 2-D Arrays Part 2.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.47"},{"title":" 2-D Arrays Part 3","video":"videos/module12/06 - 2-D Arrays Part 3.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.48"},{"title":" Neighbors","video":"videos/module12/07 - Neighbors.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.49"},{"title":"Quiz - Neighbors","question":"// BlueJ project: lesson7/blocks\r\n\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\npublic class Blocks\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Picture pic = new Picture(\"eiffel-tower.jpg\");\r\n        int[][] pixels = pic.getGrayLevels();\r\n        \r\n        // TODO:\r\n        // 1) Update the for loops below with the correct conditions\r\n        // 2) Update the indices that we are using to access the 2D-array\r\n        //    pixels, so we are using the correct elements from pixels\r\n        \r\n        for (int i = 0; ...; i = i + 2)\r\n        {\r\n            for (int j = 0; ...; ...)\r\n            {\r\n                int avg = (pixels[i][j] + pixels[...][...]\r\n                    + pixels[...][...] + pixels[...][...]) / 4;\r\n                pixels[...][...] = avg;\r\n                pixels[...][...] = avg;\r\n                pixels[...][...] = avg;\r\n                pixels[...][...] = avg;                \r\n            }\r\n        }\r\n        \r\n        // You need not to change this below part\r\n        pic.draw();\r\n        Picture pic2 = new Picture(pixels);\r\n        pic2.translate(pic.getWidth() + 10, 0);\r\n        pic2.draw();\r\n        Picture picture = new Picture();\r\n        picture.snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\blocks.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"blocks","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"18.50"},{"title":" Neighbors","video":"videos/module12/8 - Neighbors.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.51"},{"title":" Two Dimensional Arrays","video":"videos/module12/09 - Two Dimensional Arrays.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.52"},{"title":" Total Score for One Student","video":"videos/module12/10 - Total Score for One Student.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.53"},{"title":"Quiz","question":"//BlueJ project: lesson7/gradebook1\r\n\r\nimport java.io.FileReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Arrays;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class GradeBook\r\n{\r\n    private ArrayList<String> students;\r\n    private int numStudents;\r\n    private ArrayList<String> topics;\r\n    private int numTopics;\r\n    private double[][] grades;\r\n\r\n    public GradeBook(String file)\r\n    {\r\n        students = new ArrayList<String>();\r\n        topics = new ArrayList<String>();\r\n        readScoresFromFile(file);\r\n    }\r\n\r\n    /**\r\n     * Adds up all the scores for one student and returns the result.\r\n     * Only works for a valid student index.\r\n     * @param studentIndex the row for the student whose total you want.\r\n     * @return the sum of that student's scores, or -1 if the index is bad.\r\n     */\r\n    public double totalForStudent(int studentIndex)\r\n    {\r\n        //TODO: Return the total of all the scores for the student in row studentIndex\r\n        return 0;\r\n    }\r\n\r\n    //This method reads the scores from the file. Don't look inside.\r\n    private void readScoresFromFile(String file)\r\n    {\r\n        try\r\n        {\r\n            Scanner in = new Scanner(new FileReader(file));\r\n            Scanner firstLineScanner = new Scanner(in.nextLine());\r\n            while (firstLineScanner.hasNext())\r\n            {\r\n                students.add(firstLineScanner.next());\r\n            }\r\n            Scanner secondLineScanner = new Scanner(in.nextLine());\r\n            while (secondLineScanner.hasNext())\r\n            {\r\n                topics.add(secondLineScanner.next());\r\n            }\r\n\r\n            numStudents = students.size();\r\n            numTopics = topics.size();\r\n            grades = new double[numStudents][numTopics];\r\n            for (int i = 0; i < numStudents; i++)\r\n            {\r\n                for (int j = 0; j < numTopics; j++)\r\n                {\r\n                    grades[i][j] = in.nextDouble();\r\n                }\r\n            }\r\n        }\r\n        catch (FileNotFoundException e)\r\n        {\r\n            System.out.println(\"File not found: \" + file);\r\n        }\r\n    }\r\n}\r\n","classname":"GradeBook","expectedoutput":"","programtype":"stdin","type":"program","qid":"18.54"},{"title":" Total Score for One Student","video":"videos/module12/11 - Total","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.55"},{"title":" total score for all students","video":"videos/module12/12 - total score for all students.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.56"},{"title":"Quiz","question":"//BlueJ project: lesson7/gradebook2\r\n\r\nimport java.io.FileReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Arrays;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class GradeBook\r\n{\r\n    private ArrayList<String> students;\r\n    private int numStudents;\r\n    private ArrayList<String> topics;\r\n    private int numTopics;\r\n    private double[][] grades;\r\n\r\n    public GradeBook(String file)\r\n    {\r\n        students = new ArrayList<String>();\r\n        topics = new ArrayList<String>();\r\n        readScoresFromFile(file);\r\n    }\r\n\r\n    /**\r\n     * Adds up all the scores for one student and returns the result.\r\n     * Only works for a valid student index.\r\n     * @param studentIndex the row for the student whose total you want.\r\n     * @return the sum of that student's scores, or -1 if the index is bad.\r\n     */\r\n    public double totalForStudent(int studentIndex)\r\n    {\r\n        if (studentIndex < 0 || studentIndex >= numStudents)\r\n        {\r\n            return -1;\r\n        }\r\n        double sum = 0;\r\n        for (int j=0; j < numTopics; j++)\r\n        {\r\n            sum = sum + grades[studentIndex][j];\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    /**\r\n     * Calculates the totals for all the students and returns the results\r\n     * in a completely filled array.\r\n     * @return a filled array of the total for each student.\r\n     */\r\n    public double[] totalsForAllStudents()\r\n    {\r\n        //TODO: implement this method.\r\n    }\r\n\r\n    //This method reads the scores from the file. Don't look inside.\r\n    private void readScoresFromFile(String file)\r\n    {\r\n        try\r\n        {\r\n            Scanner in = new Scanner(new FileReader(file));\r\n            Scanner firstLineScanner = new Scanner(in.nextLine());\r\n            while (firstLineScanner.hasNext())\r\n            {\r\n                students.add(firstLineScanner.next());\r\n            }\r\n            Scanner secondLineScanner = new Scanner(in.nextLine());\r\n            while (secondLineScanner.hasNext())\r\n            {\r\n                topics.add(secondLineScanner.next());\r\n            }\r\n\r\n            numStudents = students.size();\r\n            numTopics = topics.size();\r\n            grades = new double[numStudents][numTopics];\r\n            for (int i = 0; i < numStudents; i++)\r\n            {\r\n                for (int j = 0; j < numTopics; j++)\r\n                {\r\n                    grades[i][j] = in.nextDouble();\r\n                }\r\n            }\r\n        }\r\n        catch (FileNotFoundException e)\r\n        {\r\n            System.out.println(\"File not found: \" + file);\r\n        }\r\n    }\r\n}\r\n","classname":"GradeBook","expectedoutput":"","programtype":"stdin","type":"program","qid":"18.57"},{"title":" total score for all students","video":"videos/module12/13 - total","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.58"},{"title":" how well did i teach","video":"videos/module12/14 - how well did i teach.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.59"},{"title":"Quiz","question":"//BlueJ project: lesson7/gradebook3\r\n\r\nimport java.io.FileReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Arrays;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class GradeBook\r\n{\r\n    private ArrayList<String> students;\r\n    private int numStudents;\r\n    private ArrayList<String> topics;\r\n    private int numTopics;\r\n    private double[][] grades;\r\n\r\n    public GradeBook(String file)\r\n    {\r\n        students = new ArrayList<String>();\r\n        topics = new ArrayList<String>();\r\n        readScoresFromFile(file);\r\n    }\r\n\r\n    /**\r\n     * Adds up all the scores for one student and returns the result.\r\n     * Only works for a valid student index.\r\n     * @param studentIndex the row for the student whose total you want.\r\n     * @return the sum of that student's scores, or -1 if the index is bad.\r\n     */\r\n    public double totalForStudent(int studentIndex)\r\n    {\r\n        if (studentIndex < 0 || studentIndex >= numStudents)\r\n        {\r\n            return -1;\r\n        }\r\n        double sum = 0;\r\n        for (int j=0; j < numTopics; j++)\r\n        {\r\n            sum = sum + grades[studentIndex][j];\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    /**\r\n     * Calculates the totals for all the students and returns the results\r\n     * in a completely filled array. The order of the totals matches the\r\n     * order of the names in studentNames.\r\n     * @return a filled array of the total for each student.\r\n     */\r\n    public double[] totalsForAllStudents()\r\n    {\r\n        double[] totals = new double[numStudents];\r\n        for (int student = 0; student < numStudents; student++)\r\n        {\r\n            totals[student] = totalForStudent(student);\r\n        }\r\n        return totals;\r\n    }\r\n\r\n    /**\r\n     * Calculates the column totals (the sum of of all students'\r\n     * scores for one topic) for all topics in a completely filled array.\r\n     * The order of the topcs matches the order of the topic names in\r\n     * topicNames.\r\n     * @return a filled array of the total for each topic.\r\n     */\r\n    public double[] totalsForAllTopics()\r\n    {\r\n        //TODO: implement the totalsForAllTopics method.\r\n    }\r\n\r\n    //This method reads the scores from the file. Don't look inside.\r\n    private void readScoresFromFile(String file)\r\n    {\r\n        try\r\n        {\r\n            Scanner in = new Scanner(new FileReader(file));\r\n            Scanner firstLineScanner = new Scanner(in.nextLine());\r\n            while (firstLineScanner.hasNext())\r\n            {\r\n                students.add(firstLineScanner.next());\r\n            }\r\n            Scanner secondLineScanner = new Scanner(in.nextLine());\r\n            while (secondLineScanner.hasNext())\r\n            {\r\n                topics.add(secondLineScanner.next());\r\n            }\r\n\r\n            numStudents = students.size();\r\n            numTopics = topics.size();\r\n            grades = new double[numStudents][numTopics];\r\n            for (int i = 0; i < numStudents; i++)\r\n            {\r\n                for (int j = 0; j < numTopics; j++)\r\n                {\r\n                    grades[i][j] = in.nextDouble();\r\n                }\r\n            }\r\n        }\r\n        catch (FileNotFoundException e)\r\n        {\r\n            System.out.println(\"File not found: \" + file);\r\n        }\r\n    }\r\n}\r\n","classname":"GradeBook","expectedoutput":"","programtype":"stdin","type":"program","qid":"18.60"},{"title":" how well did i teach","video":"videos/module12/15 - how","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.61"},{"title":" generating detailed comments","video":"videos/module12/16 - generating detailed comments.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.62"},{"title":"generating detailed comments","question":"// BlueJ Project: Lesson7/GradeBook4\r\n    \r\nimport java.io.FileReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Arrays;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\nclass GradeBook\r\n{\r\n    private ArrayList<String> students;\r\n    private int numStudents;\r\n    private ArrayList<String> topics;\r\n    private int numTopics;\r\n    private double[][] grades;\r\n\r\n    public GradeBook(String file)\r\n    {\r\n        students = new ArrayList<String>();\r\n        topics = new ArrayList<String>();\r\n        readScoresFromFile(file);\r\n    }\r\n    \r\n    public String teacherCommentForStudent(int studentIndex)\r\n    {\r\n        // YOUR CODE HERE\r\n        // What would a personalized comment look like for the student\r\n        // at studentIndex? \r\n        // You can use the students instance variable to get the student\r\n        // names, for example: \r\n        String studentName = students.get(studentIndex);\r\n        // You can use the topics variable to get the topic names, for example\r\n        String firstTopic = topics.get(0);\r\n        \r\n        // There are many right answers here so I won't try to grade you \r\n        // on this question. \r\n        // Check out GradeBookDemo.java (It is visible in the bluej project\r\n        // and visible in another tab in the Udacity IDE) to find out how the\r\n        // teacherCommentForStudent method is called. \r\n        \r\n        // When you test run this program, the GradeBookDemo will run\r\n        // and will print out student comments for three students. What do\r\n        // you think of the comments your program generated?\r\n        \r\n        // You can look at grades.txt to check that a comment makes sense\r\n        // for a student. The students names are listed first, \r\n        // then the topic names\r\n        // then the grades. \r\n        // Each row has one student's grades for each topic. \r\n        // The first row holds the first student's grades (in this case, the \r\n        // First student should be Tom). \r\n        \r\n        return studentName;\r\n    }\r\n\r\n    /**\r\n     * Adds up all the scores for one student and returns the result.\r\n     * Only works for a valid student index.\r\n     * @param studentIndex the row for the student whose total you want.\r\n     * @return the sum of that student's scores, or -1 if the index is bad.\r\n     */\r\n    public double totalForStudent(int studentIndex)\r\n    {\r\n        if (studentIndex < 0 || studentIndex >= numStudents)\r\n        {\r\n            return -1;\r\n        }\r\n        double sum = 0;\r\n        for (int j=0; j < numTopics; j++)\r\n        {\r\n            sum = sum + grades[studentIndex][j];\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    /**\r\n     * Calculates the totals for all the students and returns the results\r\n     * in a completely filled array. The order of the totals matches the\r\n     * order of the names in studentNames.\r\n     * @return a filled array of the total for each student.\r\n     */\r\n    public double[] totalsForAllStudents()\r\n    {\r\n        double[] totals = new double[numStudents];\r\n        for (int student = 0; student < numStudents; student++)\r\n        {\r\n            totals[student] = totalForStudent(student);\r\n        }\r\n        return totals;\r\n    }\r\n\r\n    /**\r\n     * Calculates the column totals (the sum of of all students'\r\n     * scores for one topic) for all topics in a completely filled array.\r\n     * The order of the topcs matches the order of the topic names in\r\n     * topicNames.\r\n     * @return a filled array of the total for each topic.\r\n     */\r\n    public double[] totalsForAllTopics()\r\n    {\r\n        double[] topicTotals = new double[numTopics];\r\n        for (int topic = 0; topic < numTopics; topic++)\r\n        {\r\n            double topicTotal = 0;\r\n            for (int student = 0; student < numStudents; student++)\r\n            {\r\n                topicTotal = topicTotal + grades[student][topic];\r\n            }\r\n            topicTotals[topic] = topicTotal;\r\n        }\r\n        return topicTotals;\r\n    }\r\n\r\n    // This method reads the scores from the file. Don't look inside.\r\n    private void readScoresFromFile(String file)\r\n    {\r\n        try\r\n        {\r\n            Scanner in = new Scanner(new FileReader(file));\r\n            Scanner firstLineScanner = new Scanner(in.nextLine());\r\n            while (firstLineScanner.hasNext())\r\n            {\r\n                students.add(firstLineScanner.next());\r\n            }\r\n            Scanner secondLineScanner = new Scanner(in.nextLine());\r\n            while (secondLineScanner.hasNext())\r\n            {\r\n                topics.add(secondLineScanner.next());\r\n            }\r\n\r\n            numStudents = students.size();\r\n            numTopics = topics.size();\r\n            grades = new double[numStudents][numTopics];\r\n            for (int i = 0; i < numStudents; i++)\r\n            {\r\n                for (int j = 0; j < numTopics; j++)\r\n                {\r\n                    grades[i][j] = in.nextDouble();\r\n                }\r\n            }\r\n        }\r\n        catch (FileNotFoundException e)\r\n        {\r\n            System.out.println(\"File not found: \" + file);\r\n        }\r\n    }\r\n}\r\n","testcases":"public class GradeBookDemo\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        GradeBook book = new GradeBook(\"grades.txt\");\r\n        String studentComment0 = book.teacherCommentForStudent(0);\r\n        String studentComment1 = book.teacherCommentForStudent(1);\r\n        String studentComment2 = book.teacherCommentForStudent(2);\r\n        \r\n        System.out.println(\"  Teacher comment for student 0: \");\r\n        System.out.println(studentComment0);\r\n        System.out.println(\"  Teacher comment for student 1: \");\r\n        System.out.println(studentComment1);\r\n        System.out.println(\"  Teacher comment for student 2: \");        \r\n        System.out.println(studentComment2);\r\n    }\r\n}\r\n","classname":"GradeBookDemo","programtype":"api","type":"program","qid":"18.63"},{"title":" generating detailed comments","video":"videos/module12/17 - generating","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"18.64"}]},"19":{"title":"Problem Set 7","lessons":[{"title":"Short problem 1 - Prices","question":"<img src='images/Problem Set 7/7.1.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0081c1922d74434d7059f604f1e60fc0"],"type":"quiz","tips":"","qid":"19.1"},{"title":"Short problem 2 -  Scores","question":"<img src='images/Problem Set 7/7.2.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0a8bc3d0287f6c4b6519d9"],"type":"quiz","tips":"","qid":"19.2"},{"title":"Short problem 3 -  How many elements can it hold","question":"<img src='images/Problem Set 7/7.3.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["55dc"],"type":"quiz","tips":"","qid":"19.3"},{"title":"Short problem 4 -   Initial value","question":"<img src='images/Problem Set 7/7.4.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["54"],"type":"quiz","tips":"","qid":"19.4"},{"title":"Short problem 5 -   Element at index 9","question":"<img src='images/Problem Set 7/7.5.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["108bd98024637964255be11ec9ba21"],"type":"quiz","tips":"","qid":"19.5"},{"title":"Short problem 6 -   First element","question":"<img src='images/Problem Set 7/7.6.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["178ddb82246243200d14bd58a9"],"type":"quiz","tips":"","qid":"19.6"},{"title":"Short problem 7 -   Prime Numbers","question":"<img src='images/Problem Set 7/7.7.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["1fdc98c36d2434272d"],"type":"quiz","tips":"","qid":"19.7"},{"title":"Short problem 8 - Array indices","question":"<img src='images/Problem Set 7/7.8.jpg' alt='image'><br><input class='input-md' id=\"quizinput1\" type=\"text\"></input>&nbsp;&nbsp;<input class='input-md' id=\"quizinput2\" type=\"text\"></input>","answer":["54","55df"],"type":"quiz","tips":"","qid":"19.8"},{"title":"Short problem 9 -   Array length","question":"<img src='images/Problem Set 7/7.9.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["178ddb822462367c3547e319fa"],"type":"quiz","tips":"","qid":"19.9"},{"title":"Short problem 10 -   Last element","question":"<img src='images/Problem Set 7/7.10.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["178ddb82246243633346f608e1ad109ebd4890bc9db6e0392df10e"],"type":"quiz","tips":"","qid":"19.10"},{"title":"Short problem 11 -   First element","question":"<img src='images/Problem Set 7/7.11.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["178ddb82246243200d"],"type":"quiz","tips":"","qid":"19.11"},{"title":"Short problem 12 -   What does it print","question":"<img src='images/Problem Set 7/7.12.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["55de85"],"type":"quiz","tips":"","qid":"19.12"},{"title":"Short problem 13 -   What does it print 2","question":"<img src='images/Problem Set 7/7.13.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["53d6"],"type":"quiz","tips":"","qid":"19.13"},{"title":"Short problem 14 -   Current Size","question":"<img src='images/Problem Set 7/7.14.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["079bc682247f6c433953e146b9"],"type":"quiz","tips":"","qid":"19.14"},{"title":"Short problem 15 -   Swapping","question":"<img src='images/Problem Set 7/7.15.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["108bd980"],"type":"quiz","tips":"","qid":"19.15"},{"title":"Short problem 18 -   Value of sum","question":"<img src='images/Problem Set 7/7.18.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["56db"],"type":"quiz","tips":"","qid":"19.16"},{"title":"Short problem 19 -   Value of total","question":"<img src='images/Problem Set 7/7.19.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["57da"],"type":"quiz","tips":"","qid":"19.17"},{"title":"Short problem 20 - Array processor","question":"// Complete the method to fill an int array with random integers between 0 and 100 (exclusive)\r\n//HINT: generate the random number using generator.nextInt(100)\r\n\r\nimport java.util.Random;\r\n\r\npublic class ArrayProcessor\r\n{\r\n    private Random generator;\r\n\r\n    //do not change the constructor\r\n    public ArrayProcessor()\r\n    {\r\n        generator = new Random();\r\n        generator.setSeed(1234); // do not change the seed\r\n    }\r\n\r\n    /**\r\n     * Fills the array with random integers between 0 and 100 (exclusive)\r\n     * @param values, the int[] that you need to fill with random integers\r\n     */\r\n    public void fill(int[] values)\r\n    {\r\n        // TODO: Write code to fill the array, values, with random numbers between 0 and 100(exclusive)\r\n    }\r\n}\r\n","classname":"ArrayProcessor","expectedoutput":"","programtype":"stdin","type":"program","qid":"19.18"},{"title":"Question 1","question":"// Complete the methods below. These methods manipulate Arrays of Strings\r\n\r\n// Need help starting this question? In the lesson titled \r\n// \"Starting points: Problem Set Questions\", go to the\r\n// problem titled \"Problem Set 7 - Question 1\" for some tips on \r\n// how to begin.\r\n\r\nimport java.util.Arrays;\r\nimport java.util.ArrayList;\r\nclass ArrayMethods\r\n{\r\n    String[] list; //instance variable\r\n    /**\r\n     * Constructor for objects of class ArrayMethods\r\n     */\r\n    public ArrayMethods(String[] list)\r\n    {\r\n        // initialise instance variables\r\n        this.list = list;\r\n    }\r\n\r\n    /**\r\n     * Determines if the array is sorted (do not sort)\r\n     * When Strings are sorted, they are in alphabetical order\r\n     * Use the compareTo method to determine which string comes first\r\n     * You can look at the String compareTo method in the Java API\r\n     * @return true if the array  is sorted, else false.\r\n     */\r\n    public boolean isSorted()\r\n    {\r\n        boolean sorted = true;\r\n\r\n        // TODO: Write the code to loop through the array and determine that each\r\n        // successive element is larger than the one before it\r\n\r\n        return sorted;\r\n    }\r\n\r\n    /**\r\n     * Replaces all but the first and last with the larger of its to neighbors\r\n     * You can use the compareTo to determine which string is larger (later in alphabetical\r\n     * order).\r\n     */\r\n    public void replaceWithLargerNeighbor()\r\n    {\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the number of duplicates in the array.\r\n     * (Be careful to only count each duplicate once. Start at index 0. Does it match any of the other element?\r\n     * Get the next word. It is at index i. Does it match any of the words with index > i?)\r\n     * @return the number of duplicate words in the array.\r\n     */\r\n    public int countDuplicates()\r\n    {\r\n        int duplicates = 0;\r\n\r\n        return duplicates;\r\n    }\r\n\r\n    /**\r\n     * Moves any word that starts with x, y, or z to the front of the array, but\r\n     * otherwise preserves the order\r\n     */\r\n    public void xyzToFront()\r\n    {\r\n        int insertAt = 0;\r\n\r\n    }\r\n\r\n    /**\r\n     * gets the string representation of this array \r\n     * @return a string representation of the array. (do this with Arrays.toString(list))\r\n     */\r\n    public String toString()\r\n    {\r\n        return list.toString();\r\n    }\r\n}\r\n","testcases":"\r\npublic class ArrayMethodsTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        //set up\r\n        String[] animals = {\"cat\", \"ape\", \"dog\", \"horse\", \"zebra\"};\r\n        ArrayMethods zoo = new ArrayMethods(animals);\r\n        \r\n        //test replaceWithLargerNeighbor\r\n        zoo.replaceWithLargerNeighbor();\r\n        System.out.println(zoo.toString());\r\n        System.out.println(\"Expected: [cat, dog, horse, zebra, zebra]\");\r\n        \r\n        //test count duplicates;\r\n        String[] animals2 = {\"cat\", \"cat\", \"dog\", \"horse\", \"zebra\", \"zebra\"};\r\n        zoo = new ArrayMethods(animals2);\r\n        System.out.println(zoo.countDuplicates());\r\n        System.out.println(\"Expected: 2\");\r\n       \r\n        String[] animals3 = {\"dog\", \"cat\", \"cat\", \"dog\", \"horse\", \"zebra\", \"zebra\"};\r\n        zoo = new ArrayMethods(animals3);\r\n        System.out.println(zoo.countDuplicates());\r\n        System.out.println(\"Expected: 3\");        \r\n        \r\n        String[] animals4 = {\"ape\", \"dog\", \"xantus\",  \"zebra\", \"cat\", \"yak\"};\r\n        zoo = new ArrayMethods(animals4);\r\n        zoo.xyzToFront();\r\n        System.out.println(zoo.toString());\r\n        System.out.println(\"Expected: [xantus, zebra, yak, ape, dog, cat]\");\r\n        \r\n    }\r\n}\r\n","classname":"ArrayMethodsTester","programtype":"api","type":"program","qid":"19.19"},{"title":"Question 2","question":"//We want to get the average temperature in Anchorage, Alaska, in\r\n//January and February, 1955. \r\n\r\n//But to get a better idea of the normal temperature, we will discard\r\n//the highest and lowest temeratures. The tester will get the temperatures\r\n//from this website:\r\n//http://academic.udayton.edu/kissock/http/Weather/gsod95-current/AKANCHOR.txt\r\n\r\n//It will put them into a double[]array that is passed to the constructor of\r\n//your class. You will complete the TemperatureNormalizer class below.\r\n\r\n//The TemperatureNormalizer class has a constructor that takes an array of\r\n//doubles as a parameter\r\n//public TemperatureNormalizer(double[] list)\r\n\r\n//It also has methods:\r\n//public double getAdjustedAverage() - gets the average minus the max and min\r\n//public double getMax()\r\n//public double getMin()\r\n//public double getSum()\r\n\r\n//Need help starting this question? In the lesson titled \r\n//\"Starting points: Problem Set Questions\", go to the\r\n//problem titled \"Problem Set 7 - Question 2\" for some tips on \r\n//how to begin.\r\n\r\n//Note: the tester uses code we have not covered to get the values from\r\n//the website. You can just ignore it and think of it as the plumbing that\r\n//gets you a double[]\r\n\r\npublic class TemperatureNormalizer\r\n{\r\n    private double[] data;\r\n\r\n   /**\r\n    * Constructs a TemperatureNormalizer with the given array\r\n    * @param the array to process\r\n    */\r\n    public TemperatureNormalizer(double[] list)\r\n    {\r\n        data = list;\r\n    }\r\n\r\n   /**\r\n    * Gets the adjusted average of the values in this array. The adjusted average\r\n    * is calculated by removing the highest and lowest values and calculating\r\n    * the average of the values that are left\r\n    * @return the adjusted average\r\n    */\r\n    public double getAdjustedAverage()\r\n    {\r\n        // TODO: find the adjusted average as described in the javadoc.\r\n        return 0;\r\n    }\r\n\r\n   /**\r\n    * Gets the maximum value in the array of doubles\r\n    * @return the maximum value\r\n    */\r\n    public double getMax()\r\n    {\r\n        // TODO: find the maximum value\r\n        return 0;\r\n    }\r\n\r\n   /**\r\n    * Gets the minimum value in the array of doubles\r\n    * @return the minimum value\r\n    */\r\n    public double getMin()\r\n    {\r\n        // TODO: find the minimum value\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the sum of the values in the array\r\n     * @return the sum of the values in the array\r\n     */\r\n    public double getSum()\r\n    {\r\n\r\n        // TODO find the sum\r\n\r\n        return 0;\r\n    }\r\n\r\n}\r\n","classname":"TemperatureNormalizer","expectedoutput":"","programtype":"stdin","type":"program","qid":"19.20"},{"title":"Question 3","question":"//This problem will use the same data as the previous one. This time you are\r\n//to complete the TemperatureDifferenceCalculator. It has two methods:\r\n\r\n//public double maxDifference() - Calculates the maximum difference between\r\n//any two consecutive days.\r\n\r\n//public double minDifference() - Calculates the minimum difference between\r\n//any two consecutive days\r\n\r\n//If Jan 7 temperature is 5 degrees and Jan 8 is -10 degrees, the difference\r\n//between the two temperatures is 15. Not that a temperature drop is simply\r\n//considered a 15 degree change. The difference is always the absolute value.\r\n//Assume that the days are in order in the array, so data[0] is the first day,\r\n//data[1] is the second day, and so on.\r\n\r\n//Need help starting this question? In the lesson titled \r\n//\"Starting points: Problem Set Questions\", go to the\r\n//problem titled \"Problem Set 7 - Question 3\" for some tips on \r\n//how to begin.\r\n\r\npublic class TemperatureDifferenceCalculator\r\n{\r\n    private double[] data;\r\n\r\n   /**\r\n    * Constructs a TemperatureDifferenceCalculator with the given array\r\n    * @param the array to process\r\n    */\r\n    public TemperatureDifferenceCalculator(double[] list)\r\n    {\r\n        data = list;\r\n    }\r\n\r\n   /**\r\n    * Gets the maximum difference between any two consecutive values\r\n    * @return the maximum difference\r\n    */\r\n\r\n    // TODO: create maxDifference method.  Remeber to give it a return statement.\r\n\r\n   /**\r\n    * Gets the minimum difference between any two consecutive values\r\n    * @return the minimum difference\r\n    */\r\n\r\n    // TODO: create minDifference method. Remember to give it a return statement.\r\n}\r\n","classname":"TemperatureDifferenceCalculator","expectedoutput":"","programtype":"stdin","type":"program","qid":"19.21"}]},"20":{"title":"More About Classes","lessons":[{"title":" Discovering Classes","video":"videos/module13/01 - Discovering Classes.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.1"},{"title":"Discovering Classes","question":"<img src='images/lesson8/discoveringclasses.jpg' alt='image'><br><br><form class='form-horizontal'><div class='form-group text-left' style='margin-left:155px'><input type='checkbox' class='Checkboxinput' value='a'>&nbsp;&nbsp;Car<br><input type='checkbox' class='Checkboxinput' value='b'>&nbsp;&nbsp;Person<br><input type='checkbox' class='Checkboxinput' value='c'>&nbsp;&nbsp;Drive<br><input type='checkbox' class='Checkboxinput' value='d'>&nbsp;&nbsp;Car Sharing<br></div></form>","answer":["05","06"],"type":"quiz","tips":"","qid":"20.2"},{"title":" Discovering Classes","video":"videos/module13/2 - Discovering","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.3"},{"title":" Discovering Instance Variables","video":"videos/module13/03 - Discovering Instance Variables.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.4"},{"title":"Discovering Instance Variables","question":"<img src='images/lesson8/discoveringinstanceclasses.jpg' alt='image'><br><br><form class='form-horizontal'><div class='form-group text-left' style='margin-left:155px'><p>Does this pattern apply?</p><br><input type='checkbox' class='Checkboxinput' value='a'>&nbsp;&nbsp;Bank account balance<br><input type='checkbox' class='Checkboxinput' value='b'>&nbsp;&nbsp;Friends in social network<br><input type='checkbox' class='Checkboxinput' value='c'>&nbsp;&nbsp;Car odometer<br><input type='checkbox' class='Checkboxinput' value='d'>&nbsp;&nbsp;Flag stripes<br></div></form>","answer":["05","07"],"type":"quiz","tips":"","qid":"20.5"},{"title":" Discovering Instance Variables","video":"videos/module13/4 - Discovering","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.6"},{"title":" Naming Classes Well","video":"videos/module13/05 - Naming Classes Well.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.7"},{"title":" Photography Company","video":"videos/module13/06 - Photography Company.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.8"},{"title":"Quiz","question":"<img  src='images/lesson8/PhotographyCompany.jpg'> <br/>Classes &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Methods<br><textarea rows=6 cols=10 id=\"quizinput1\" type=\"textarea\"></textarea>&nbsp;&nbsp;&nbsp;<textarea rows=6 cols=10 id=\"quizinput1\" type=\"textarea\"></textarea>","answer":[""],"type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.9"},{"title":" Photography Company","video":"videos/module13/7 - Photography","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.10"},{"title":" Thinking About the Names","video":"videos/module13/08 - Thinking About the Names.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.11"},{"title":" Counting","video":"videos/module13/09 - Counting.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.12"},{"title":"Quiz","question":"// BlueJ project: lesson8/counting\r\n\r\n// TODO: Provide an instance variable for counting the passengers.\r\n// TODO: Complete the addPassenger and getPassengerCount methods.\r\n\r\npublic class Car\r\n{\r\n    private int numberOfSeats;\r\n\r\n   /**\r\n    *  Constructs a car with a given number of seats\r\n    *  @param numberOfSeats the number of seats in this car.\r\n    */\r\n    public Car(int numberOfSeats)\r\n    {\r\n        this.numberOfSeats = numberOfSeats;\r\n    }\r\n\r\n\r\n   /**\r\n    *  Adds a passenger to this car, provided that there is space.\r\n    */\r\n    public void addPassenger()\r\n    {\r\n    }\r\n\r\n   /**\r\n    *  Gets the number of passengers in this car (not counting the driver).\r\n    *  @return the number of passengers\r\n    */\r\n    public int getPassengerCount()\r\n    {\r\n   \r\n    }\r\n\r\n}\r\n","classname":"Car","expectedoutput":"","programtype":"stdin","type":"program","qid":"20.13"},{"title":" Counting","video":"videos/module13/10 - Counting.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.14"},{"title":" Collecting","video":"videos/module13/11 - Collecting.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.15"},{"title":"Quiz","question":"// BlueJ project: lesson8/collecting\r\n\r\n// TODO: Initialize the array list\r\n// TODO: Implement the addPassenger and getPassengerCount methods\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Car\r\n{\r\n    private int numberOfSeats;\r\n    private ArrayList<String> passengers;\r\n\r\n   /**\r\n    *  Constructs a car with a given number of seats\r\n    *  @param numberOfSeats the number of seats in this car.\r\n    */\r\n    public Car(int numberOfSeats)\r\n    {\r\n        this.numberOfSeats = numberOfSeats;\r\n    }\r\n\r\n   /**\r\n    *  Adds a passenger to this car, provided that there is space.\r\n    *  @param name the name of the passenger\r\n    */\r\n    public void addPassenger(String name)\r\n    {\r\n        //your code here\r\n    }\r\n\r\n   /**\r\n    *  Gets the number of passengers in this car (not counting the driver).\r\n    *  @return the number of passengers\r\n    */\r\n    public int getPassengerCount()\r\n    {\r\n        //your code here\r\n    }\r\n\r\n   /**\r\n    *  Gets a list of all passengers in this car.\r\n    *  @return a list of the form [name1, name2, ...]\r\n    */\r\n    public String getPassengerList()\r\n    {\r\n        return passengers.toString();\r\n    }\r\n    \r\n}\r\n","classname":"Car","expectedoutput":"","programtype":"stdin","type":"program","qid":"20.16"},{"title":" Collecting","video":"videos/module13/12 - Collecting.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.17"},{"title":" Homework Scores Without Collecting","video":"videos/module13/13 - Homework Scores Without Collecting.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.18"},{"title":"Quiz","question":"// BlueJ project: lesson8/collecting2\r\n\r\n// TODO: Reimplement this class without collecting the individual scores\r\n\r\n/**\r\n * Holds the homework scores for a student.\r\n */\r\npublic class HomeworkScores\r\n{\r\n    private double[] scores;\r\n    private int currentSize; // The current size of the array of scores\r\n    private static final int MAX_SIZE = 1000;\r\n    \r\n    public HomeworkScores()\r\n    {\r\n        scores = new double[MAX_SIZE];\r\n        currentSize = 0;\r\n    }\r\n\r\n   /**\r\n    *  Adds a score.\r\n    *  @param score the score to add\r\n    */\r\n    public void addScore(double score)\r\n    {\r\n        if (currentSize < scores.length)\r\n        {\r\n            scores[currentSize] = score;\r\n            currentSize++;\r\n        }\r\n    }\r\n\r\n   /**\r\n    *  Calculates the sum of all the scores entered, dropping the lowest\r\n    *  score if there is more than one.\r\n    *  @return the sum of all the scores in scores.\r\n    */\r\n    public double getTotalExcludingLowest()\r\n    {\r\n        if (currentSize == 0)\r\n        {\r\n            return 0;\r\n        }\r\n        else if (currentSize == 1)\r\n        {\r\n            return scores[0];\r\n        }\r\n        else\r\n        {\r\n            double sum = 0;\r\n            for (int i = 0; i < currentSize; i++)\r\n            {\r\n                sum = sum + scores[i];\r\n            }\r\n            return sum - getLowest();\r\n        }\r\n    }\r\n\r\n   /**\r\n    *  Calculates the lowest score.\r\n    *  @return the lowest score or 0 if there are no scores \r\n    */\r\n    private double getLowest()\r\n    {\r\n        if (currentSize == 0) \r\n        {\r\n            return 0;\r\n        }\r\n        else\r\n        {\r\n            double lowest = scores[0];\r\n            for (int i = 1; i < currentSize; i++)\r\n            {\r\n                if (scores[i] < lowest)\r\n                {\r\n                    lowest = scores[i];\r\n                }\r\n            }\r\n            return lowest;\r\n        }\r\n    }       \r\n}\r\n","classname":"HomeworkScores","expectedoutput":"","programtype":"stdin","type":"program","qid":"20.19"},{"title":" Homework Scores Without Collecting","video":"videos/module13/14 - Homework","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.20"},{"title":" Properties","video":"videos/module13/18 - Properties.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.21"},{"title":"Quiz","question":"// BlueJ project lesson8/properties \r\n// Add the appropriate getter and setter methods for the instance variables.\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\n\r\npublic class Car\r\n{\r\n    private int numberOfSeats; // Don't make this a settable property\r\n    private String driverName;\r\n    private ArrayList<String> passengers; // Not a property\r\n\r\n   /**\r\n    *  Constructs a car with a given number of seats\r\n    *  @param numberOfSeats the number of seats in this car.\r\n    */\r\n    public Car(int numberOfSeats)\r\n    {\r\n        this.numberOfSeats = numberOfSeats;\r\n        passengers = new ArrayList<String>();\r\n    }\r\n\r\n   /**\r\n    *  Adds a passenger to this car.\r\n    *  @param name the name of the passenger\r\n    */\r\n    public void addPassenger(String name)\r\n    {\r\n        passengers.add(name);\r\n    }\r\n\r\n   /**\r\n    *  Gets the number of occupants in this car.\r\n    *  @return the number of occupants\r\n    */\r\n    public int getOccupantCount()\r\n    {\r\n        int count = passengers.size();\r\n        if (driverName != null)\r\n        {\r\n            count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n   /**\r\n    *  Gets a list of all passengers in this car.\r\n    *  @return a list of the form [name1, name2, ...]\r\n    */\r\n    public String getPassengerList()\r\n    {\r\n        return passengers.toString();\r\n    }\r\n\r\n}\r\n","classname":"Car","expectedoutput":"","programtype":"stdin","type":"program","qid":"20.22"},{"title":" Properties","video":"videos/module13/19 - Properties.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.23"},{"title":" Static Methods","video":"videos/module13/20 - Static Methods.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.24"},{"title":"Static Methods","question":"<img src='images/lesson8/StaticMethods.jpg' alt='image'><br><br><form class='form-horizontal'><div class='form-group text-left' style='margin-left:155px'><input type='checkbox' class='Checkboxinput' value='a'>&nbsp;&nbsp;System<br><input type='checkbox' class='Checkboxinput' value='b'>&nbsp;&nbsp;Scanner<br><input type='checkbox' class='Checkboxinput' value='c'>&nbsp;&nbsp;ElevatorDemo<br><input type='checkbox' class='Checkboxinput' value='d'>&nbsp;&nbsp;Somewhere else<br></div></form>","answer":["07","00"],"type":"quiz","tips":"","qid":"20.25"},{"title":" Static Methods","video":"videos/module13/21 - Static","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.26"},{"title":" Creating a Static Method","video":"videos/module13/22 - Creating a Static Method.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.27"},{"title":" Some Methods that Should Have Been Static","video":"videos/module13/23 - Some Methods that Should Have Been Static.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.28"},{"title":"Quiz","question":"// BlueJ project: lesson8/turningMathToJava\r\n\r\n// TODO: Convert the following methods to static methods\r\n\r\npublic class MathInJava\r\n{\r\n    /*\r\n       Computes the fraction\r\n       \r\n           1\r\n      -----------\r\n           1 - s\r\n       s + -----\r\n             n\r\n             \r\n      See http://en.wikipedia.org/wiki/Amdahl%27s_law       \r\n    */\r\n    \r\n    public double amdahlSpeedup(double s, double n)\r\n    {\r\n        return 1 / (s + (1 - s) / n);\r\n    }\r\n\r\n    /*\r\n        Computes the fraction\r\n        \r\n        (a - c)(b - d)\r\n        --------------\r\n        (b - c)(a - d)\r\n        \r\n        See http://en.wikipedia.org/wiki/Cross-ratio\r\n    */\r\n    \r\n    public double crossRatio(double a, double b, double c, double d)\r\n    {\r\n        return (a - c) * (b - d) / ((b - c) * (a - d));\r\n    }\r\n\r\n    /**\r\n        Computes the average of four values.\r\n        @param a the first value\r\n        @param b the second value\r\n        @param c the third value\r\n        @param d the fourth value\r\n        @return the average of the four values\r\n    */\r\n    \r\n    public double average(int a, int b, int c, int d)\r\n    {\r\n        return (a + b + c + d) / 4.0;\r\n    }\r\n}\r\n","classname":"MathInJava","expectedoutput":"","programtype":"stdin","type":"program","qid":"20.29"},{"title":" Some Methods that Should Have Been Static","video":"videos/module13/24 - Some","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.30"},{"title":" Static Variables","video":"videos/module13/25 - Static Variables.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.31"},{"title":"Static Variables","question":"<img src='images/lesson8/StaticVariables.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["3797c784247c"],"type":"quiz","tips":"","qid":"20.32"},{"title":" Static Variables","video":"videos/module13/26 - Static","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.33"},{"title":" IDs the Quick and Dirty Way","video":"videos/module13/27 - IDs the Quick and Dirty Way.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.34"},{"title":"Quiz","question":"// BlueJ project: lesson8/friends\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Person\r\n{\r\n    private String name;\r\n    private int id;\r\n    private ArrayList<Person> friends;\r\n\r\n    // TODO: Assign IDs 1, 2, 3, ... to each Person object\r\n    // Use a static variable to track the last ID that was assigned.\r\n    \r\n    public Person(String name)\r\n    {\r\n        this.name = name;\r\n        friends = new ArrayList<Person>();\r\n    }\r\n\r\n    /**\r\n     * Adds the given friend to this Person's friends list.\r\n     * @param friend the friend to add.\r\n     */\r\n    public void addFriend(Person friend)\r\n    {\r\n        friends.add(friend);\r\n    }\r\n    \r\n    public String toString()\r\n    {\r\n        return \"Person[id=\" + id + \",name=\" + name + \"]\";\r\n    }\r\n \r\n    /**\r\n     * Gets the number of friends this Person has.\r\n     * @return the number of friends.\r\n     */\r\n    public int getNumFriends()\r\n    {\r\n        return friends.size();\r\n    }\r\n}\r\n","classname":"Person","expectedoutput":"","programtype":"stdin","type":"program","qid":"20.35"},{"title":" IDs the Quick and Dirty Way","video":"videos/module13/28 - IDs","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.36"},{"title":" IDs the Better Way","video":"videos/module13/29 - IDs the Better Way.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.37"},{"title":" Implement tryToAdd","video":"videos/module13/30 - Implement tryToAdd.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.38"},{"title":"Implement tryToAdd","question":"// BlueJ project: lesson8/carshare1\r\n    \r\nimport java.util.ArrayList;\r\n\r\nclass Car\r\n{\r\n    private ArrayList<Person> passengers;\r\n    private int numberOfSeats;\r\n    private String driverName;\r\n    private int location;\r\n    private int destination;\r\n\r\n    public Car(String driverName, int numberOfSeats, int destination)\r\n    {\r\n        passengers = new ArrayList<Person>();\r\n        this.driverName = driverName;\r\n        this.numberOfSeats = numberOfSeats;\r\n        location = 0;\r\n        this.destination = destination;\r\n    }\r\n\r\n    /**\r\n       Gets the name of this car's driver.\r\n       @return the driver name\r\n    */\r\n    public String getDriverName()\r\n    {\r\n        return driverName;\r\n    }\r\n\r\n    /**\r\n       Checks whether this car has arrived at its destination.\r\n       @return true if the car has arrived\r\n    */\r\n    public boolean hasArrived()\r\n    {\r\n        return location == destination;\r\n    }\r\n\r\n    /**\r\n       Tries to add a passenger, returns true if successful\r\n       @param p the new passenger\r\n       @return true if there is room in the car and the passenger's\r\n       destination on the way to this car's destination\r\n    */\r\n    public boolean tryToAdd(Person p)\r\n    {\r\n        // TODO: Complete this method\r\n    }\r\n\r\n    /**\r\n       Drives this car to the next location and drops off\r\n       any passengers whose destination is that location\r\n    */\r\n    public void drive()\r\n    {\r\n        // Leave blank for now\r\n    }\r\n}\r\nclass Person\r\n{\r\n    private String name;\r\n    private int destination;\r\n\r\n    public Person(String name, int destination)\r\n    {\r\n        this.name = name;\r\n        this.destination = destination;\r\n    }\r\n\r\n    public String getName()\r\n    {\r\n        return name;\r\n    }\r\n\r\n    public int getDestination()\r\n    {\r\n        return destination;\r\n    }\r\n}\r\n","testcases":"public class CarTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Car car1 = new Car(\"Fred\", 4, 2);\r\n        Person person1 = new Person(\"Joanne\", 1);\r\n        boolean result = car1.tryToAdd(person1);\r\n        System.out.println(\"Trying to add Joanne going to destination 1: \" + result);\r\n        System.out.println(\"Expected: true\");\r\n        Person person2 = new Person(\"Cindy\", 3);\r\n        result = car1.tryToAdd(person2);\r\n        System.out.println(\"Trying to add Cindy going to destination 3: \" + result);\r\n        System.out.println(\"Expected: false\");\r\n        car1.tryToAdd(new Person(\"Carl\", 1));\r\n        result = car1.tryToAdd(new Person(\"Jose\", 2));\r\n        System.out.println(\"Trying to add Jose going to destination 2: \" + result);\r\n        System.out.println(\"Expected: true\");\r\n        result = car1.tryToAdd(new Person(\"Voldemort\", 1));\r\n        System.out.println(\"Trying to add a passenger to a full car: \" + result);\r\n        System.out.println(\"Expected: false\");\r\n    }\r\n}\r\n","classname":"CarTester","programtype":"api","type":"program","qid":"20.39"},{"title":" Implement tryToAdd","video":"videos/module13/31 - Implement","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.40"},{"title":" Drive","video":"videos/module13/32 - Drive.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.41"},{"title":"Quiz","question":"// BlueJ project: lesson8/carshare2\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Car\r\n{\r\n    private ArrayList<Person> passengers;\r\n    private int numberOfSeats;\r\n    private String driverName;\r\n    private int location;\r\n    private int destination;\r\n\r\n    public Car(String driverName, int numberOfSeats, int destination)\r\n    {\r\n        passengers = new ArrayList<Person>();\r\n        this.driverName = driverName;\r\n        this.numberOfSeats = numberOfSeats;\r\n        location = 0;\r\n        this.destination = destination;\r\n    }\r\n\r\n    /**\r\n       Gets the name of this car's driver.\r\n       @return the driver name\r\n    */\r\n    public String getDriverName()\r\n    {\r\n        return driverName;\r\n    }\r\n\r\n    /**\r\n       Checks whether this car has arrived at its destination.\r\n       @return true if the car has arrived\r\n    */\r\n    public boolean hasArrived()\r\n    {\r\n        return location == destination;\r\n    }\r\n\r\n    /**\r\n       Tries to add a passenger.\r\n       @param p the new passenger\r\n       @return true if there is room in the car and the passenger's\r\n       destination on the way to this car's destination\r\n    */\r\n    public boolean tryToAdd(Person p)\r\n    {\r\n        if (passengers.size() + 2 <= numberOfSeats\r\n                && p.getDestination() <= destination)\r\n        {\r\n            passengers.add(p);\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n       Drives this car to the next location and drops off\r\n       any passengers whose destination is that location\r\n    */\r\n    public void drive()\r\n    {\r\n        // TODO: Implement this method\r\n    }\r\n \r\n    public String toString()\r\n    {\r\n        return \"Car[location=\" + location + \",driverName=\" + driverName + \",passengers=\" + passengers + \"]\";\r\n    }   \r\n}\r\n","classname":"Car","expectedoutput":"","programtype":"stdin","type":"program","qid":"20.42"},{"title":" Drive","video":"videos/module13/33 - Drive.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.43"},{"title":" Implement loadPassengers","video":"videos/module13/34 - Implement loadPassengers.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.44"},{"title":" Implement loadPassengers","question":"// BlueJ project: lesson8/carshare3\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\n\r\nclass Simulation\r\n{\r\n    private ArrayList<Car> cars;\r\n    private ArrayList<Person> people;\r\n\r\n    public Simulation()\r\n    {\r\n        cars = new ArrayList<Car>();\r\n        people = new ArrayList<Person>();\r\n    }\r\n\r\n    /**\r\n       Reads the car and person data. Each row has the format\r\n       n    Driver or Passenger Name   Destination\r\n       where n is the number of seats for a car,\r\n       0 for a passenger, -1 to signify the end of input.\r\n       @param in the scanner to read from\r\n    */\r\n    public void read(Scanner in)\r\n    {\r\n        boolean done = false;\r\n        System.out.println(\"Enter input of the form n Name Destination\");\r\n        System.out.println(\"n > 0: Car with n seats, n = 0: Passenger, n = -1: End of input\");\r\n        while (!done)\r\n        {\r\n            int capacity = in.nextInt();\r\n            if (capacity == -1)\r\n            {\r\n                done = true;\r\n            }\r\n            else\r\n            {\r\n                String name = in.next();\r\n                int destination = in.nextInt();\r\n                if (capacity == 0)\r\n                {\r\n                    people.add(new Person(name, destination));\r\n                }\r\n                else\r\n                {\r\n                    cars.add(new Car(name, capacity, destination));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n       Load all passengers into cars.\r\n    */\r\n    public void loadPassengers()\r\n    {\r\n        // Complete this method\r\n    }\r\n\r\n    /**\r\n       Drive all cars until they have arrived.\r\n    */\r\n    public void driveCars()\r\n    {\r\n        // Leave blank for now\r\n    }\r\n    \r\n    public String toString()\r\n    {\r\n        return cars.toString();\r\n    }\r\n}\r\nclass Car\r\n{\r\n    private ArrayList<Person> passengers;\r\n    private int numberOfSeats;\r\n    private String driverName;\r\n    private int location;\r\n    private int destination;\r\n\r\n    public Car(String driverName, int numberOfSeats, int destination)\r\n    {\r\n        passengers = new ArrayList<Person>();\r\n        this.driverName = driverName;\r\n        this.numberOfSeats = numberOfSeats;\r\n        location = 0;\r\n        this.destination = destination;\r\n    }\r\n\r\n    /**\r\n       Gets the name of this car's driver.\r\n       @return the driver name\r\n    */\r\n    public String getDriverName()\r\n    {\r\n        return driverName;\r\n    }\r\n\r\n    /**\r\n       Checks whether this car has arrived at its destination.\r\n       @return true if the car has arrived\r\n    */\r\n    public boolean hasArrived()\r\n    {\r\n        return location == destination;\r\n    }\r\n\r\n    /**\r\n       Tries to add a passenger.\r\n       @param p the new passenger\r\n       @return true if there is room in the car and the passenger's\r\n       destination on the way to this car's destination\r\n    */\r\n    public boolean tryToAdd(Person p)\r\n    {\r\n        if (passengers.size() + 2 <= numberOfSeats\r\n                && p.getDestination() <= destination)\r\n        {\r\n            passengers.add(p);\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n       Drives this car to the next location and drops off\r\n       any passengers whose destination is that location\r\n    */\r\n    public void drive()\r\n    {\r\n        location++;\r\n        int i = 0;\r\n        while (i < passengers.size())\r\n        {\r\n            Person p = passengers.get(i);\r\n            if (p.getDestination() == location)\r\n            {\r\n                passengers.remove(i);\r\n            }\r\n            else\r\n            {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    public String toString()\r\n    {\r\n        return \"Car[location=\" + location + \",driverName=\" + driverName + \",passengers=\" + passengers + \"]\";\r\n    }\r\n}\r\n","testcases":"","classname":"Digits","programtype":"api","type":"program","qid":"20.45"},{"title":" Implement loadPassengers","video":"videos/module13/35 - Implement","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.46"},{"title":" driveCars","video":"videos/module13/36 - driveCars.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.47"},{"title":"driveCars","question":"// BlueJ project: lesson8/carShare4\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\nclass Simulation\r\n{\r\n    private ArrayList<Car> cars;\r\n    private ArrayList<Person> people;\r\n\r\n    public Simulation()\r\n    {\r\n        cars = new ArrayList<Car>();\r\n        people = new ArrayList<Person>();\r\n    }\r\n\r\n    /**\r\n       Reads the car and person data. Each row has the format\r\n       n    Driver or Passenger Name   Destination\r\n       where n is the number of seats for a car,\r\n       0 for a passenger, -1 to signify the end of input.\r\n       @param in the scanner to read from\r\n    */\r\n    public void read(Scanner in)\r\n    {\r\n        boolean done = false;\r\n        System.out.println(\"Enter input of the form n Name Destination\");\r\n        System.out.println(\"n > 0: Car with n seats, n = 0: Passenger, n = -1: End of input\");\r\n        while (!done)\r\n        {\r\n            int capacity = in.nextInt();\r\n            if (capacity == -1)\r\n            {\r\n                done = true;\r\n            }\r\n            else\r\n            {\r\n                String name = in.next();\r\n                int destination = in.nextInt();\r\n                if (capacity == 0)\r\n                {\r\n                    people.add(new Person(name, destination));\r\n                }\r\n                else\r\n                {\r\n                    cars.add(new Car(name, capacity, destination));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n       Load all passengers into cars.\r\n    */\r\n    public void loadPassengers()\r\n    {\r\n        for (Person p : people)\r\n        {\r\n            boolean added = false;\r\n            for (int i = 0; !added && i < cars.size(); i++)\r\n            {\r\n                added = cars.get(i).tryToAdd(p);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n       Drive all cars until they have arrived.\r\n    */\r\n    public void driveCars()\r\n    {\r\n        // Complete this method\r\n        // To be graded as correct, go through the cars in order\r\n        // and drive each one until it arrives before going to the\r\n        // next car in the array.\r\n    }\r\n    \r\n    public String toString()\r\n    {\r\n        return cars.toString();\r\n    }    \r\n}\r\n//This is provided for reference.  Don't change this file!\r\nclass Car\r\n{\r\n    private ArrayList<Person> passengers;\r\n    private int numberOfSeats;\r\n    private String driverName;\r\n    private int location;\r\n    private int destination;\r\n\r\n    public Car(String driverName, int numberOfSeats, int destination)\r\n    {\r\n        passengers = new ArrayList<Person>();\r\n        this.driverName = driverName;\r\n        this.numberOfSeats = numberOfSeats;\r\n        location = 0;\r\n        this.destination = destination;\r\n    }\r\n\r\n    /**\r\n       Gets the name of this car's driver.\r\n       @return the driver name\r\n    */\r\n    public String getDriverName()\r\n    {\r\n        return driverName;\r\n    }\r\n\r\n    /**\r\n       Checks whether this car has arrived at its destination.\r\n       @return true if the car has arrived\r\n    */\r\n    public boolean hasArrived()\r\n    {\r\n        return location == destination;\r\n    }\r\n\r\n    /**\r\n       Tries to add a passenger.\r\n       @param p the new passenger\r\n       @return true if there is room in the car and the passenger's\r\n       destination on the way to this car's destination\r\n    */\r\n    public boolean tryToAdd(Person p)\r\n    {\r\n        if (passengers.size() + 2 <= numberOfSeats\r\n                && p.getDestination() <= destination)\r\n        {\r\n            passengers.add(p);\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n       Drives this car to the next location and drops off\r\n       any passengers whose destination is that location\r\n    */\r\n    public void drive()\r\n    {\r\n        location++;\r\n        int i = 0;\r\n        while (i < passengers.size())\r\n        {\r\n            Person p = passengers.get(i);\r\n            if (p.getDestination() == location)\r\n            {\r\n                passengers.remove(i);\r\n            }\r\n            else\r\n            {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    public String toString()\r\n    {\r\n        return \"Car[location=\" + location + \",driverName=\" + driverName + \",passengers=\" + passengers + \"]\";\r\n    }\r\n}\r\n","testcases":"","classname":"Digits","programtype":"api","type":"program","qid":"20.48"},{"title":" driveCars","video":"videos/module13/37 - driveCars.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.49"},{"title":" Running the Car Simulation","video":"videos/module13/38 - Running the Car Simulation.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.50"},{"title":"Running the Car Simulation","question":"<img src='images/lesson8/Running the carsimulation.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["379bd1d00d747d301147ea4dc2e208"],"type":"quiz","tips":"","qid":"20.51"},{"title":" Running the Car Simulation","video":"videos/module13/39 - Running","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.52"},{"title":" Optional Challenge Implementing the Photography Story","video":"videos/module13/40 - Optional Challenge Implementing the Photography Story.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.53"},{"title":" Optional Challenge Implementing the Photography Story","video":"videos/module13/41 - Optional Challenge Implementing the Photography Story.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.54"},{"title":" Coupling Between Classes","video":"videos/module13/47 - Coupling Between Classes.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.55"},{"title":"Coupling Between Classes","question":"<img  src='images/lesson8/Couplingbetweenclasses.jpg'> <br/>Classes that <br>car uses<br><textarea rows=6 cols=10 id=\"quizinput1\" type=\"textarea\"></textarea>","testcases":"","classname":"Digits","programtype":"api","type":"quiz","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.56"},{"title":" Coupling Between Classes","video":"videos/module13/48 - Coupling","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.57"},{"title":" Dont Print in addPassenger","video":"videos/module13/49 - Dont Print in addPassenger.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.58"},{"title":"Dont Print in addPassenger","question":"// lesson8/carshare6\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\nclass Simulation\r\n{\r\n    private ArrayList<Car> cars;\r\n    private ArrayList<Person> people;\r\n\r\n    public Simulation()\r\n    {\r\n        cars = new ArrayList<Car>();\r\n        people = new ArrayList<Person>();\r\n    }\r\n\r\n    /**\r\n       Reads the car and person data. Each row has the format\r\n       n    Driver or Passenger Name   Destination\r\n       where n is the number of seats for a car,\r\n       0 for a passenger, -1 to signify the end of input.\r\n       @param in the scanner to read from\r\n    */\r\n    public void read(Scanner in)\r\n    {\r\n        boolean done = false;\r\n        System.out.println(\"Enter input of the form n Name Destination\");\r\n        System.out.println(\"n > 0: Car with n seats, n = 0: Passenger, n = -1: End of input\");\r\n        while (!done)\r\n        {\r\n            int capacity = in.nextInt();\r\n            if (capacity == -1)\r\n            {\r\n                done = true;\r\n            }\r\n            else\r\n            {\r\n                String name = in.next();\r\n                int destination = in.nextInt();\r\n                if (capacity == 0)\r\n                {\r\n                    people.add(new Person(name, destination));\r\n                }\r\n                else\r\n                {\r\n                    cars.add(new Car(name, capacity, destination));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n       Load all passengers into cars.\r\n    */\r\n    public void loadPassengers()\r\n    {\r\n        for (Person p : people)\r\n        {\r\n            boolean added = false;\r\n            for (int i = 0; !added && i < cars.size(); i++)\r\n            {\r\n                added = cars.get(i).tryToAdd(p);\r\n                // TODO: Add print statement here\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n       Drive all cars until they have arrived.\r\n    */\r\n    public void driveCars()\r\n    {\r\n        while (cars.size() > 0)\r\n        {\r\n            int i = 0;\r\n            while (i < cars.size())\r\n            {\r\n                Car c = cars.get(i);\r\n                c.drive();\r\n                if (c.hasArrived())\r\n                {\r\n                    cars.remove(i);\r\n                }\r\n                else\r\n                {\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n// BlueJ project: lesson8/carshare6\r\nclass Car\r\n{\r\n    private ArrayList<Person> passengers;\r\n    private int numberOfSeats;\r\n    private String driverName;\r\n    private int location;\r\n    private int destination;\r\n\r\n    public Car(String driverName, int numberOfSeats, int destination)\r\n    {\r\n        passengers = new ArrayList<Person>();\r\n        this.driverName = driverName;\r\n        this.numberOfSeats = numberOfSeats;\r\n        location = 0;\r\n        this.destination = destination;\r\n    }\r\n\r\n    /**\r\n       Gets the name of this car's driver.\r\n       @return the driver name\r\n    */\r\n    public String getDriverName()\r\n    {\r\n        return driverName;\r\n    }\r\n\r\n    /**\r\n       Checks whether this car has arrived at its destination.\r\n       @return true if the car has arrived\r\n    */\r\n    public boolean hasArrived()\r\n    {\r\n        return location == destination;\r\n    }\r\n\r\n    /**\r\n       Tries to add a passenger.\r\n       @param p the new passenger\r\n       @return true if there is room in the car and the passenger's\r\n       destination on the way to this car's destination\r\n    */\r\n    public boolean tryToAdd(Person p)\r\n    {\r\n        if (passengers.size() + 2 <= numberOfSeats\r\n                && p.getDestination() <= destination)\r\n        {\r\n            passengers.add(p);\r\n            // TODO: Remove print method\r\n            System.out.println(driverName + \" picks up \" + p.getName());\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n       Drives this car to the next location and drops off\r\n       any passengers whose destination is that location\r\n    */\r\n    public void drive()\r\n    {\r\n        location++;\r\n        int i = 0;\r\n        while (i < passengers.size())\r\n        {\r\n            Person p = passengers.get(i);\r\n            if (p.getDestination() == location)\r\n            {\r\n                passengers.remove(i);\r\n                System.out.println(driverName + \" drops off \" + p.getName());\r\n            }\r\n            else\r\n            {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n","testcases":"","classname":"Digits","programtype":"api","type":"program","qid":"20.59"},{"title":" Dont Print in addPassenger","video":"videos/module13/50 - Dont","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.60"},{"title":" Dont Print in Drive","video":"videos/module13/51 - Dont Print in Drive.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.61"},{"title":"Quiz","question":"// BlueJ project: lesson8/carshare7\r\n    \r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class Simulation\r\n{\r\n    private ArrayList<Car> cars;\r\n    private ArrayList<Person> people;\r\n\r\n    public Simulation()\r\n    {\r\n        cars = new ArrayList<Car>();\r\n        people = new ArrayList<Person>();\r\n    }\r\n\r\n    /**\r\n       Reads the car and person data. Each row has the format\r\n       n    Driver or Passenger Name   Destination\r\n       where n is the number of seats for a car,\r\n       0 for a passenger, -1 to signify the end of input.\r\n       @param in the scanner to read from\r\n    */\r\n    public void read(Scanner in)\r\n    {\r\n        boolean done = false;\r\n        System.out.println(\"Enter input of the form n Name Destination\");\r\n        System.out.println(\"n > 0: Car with n seats, n = 0: Passenger, n = -1: End of input\");\r\n        while (!done)\r\n        {\r\n            int capacity = in.nextInt();\r\n            if (capacity == -1)\r\n            {\r\n                done = true;\r\n            }\r\n            else\r\n            {\r\n                String name = in.next();\r\n                int destination = in.nextInt();\r\n                if (capacity == 0)\r\n                {\r\n                    people.add(new Person(name, destination));\r\n                }\r\n                else\r\n                {\r\n                    cars.add(new Car(name, capacity, destination));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n       Load all passengers into cars.\r\n    */\r\n    public void loadPassengers()\r\n    {\r\n        for (Person p : people)\r\n        {\r\n            boolean added = false;\r\n            for (int i = 0; !added && i < cars.size(); i++)\r\n            {\r\n                added = cars.get(i).tryToAdd(p);\r\n                if (added)\r\n                {\r\n                    System.out.println(cars.get(i).getDriverName()\r\n                                       + \" picks up \" + p.getName());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n       Drive all cars until they have arrived.\r\n    */\r\n    public void driveCars()\r\n    {\r\n        while (cars.size() > 0)\r\n        {\r\n            int i = 0;\r\n            while (i < cars.size())\r\n            {\r\n                Car c = cars.get(i);\r\n                c.drive();\r\n                // TODO: Add print statement here\r\n                if (c.hasArrived())\r\n                {\r\n                    cars.remove(i);\r\n                }\r\n                else\r\n                {\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","classname":"Simulation","expectedoutput":"","programtype":"stdin","type":"program","qid":"20.62"},{"title":" Dont Print in Drive","video":"videos/module13/52 - Dont","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.63"},{"title":" Coupling in the Photography Example","video":"videos/module13/53 - Coupling in the Photography Example.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.64"},{"title":" Coupling in the Photography Example","question":"<img src='images/lesson8/Coupling in the Photography Example.jpg' alt='image'><br><br><form class='form-horizontal'><div class='form-group text-left' style='margin-left:155px'><input type='checkbox' class='Checkboxinput' value='a'>&nbsp;&nbsp;Simulation is coupled with manager<br><input type='checkbox' class='Checkboxinput' value='b'>&nbsp;&nbsp;Simulation is coupled with portfolio<br><input type='checkbox' class='Checkboxinput' value='c'>&nbsp;&nbsp;Manager is coupled with Simulation<br><input type='checkbox' class='Checkboxinput' value='d'>&nbsp;&nbsp;Manager is coupled with portfolio<br><input type='checkbox' class='Checkboxinput' value='e'>&nbsp;&nbsp;Assignment is coupled with portfolio</div></form>","answer":["05","00"],"type":"quiz","tips":"","qid":"20.65"},{"title":" Coupling in the Photography Example","video":"videos/module13/54 - Coupling","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.66"},{"title":" Packages","video":"videos/module13/55 - Packages.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.67"},{"title":" Reorganizing the Carshare Classes","video":"videos/module13/56 - Reorganizing the Carshare Classes.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.68"},{"title":"Reorganizing the Carshare Classes","question":"<img src='images/lesson8/Reorganizing the Carshare Classes.jpg' alt='image'><br><input class='input-sm' id=\"quizinput1\" type=\"text\"></input>&nbsp;&nbsp;<input class='input-sm' id=\"quizinput1\" type=\"text\"></input>&nbsp;&nbsp;<input class='input-sm' id=\"quizinput1\" type=\"text\"></input>","answer":["3797c784247c"],"type":"quiz","tips":"","qid":"20.69"},{"title":" Reorganizing the Carshare Classes","video":"videos/module13/57 - Reorganizing","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"20.70"}]},"21":{"title":"Problem Set 8","lessons":[{"title":"Short Problem #1 - Instantiate 2D Array","question":"<img src='images/Problem Set 8/8.1.jpg' alt='image'><br><h4>int[][] numbers = &nbsp;<input class='input-lg' id=\"quizinput1\" type=\"text\"></input>&nbsp;;</h4>","answer":["0a8bc3d0287f6c4b6474df58cf"],"type":"quiz","tips":"","qid":"21.1"},{"title":"Short Problem #2 - Instantiate an element in 2D Array","question":"<img src='images/Problem Set 8/8.2.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["098fc082286943200d72b430afb24cc0"],"type":"quiz","tips":"","qid":"21.2"},{"title":"Short Problem #3 - Find num rows in 2D Array","question":"<img src='images/Problem Set 8/8.3.jpg' alt='image'><br><h4>int rows = &nbsp;<input class='input-lg' id=\"quizinput1\" type=\"text\"></input>&nbsp;;</h4>","answer":["098fc0822869367c3547e319fa"],"type":"quiz","tips":"","qid":"21.3"},{"title":"Short Problem #4 - Find num columns in 2D Array","question":"<img src='images/Problem Set 8/8.4.jpg' alt='image'><br><h4>int columns = &nbsp;<input class='input-lg' id=\"quizinput1\" type=\"text\"></input>&nbsp;;</h4>","answer":["098fc082286943200d07e808fce40893"],"type":"quiz","tips":"","qid":"21.4"},{"title":"Short Problem #5 - The Matrix","question":"<img src='images/Problem Set 8/8.5.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["098fc0822869437d315df604eaad109ebd4890bc9db6e05f79a8416497914233a3169cc69d8f82409cde1c7be241c2"],"type":"quiz","tips":"","qid":"21.5"},{"title":"Short Problem #6 - The Matrix part2","question":"<img src='images/Problem Set 8/8.6.jpg' alt='image'><br><h4>System.out.println( &nbsp;<input class='input-lg' id=\"quizinput1\" type=\"text\"></input>&nbsp;);</h4>","answer":["098fc0822869437d315df604eaad109ebd4890bc9db6e05f79a8416497914233a3169cc69d8f82409cde1c"],"type":"quiz","tips":"","qid":"21.6"},{"title":"Short Problem #7 - Print 2D Array","question":"// Complete this method to print a 2D array of ints in column and row format.\n// Use printf with a format specifier of \"%6d\"\n//     System.out.printf(\"%6d\", ...);\n// We will assume that none of the arrays the method is asked to print will\n//have values greater than 999. You will need to use nested loops.\n//\n// Notice that the method is static. That is because it does not work on the\n//instance variables of the class. It gets all its data as parameters\n\npublic class ArrayUtil\n{\n    /**\n     * Prints the given 2D array in columns and rows\n     * @param the array to print\n     */\n    public static void print2D(int[][] matrix)\n    {\n        // TODO: Complete this method to print a 2D array of ints in column and row format.\n    }\n\n}\n\n","classname":"ArrayUtil","expectedoutput":"","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"21.7"},{"title":"Short Problem #8 - Fill 2D Array with X","question":"// Complete the method to fill a 2D array of Strings with all X's (\"X\")\r\n// Use nested loops\r\n//\r\n// Note that the method is static. It does not use the instance variables of\r\n//the class. It gets all the information it needs as a parameter\r\nimport java.util.Arrays;\r\npublic class ArrayUtil\r\n{\r\n     /**\r\n     * Fills the given 2D array with X's (\"X\").\r\n     * @param the array to fill\r\n     */\r\n    public static void fill2D(String[][] matrix)\r\n    {\r\n        // TODO:  Complete the method to fill a 2D array of Strings with all X's (\"X\")\r\n    }\r\n\r\n}\r\n","testcases":"\r\npublic class ArrayUser\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        String[][] matrix = new String[3][2];\r\n        ArrayUtil.fill2D(matrix);\r\n        print(matrix);\r\n        \r\n        System.out.println();\r\n        String[][] matrix2 = new String[2][3];\r\n        ArrayUtil.fill2D(matrix2);\r\n        print(matrix2);\r\n    }\r\n    \r\n    private static void print(String[][] matrix)\r\n    {\r\n        for (int i = 0; i < matrix.length; i++)\r\n        {\r\n           System.out.println(Arrays.toString(matrix[i]));\r\n        }\r\n    }\r\n}\r\n","classname":"ArrayUser","programtype":"api","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"21.8"},{"title":"Short Problem #9 - Method Concepts Part 2","question":"<br><br><h2 style='color:green'>A(n)&nbsp;<input class='input-lg' id=\"quizinput1\" type=\"text\"></input><br>method is not invoked on any object","answer":["179ad5842872"],"type":"quiz","tips":"","qid":"21.9"},{"title":"Short Problem #10 - Method Concepts Part 3","question":"<br><br><h2 style='color:green'>A(n)&nbsp;<input class='input-lg' id=\"quizinput1\" type=\"text\"></input><br>method is invoked on a specific instance of a class","answer":["0d80c784207f7b75"],"type":"quiz","tips":"","qid":"21.10"},{"title":"Short Problem #11 - Dinner","question":"<img src='images/Problem Set 8/8.11.jpg' alt='image'><br><h4>double tip = &nbsp;<input class='input-lg' id=\"quizinput1\" type=\"text\"></input>&nbsp;;</h4>","answer":["2087da9e246336643959ac5fa6ad49cbfa"],"type":"quiz","tips":"","qid":"21.11"},{"title":"Short Problem #12 - Tax","question":"// This class needs a static method getTax which will return the tax on a purchase.\n// The javadoc and method body are done for you. You are to write the method header.\n// The method will be invoked without creating a Financial object\n\npublic class Financial\n{\n   /**\n    * Gets the tax on the given amoiunt at the given tax rate\n    * @param taxRate the tax rate as a decimal (eg .095)\n    * @param amount the amount toc pay tax on\n    * @return the tax on the given amount at the given tax rate.\n    */\n\n    // TODO: Complete the method header\n    .................... getTax(double taxRate, double amount)\n    {\n        return taxRate * amount;\n    }\n}\n\n","classname":"Financial","expectedoutput":"","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"21.12"},{"title":"Short Problem #13 - SalesInovice","question":"<img src='images/Problem Set 8/8.13.jpg' alt='image'><br><h4 style='text-align:left'><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>&nbsp;TAX_RATE=0.085;</h4>","answer":["149bd69c287238632448f004f1a31a92bd4e88f4d4e8c86678ac"],"type":"quiz","tips":"","qid":"21.13"},{"title":" Short Problem #14 -System Static Variables","question":"<img src='images/Problem Set 8/8.14.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>&nbsp;<h4>and</h4>&nbsp;<input class='input-lg' id=\"quizinput2\" type=\"text\">","answer":["0d80","0b9bc0"],"type":"quiz","tips":"","qid":"21.14"},{"title":" Short Problem #15 - What is Printed","question":"<img src='images/Problem Set 8/8.15.jpg' alt='image'><br><h4>x = &nbsp;<input class='input-md' id=\"quizinput1\" type=\"text\"></input>&nbsp;y = &nbsp;<input class='input-md' id=\"quizinput2\" type=\"text\"></h4>","answer":["56","55db"],"type":"quiz","tips":"","qid":"21.15"},{"title":"Question 1 - Manipulating Pictures","question":"//In this exercise we are going to manipulate images with the Picture class. We are\r\n//studying 2D arrays so we will work with the 2D int array that is returned by\r\n//Picture's getGraylevels method. This method is dicussed at the end of lesson 7.3.\r\n//Each element of the array coresponds to a pixel in the image. The color has been\r\n//transformed from an RGB color to a gray scale value.\r\n\r\n//The Picture class also has a constructor that takes a 2D int array as a parameter.\r\n//You will use that, too.\r\n\r\n//Your task is to complete the two methods in the PictureUtil. Notice these are static methods.\r\n//They do not act on instance variables of the PictureUtil class. In fact, the class has no\r\n//instance data.\r\n\r\n//Here is a description of the methods\r\n\r\n//private static Picture grayAndFlipLeftToRight( Picture pic) :\r\n//- This method converts the image into a 2D array of gray scale values and then flips it\r\n//left to right. That is, an object that was facing left will now be facing right.\r\n//The elements on the left most column will be swapped with those in the right-most column\r\n//and so on. Manipulate the elements in the array so that the first column is swapped with\r\n//the last column and the second column is swapped with the next to the last and so on.\r\n//Do not make a second array.\r\n//Then call the Picture constructor that takes a 2D int array and return the picture.\r\n\r\n//private static Picture grayAndRotate90( Picture pic):\r\n//- This method converts the image into a 2D array of gray scale values and then rotates it\r\n//90 degrees clockwise (lays it on its right side). To do this, create a new array where\r\n//the number of columns in the original array becomes the number of rows in the new array\r\n//and the number of rows in the original becomes the number of colums. Then copy the elements\r\n//from the first array into the proper place in the second array so that the image is\r\n//rotated 90 degrees clockwise. The first row will become the last column\r\n//[0][0] -> [0][numberOfColums - 1]\r\n\r\n//There is a starter project for this problem that contains the graphics classes you will\r\n//need, the tester, and the image used by the tester\r\n\r\n//For the draft: In PictureUtil, implement GrayAndFlipLeftToRight to return a version of the\r\n//original picture in gray scale\r\n\r\n/**\r\n * Methods to manipulate the Picture class\r\n */\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\nclass PictureUtil\r\n{\r\n    /**\r\n     * Gets a version of the given Picture in gray scale and flipped left to right\r\n     * @param pic the Picture to convert to gray scale and flip\r\n     * @return a version of the original Picture in gray scale and flipped\r\n     * left to right.\r\n     */\r\n    public static Picture grayAndFlipLeftToRight( Picture pic)\r\n    {\r\n        // TODO get a gray scale version\r\n        // TODO flip it left to right\r\n        // TODO create and return the new Picture\r\n        int [][] grayLevels = pic.getGrayLevels();\r\n        for(int y = 0; y < pic.getHeight(); y++)\r\n        {\r\n            for(int x = 0; x < pic.getWidth() / 2; x++)\r\n            {\r\n                int xPix = pic.getWidth() - 1 - x;\r\n                int temp = grayLevels[y][x];\r\n                grayLevels[y][x] = grayLevels[y][xPix];\r\n                grayLevels[y][xPix] = temp;\r\n            }\r\n        }\r\n        Picture newPic = new Picture(grayLevels);\r\n        return newPic;\r\n    }\r\n\r\n    /**\r\n     * Gets a version of the given Picture in gray scale and rotated 90 degrees clockwise\r\n     * @param pic the Picture to convert to gray scale and rotate 90 degrees clockwise\r\n     * @return a version of the original Picture in gray scale and rotated 90 degrees clockwise\r\n     */\r\n    public static Picture grayAndRotate90( Picture pic)\r\n    {\r\n        // TODO get a gray scale version\r\n        // TODO make a new array where the first row of the original becomes the last\r\n        // column of the new array\r\n        int [][] grayLevels = pic.getGrayLevels();\r\n        int [][] temp = new int[grayLevels[0].length][grayLevels.length];\r\n        for(int y = 0; y < pic.getWidth(); y++)\r\n        {\r\n            for(int x = 0; x < pic.getHeight(); x++)\r\n            {\r\n                temp[y][pic.getHeight()-1-x] = grayLevels[x][y];\r\n            }\r\n        }\r\n        Picture newPic = new Picture(temp);\r\n        return newPic; //just so draft will compile. You will change it in the final\r\n    }\r\n}","testcases":"\r\npublic class PictureManipulationDemo\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        final int SPACER = 10;\r\n        Picture pic = new Picture(\"resources//courseware//programs//PictureManipulationDemo//renoir1.jpg\");\r\n        pic.draw();\r\n        Picture flipped = PictureUtil.grayAndFlipLeftToRight(pic);\r\n        flipped.translate(pic.getWidth() + SPACER, 0);\r\n        flipped.draw();\r\n        Picture rotated =  PictureUtil.grayAndRotate90(pic);\r\n        rotated.translate(2 * pic.getWidth() + 2 * SPACER, 0);\r\n        rotated.draw();\r\n        Canvas.getInstance().snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\PictureManipulationDemo.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"PictureManipulationDemo","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"21.16"},{"title":"Question #2 - Window Glass","question":"//Java Windows makes stained glass windows of one particular shape. The windows are\n//rectangular with a semi-circle on top. You are given the beginning of a class\n//WindowShape to model a window of that shape. You are to provide two methods\n//that can be used to calculate area. That will tell us how much glass we will need.\n//Provide an instance method area() that returns the area of the window that called it.\n//(we would use this if we already had the WindowShape object and wanted its area)\n\n//Provide a static method area() that takes the width and height of the rectangular part\n//of the window and returns the area of the entire window - including the semi-circle\n//on top.\n//(we would use this method if we didn't have a WindowShape object and did not need\n//to create one)\n\n//You are not given these method headers in this exercise. That is part of what you\n//need to figure out.\n\n//Use Math.PI\n\n//Here is link to a window with that shape.\n//http://i.imgur.com/Wx1Klzw.png\n\n// Need help starting this question? In the lesson titled \n// \"Starting points: Problem Set Questions\", go to the\n// problem titled \"Problem Set 8 - Question 2\" for some tips on \n// how to begin.\n\n/**\n * Models a window of a particular shape - namely a rectangle with a semi-circle on top\n */\npublic class WindowShape\n{\n\n    private double w;\n    private double h;\n\n    /**\n     * Constructor for objects of class WindowShape\n     * @param width the width of the rectangle and diameter of the semi-circle\n     * @param height the height of the rectangle alone\n     */\n    public WindowShape(double width, double height)\n    {\n        w = width;\n        h = height;\n    }\n\n    /**\n     * Gets the width of this shape\n     * @return the width\n     */\n    public double getWidth()\n    {\n        return w;\n    }\n\n    /**\n     * Gets the height of this shape\n     * @return the height\n     */\n    public double getHeight()\n    {\n        return h;\n    }\n\n    // other methods for dealing with windows ...\n\n    // TODO: Write an instance method to get the area of the shape\n\n    // TODO: Write a static method that takes the width and height of the rectangle\n    // as parameters and returns the area of a rectangle wiht those dimensions and with a\n    // semi-circle on top.\n}\n\n","classname":"WindowShape","expectedoutput":"","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"21.17"},{"title":"Question #3 - Robot","question":"// Implement a class Robot that simulates a robot wandering randomly on an infinite plane.\n//The robot is located at a point with integer coordinates. It initially faces \"North\" - \n//the top of the window.\n\n//Supply a constructor that specifies the initial x, y coordinates of the robot as ints.\n\n//Supply methods:\n//public void makeRandomMove()\n//public Point getLocation()\n//public double getDistanceFromStart()\n\n//The makeRandomMove method moves the robot by one unit in a random direction.\n// To choose the random direction, generate an int from 0 to 3. \n//  0 is toward the top of the window (north)\n//  1 is towards the bottom of the window (south)\n//  2 is towards the right side of the window (east)\n//  3 is towards the left side of the window (west)\n\n// getLocation() returns a java.awt.Point containing the current x and y location of the Robot\n\n// getDistanceFromStart() returns the distance the robot is from the starting point.\n\n// This problem is an example of describing the design pattern, position of an object.\n\n//You would expect that if the robot is moving randomly that he would wind up very close to\n//where he started, but that is not true. It would take more of a mathematician than I am to\n//explain why. But it is interesting. You can comment out the generator.setSeed(...) statement\n//and see lots of different outcomes. But do not forget to put the statement back in. When you\n//\"seed\" a random number generator with a starting value, it will give the same sequence of \n//values every time. That is what makes it possible to test your programs. If we both start\n//with the same seed in the random number generator, we should get the same answers.\n\n// Need help starting this question? In the lesson titled \n// \"Starting points: Problem Set Questions\", go to the\n// problem titled \"Problem Set 8 - Question 3\" for some tips on \n// how to begin.\n\nimport java.awt.Point;\nimport java.util.Random;\n/**\n * Simulates a robot wandering randomly on an infinite plane\n */\npublic class Robot\n{\n    // TODO: define other instance variables\n\n    private Random generator;\n\n    /**\n     * Constructor for objects of class Robot\n     * @param theX the x coordinate\n     * @param theY the y coordinate\n     */\n    public Robot(int theX, int theY)\n    {\n        // TODO: Complete the constructor\n\n        generator = new Random();\n        generator.setSeed(12345);  //do not change this statement\n    }\n\n    // TODO Supply getLocation\n    public Point getLocation()\n    {\n        return null;\n    }\n    // TODO: Supply the methods of the Robot class\n\n}\n\n\n","classname":"Robot","expectedoutput":"","programtype":"stdin","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"21.18"}]},"22":{"title":"Interfaces and Inheritance","lessons":[{"title":" Unifying Common Behavior","video":"videos/module14/01 - Unifying Common Behavior.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.1"},{"title":"Quiz - Unifying Common Behaviour","question":"// BlueJ project: lesson9/scene1\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\npublic class Scene1\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<House> houses = new ArrayList<House>();\r\n        houses.add(new House(100, 150, 100, 100));\r\n        houses.add(new House(250, 100, 150, 150));\r\n\r\n        ArrayList<Dog> dogs = new ArrayList<Dog>();\r\n        dogs.add(new Dog(200, 100, \"resources//courseware//programs//Scene1//Fido.jpg\"));\r\n        dogs.add(new Dog(100, 400, \"resources//courseware//programs//Scene1//Rex.jpg\"));\r\n        dogs.add(new Dog(200, 400, \"resources//courseware//programs//Scene1//Lucky.jpg\"));\r\n\r\n        // Add cars at (100, 300), (250, 300), (250, 350)\r\n\r\n        for (House h : houses)\r\n        {\r\n            h.draw();\r\n        }\r\n        for (Dog d : dogs)\r\n        {\r\n            d.draw();\r\n        }\r\n        Canvas.getInstance().snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\n","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\scene1.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"Scene1","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"22.2"},{"title":" Unifying Common Behavior","video":"videos/module14/2 - Unifying","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.3"},{"title":" Defining an Interface Type","video":"videos/module14/03 - Defining an Interface Type.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.4"},{"title":" Implementing an Interface Type","video":"videos/module14/04 - Implementing an Interface Type.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.5"},{"title":" Converting from Class to Interface","video":"videos/module14/05 - Converting from Class to Interface.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.6"},{"title":"Quiz - Converting from Class to Interface","question":"// BlueJ project: lesson9/scene2\r\n\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\npublic class Scene2\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // TODO: Change to an ArrayList<Drawable>\r\n\r\n        ArrayList<Car> Cars = new ArrayList<Car>();\r\n        Cars.add(new Car(100, 300));\r\n        Cars.add(new Car(250, 300));\r\n        Cars.add(new Car(250, 350));\r\n\r\n        ArrayList<House> houses = new ArrayList<House>();\r\n        Houses.add(new House(100, 150, 100, 100));\r\n        Houses.add(new House(250, 100, 150, 150));\r\n\r\n        ArrayList<Dog> dogs = new ArrayList<Dog>();\r\n        Dogs.add(new Dog(200, 100, \"resources//courseware//programs//scene2//Fido.jpg\"));\r\n        Dogs.add(new Dog(100, 400, \"resources//courseware//programs//scene2//Rex.jpg\"));\r\n        Dogs.add(new Dog(200, 400, \"resources//courseware//programs//scene2//Lucky.jpg\"));\r\n\r\n        TODO: Change to a single loop\r\n        for (Car c : cars)\r\n        {\r\n            c.draw();\r\n        }\r\n        for (House h : houses)\r\n        {\r\n            h.draw();\r\n        }\r\n        for (Dog d : dogs)\r\n        {\r\n            d.draw();\r\n        }\r\n        Canvas.getInstance().snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\scene2.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"Scene2","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"22.7"},{"title":" Converting from Class to Interface","video":"videos/module14/6 - Converting","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.8"},{"title":" House Equals New Dog","video":"videos/module14/07 - House Equals New Dog.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.9"},{"title":"House Equals New Dog ","question":"<img src='images/Lesson 9/9.1.jpg' alt='image'><br><p style='text-align:left; color:green; font-size:20px'><input name='option' value='a' id=\"quizinput1\" type=\"radio\">&nbsp;The program will declare a variable of type House and store a new Dog in it.</input><br><input name='option' value='b' id=\"quizinput2\" type=\"radio\">&nbsp;Error: incompatible types. Dog is not a kind of House</input><br><input name='option' value='c' id=\"quizinput3\" type=\"radio\">&nbsp;Error: Dog is abstract; cannot be instantiated.</input>","answer":["06"],"type":"quiz","tips":"","qid":"22.10"},{"title":" House Equals New Dog","video":"videos/module14/8 - House","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.11"},{"title":" Drawable Equals New Drawable","video":"videos/module14/09 - Drawable Equals New Drawable.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.12"},{"title":"Drawable Equals New Drawable","question":"<img src='images/Lesson 9/9.2.jpg' alt='image'><br><p style='text-align:left; color:green; font-size:20px'><input name='option' value='a' id=\"quizinput1\" type=\"radio\">&nbsp;You can't assign an object of a class to a variable of an interface type.</input><br><input name='option' value='b' id=\"quizinput2\" type=\"radio\">&nbsp;You can't construct an interface type</input><br><input name='option' value='c' id=\"quizinput3\" type=\"radio\">&nbsp;You can't assign an object of a class to a variable of an interface type the object's class does not implement.</input>","answer":["06"],"type":"quiz","tips":"","qid":"22.13"},{"title":" Drawable Equals New Drawable","video":"videos/module14/10 - Drawable","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.14"},{"title":" Drawable Equals New Rectangle","video":"videos/module14/11 - Drawable Equals New Rectangle.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.15"},{"title":"Drawable Equals New Rectangle","question":"<img src='images/Lesson 9/9.3.jpg' alt='image'><br><p style='text-align:left; color:green; font-size:20px'><input name='option' value='a' id=\"quizinput1\" type=\"radio\">&nbsp;You can't assign an object of a class to a variable of an interface type.</input><br><input name='option' value='b' id=\"quizinput2\" type=\"radio\">&nbsp;You can't assign a value of an interface type to a variable of a class type.</input><br><input name='option' value='c' id=\"quizinput3\" type=\"radio\">&nbsp;You can't assign an object of a class to a variable of an interface type the object's class does not implement.</input>","answer":["07"],"type":"quiz","tips":"","qid":"22.16"},{"title":" Drawable Equals New Rectangle","video":"videos/module14/12 - Drawable","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.17"},{"title":" Polymorphism","video":"videos/module14/13 - Polymorphism.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.18"},{"title":"Quiz - Polymorphism","question":"// BlueJ project: lesson9/scene3\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\npublic class Scene3\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<Drawable> elements = new ArrayList<Drawable>();\r\n        elements.add(new Car(100, 300));\r\n        elements.add(new Car(250, 300));\r\n        elements.add(new Car(250, 350));\r\n\r\n        elements.add(new House(100, 150, 100, 100));\r\n        elements.add(new House(250, 100, 150, 150));\r\n\r\n        elements.add(new Dog(200, 100, \"resources//courseware//programs//scene3//Fido.jpg\"));\r\n        elements.add(new Dog(100, 400, \"resources//courseware//programs//scene3//Rex.jpg\"));\r\n        elements.add(new Dog(200, 400, \"resources//courseware//programs//scene3//Lucky.jpg\"));\r\n\r\n        // TODO: Add a red ball at (400, 400)\r\n        \r\n        for (Drawable d : elements)\r\n        {\r\n            d.draw();\r\n        }\r\n        Canvas.getInstance().snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\n","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\scene3.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"Scene3","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"22.19"},{"title":" Polymorphism","video":"videos/module14/14 - Polymorphism.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.20"},{"title":" A Second Interface","video":"videos/module14/15 - A Second Interface.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.21"},{"title":"Quiz - A Second Interface","question":"// BlueJ project: lesson9/scene4\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\npublic class Scene4\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<Drawable> elements = new ArrayList<Drawable>();\r\n        Car car1 = new Car(100, 300);\r\n        elements.add(car1);\r\n        elements.add(new Car(250, 300));\r\n        elements.add(new Car(250, 350));\r\n\r\n        elements.add(new House(100, 150, 100, 100));\r\n        elements.add(new House(250, 100, 150, 150));\r\n\r\n        Dog dog1 = new Dog(200, 100, \"resources//courseware//programs//scene4//Fido.jpg\");\r\n        elements.add(dog1);\r\n        elements.add(new Dog(100, 400, \"resources//courseware//programs//scene4//Rex.jpg\"));\r\n        elements.add(new Dog(200, 400, \"resources//courseware//programs//scene4//Lucky.jpg\"));\r\n\r\n        for (Drawable d : elements)\r\n        {\r\n            d.draw();\r\n        }\r\n\r\n        // TODO: Also move Fido\r\n\r\n        for (int i = 1; i <= 10; i++)\r\n        {\r\n            car1.move(1);\r\n            Canvas.snapshot();\r\n        }\r\n        Canvas.getInstance().snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\n\r\n// BlueJ project: lesson9/scene4\r\n/*\r\n   TODO: Dogs should be moveable.\r\n   They move one pixel downwards every second.\r\n*/\r\n\r\nclass Dog implements Drawable\r\n{\r\n    private Picture pic;\r\n    private Text name;\r\n\r\n    public Dog(int x, int y, String file)\r\n    {\r\n        pic = new Picture(file);\r\n        pic.translate(x, y);\r\n        name = new Text(x, y + pic.getHeight(),\r\n                        file.substring(file.indexOf(\"4//\")+3, file.indexOf(\".\")));\r\n    }\r\n\r\n    public void draw()\r\n    {\r\n        pic.draw();\r\n        name.draw();\r\n    }\r\n}\r\n","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\scene4.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"Scene4","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"22.22"},{"title":" A Second Interface","video":"videos/module14/16 - A","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.23"},{"title":" Instanceof Test and Cast","video":"videos/module14/17 - Instanceof Test and Cast.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.24"},{"title":"Quiz - A Second Interface","question":"// BlueJ project: lesson9/scene5\r\nimport java.util.ArrayList;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.awt.Image;\r\nimport java.awt.Toolkit;\r\nimport java.awt.image.PixelGrabber;\r\nimport java.util.Scanner;\r\n\r\npublic class Scene5\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<Drawable> elements = new ArrayList<Drawable>();\r\n        elements.add(new Car(100, 300));\r\n        elements.add(new Car(250, 300));\r\n        elements.add(new Car(250, 350));\r\n\r\n        elements.add(new House(100, 150, 100, 100));\r\n        elements.add(new House(250, 100, 150, 150));\r\n\r\n        elements.add(new Dog(200, 100, \"resources//courseware//programs//scene5//Fido.jpg\"));\r\n        elements.add(new Dog(100, 400, \"resources//courseware//programs//scene5//Rex.jpg\"));\r\n        elements.add(new Dog(200, 400, \"resources//courseware//programs//scene5//Lucky.jpg\"));\r\n\r\n        for (Drawable d : elements)\r\n        {\r\n            d.draw();\r\n        }\r\n\r\n        for (int i = 1; i <= 10; i++)\r\n        {\r\n            for (Drawable d : elements)\r\n            {\r\n                // TODO: Move those elements that are moveable for 1 second each\r\n            }\r\n            Canvas.snapshot();\r\n        }\r\n        Canvas.getInstance().snapshot();\r\n        CheckOutput out = new CheckOutput();\r\n        out.compareOutput();\r\n    System.exit(0); \r\n    }\r\n}\r\n","testcases":"\nclass CheckOutput{\r\n    public void compareOutput()\r\n   {\r\n        String file1 = \"resources\\\\courseware\\\\program_images\\\\answer.png\";\r\n        String file2 = \"resources\\\\courseware\\\\program_images\\\\scene5.png\";\r\n         \r\n        Image image1 = Toolkit.getDefaultToolkit().getImage(file1);\r\n        Image image2 = Toolkit.getDefaultToolkit().getImage(file2);\r\n         \r\n        try {\r\n         \r\n        PixelGrabber grab1 =new PixelGrabber(image1, 0, 0, -1, -1, false);\r\n        PixelGrabber grab2 =new PixelGrabber(image2, 0, 0, -1, -1, false);\r\n         \r\n        int[] data1 = null;\r\n         \r\n        if (grab1.grabPixels()) {\r\n        int width = grab1.getWidth();\r\n        int height = grab1.getHeight();\r\n        data1 = new int[width * height];\r\n        data1 = (int[]) grab1.getPixels();\r\n        }\r\n         \r\n        int[] data2 = null;\r\n         \r\n        if (grab2.grabPixels()) {\r\n        int width = grab2.getWidth();\r\n        int height = grab2.getHeight();\r\n        data2 = new int[width * height];\r\n        data2 = (int[]) grab2.getPixels();\r\n        }\r\n         \r\n        System.out.println(\"Testcase Passed: \" + java.util.Arrays.equals(data1, data2));\r\n         \r\n        } catch (InterruptedException e1) {\r\n        e1.printStackTrace();\r\n        }\r\n \r\n   }\r\n}","classname":"Scene5","programtype":"graphic","type":"program","tips":"Video Source: udacity.com <br> Intro to Java Programming <br><br> <a>https://www.udacity.com/wiki/cs046/factsheets</a>","qid":"22.25"},{"title":" Instanceof Test and Cast","video":"videos/module14/18 - Instanceof","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.26"},{"title":" What If We Forget to Check the Type","video":"videos/module14/19 - What If We Forget to Check the Type.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.27"},{"title":"What If We Forget to Check the Type?","question":"<img src='images/Lesson 9/9.4.jpg' alt='image'><br><p style='text-align:left; color:green; font-size:20px'><input name='option' value='a' id=\"quizinput1\" type=\"radio\">&nbsp;The program will run the same as before.</input><br><input name='option' value='b' id=\"quizinput2\" type=\"radio\">&nbsp;The Houses move even though they should be stationary.</input><br><input name='option' value='c' id=\"quizinput3\" type=\"radio\">&nbsp;There will be a compile time error because Drawables can't be cast to type moveable</input><br><input name='option' value='d' id=\"quizinput4\" type=\"radio\">&nbsp;There will be a run-time error because some Drawables cannot be cast to type Moveable</input>","answer":["00"],"type":"quiz","tips":"","qid":"22.28"},{"title":" What If We Forget to Check the Type","video":"videos/module14/20 - What","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.29"},{"title":" When Casting Goes Wrong","video":"videos/module14/21 - When Casting Goes Wrong.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.30"},{"title":" Using Interfaces for Algorithm Reuse Average Area","video":"videos/module14/22 - Using Interfaces for Algorithm Reuse Average Area.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.31"},{"title":"Quiz","question":"// BlueJ project: lesson9/measure1\r\n\r\npublic class Data\r\n{\r\n    /**\r\n       Computes the average area of the given countries.\r\n       @param objects an array of Country objects\r\n       @return the average of the areas\r\n    */\r\n    public static double average(Country[] objects)\r\n    {\r\n        // TODO: Compute the average area\r\n        double sum = 0;\r\n        for (Country obj : objects)\r\n        {\r\n            ...\r\n        }\r\n        return ...\r\n    }\r\n}\r\n","classname":"Data","expectedoutput":"","programtype":"stdin","type":"program","qid":"22.32"},{"title":" Using Interfaces for Algorithm Reuse Average Area","video":"videos/module14/23 - Using","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.33"},{"title":" Average Mileage","video":"videos/module14/24 - Average Mileage.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.34"},{"title":"Quiz","question":"// BlueJ project: lesson9/measure2\r\n\r\npublic class Data\r\n{\r\n    /**\r\n       Computes the average area of the given countries.\r\n       @param objects an array of Country objects\r\n       @return the average of the areas\r\n    */\r\n    public static double average(Country[] objects)\r\n    {\r\n        double sum = 0;\r\n        for (Country obj : objects)\r\n        {\r\n            sum = sum + obj.getArea();\r\n        }\r\n        if (objects.length > 0)\r\n        {\r\n            return sum / objects.length;\r\n        }\r\n        else\r\n        {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n       Computes the average fuel efficency of the given cars.\r\n       @param objects an array of Car objects\r\n       @return the average of the fuel efficiencies\r\n    */\r\n    public static double average(Car[] objects)\r\n    {\r\n        // TODO: Compute the average fuel efficiency\r\n    }\r\n}\r\n","classname":"Data","expectedoutput":"","programtype":"stdin","type":"program","qid":"22.35"},{"title":" Average Mileage","video":"videos/module14/25 - Average","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.36"},{"title":" Average Anything","video":"videos/module14/26 - Average Anything.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.37"},{"title":"Quiz","question":"// BlueJ project: lesson9/measure3\r\n\r\npublic class Data\r\n{\r\n    /**\r\n       Computes the average measure of the given objects.\r\n       @param objects an array of Measurable objects\r\n       @return the average of the measures\r\n    */\r\n    public static double average(Measurable[] objects)\r\n    {\r\n        // TODO: Compute the average measure\r\n        double sum = 0;\r\n        for (... obj : objects)\r\n        {\r\n            ...\r\n        }\r\n        if (objects.length > 0)\r\n        {\r\n            return sum / objects.length;\r\n        }\r\n        else\r\n        {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n","classname":"Data","expectedoutput":"","programtype":"stdin","type":"program","qid":"22.38"},{"title":" Average Anything","video":"videos/module14/27 - Average","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.39"},{"title":" Largest Anything","video":"videos/module14/28 - Largest Anything.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.40"},{"title":"Quiz","question":"// BlueJ project: lesson9/measure4\r\n\r\npublic class Data\r\n{\r\n    /**\r\n       Computes the average measure of the given objects.\r\n       @param objects an array of Measurable objects\r\n       @return the average of the measures\r\n    */\r\n    public static double average(Measurable[] objects)\r\n    {\r\n        double sum = 0;\r\n        for (Measurable obj : objects)\r\n        {\r\n            sum = sum + obj.getMeasure();\r\n        }\r\n        if (objects.length > 0)\r\n        {\r\n            return sum / objects.length;\r\n        }\r\n        else\r\n        {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n       Computes the largest of the given objects.\r\n       @param objects an array of Measurable objects\r\n       @return the object with the largest measure\r\n    */\r\n    public static Measurable largest(Measurable[] objects)\r\n    {\r\n        if (objects.length == 0)\r\n        {\r\n            return null;\r\n        }\r\n        Measurable largestSoFar = objects[0];\r\n        for (int i = 1; i < objects.length; i++)\r\n        {\r\n            //your code here\r\n        }\r\n        return largestSoFar;\r\n    }\r\n}\r\n","classname":"Data","expectedoutput":"","programtype":"stdin","type":"program","qid":"22.41"},{"title":" Largest Anything","video":"videos/module14/29 - Largest","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.42"},{"title":" Casting the Largest Back to a Country","video":"videos/module14/30 - Casting the Largest Back to a Country.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.43"},{"title":"Quiz","question":"// BlueJ project: lesson9/measure5\r\n\r\npublic class LargestTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Country[] centralAmericanCountries =\r\n        {\r\n            new Country(\"Belize\", 22966),\r\n            new Country(\"Costa Rica\", 51100),\r\n            new Country(\"El Salvador\", 21041),\r\n            new Country(\"Guatemala\", 108889),\r\n            new Country(\"Honduras\", 112492),\r\n            new Country(\"Nicaragua\", 130373),\r\n            new Country(\"Panama\", 75417)\r\n        };\r\n\r\n        // TODO: We want this as a Country, not as Measurable, so we can\r\n        // call getName. But it doesn't work. Fix the code so that it does.\r\n        Country largestCountry = Data.largest(centralAmericanCountries);\r\n        System.out.println(\"Largest country: \" + largestCountry.getName());\r\n        System.out.println(\"Expected: Nicaragua\");\r\n    }\r\n}\r\n","classname":"LargestTester","expectedoutput":"","programtype":"stdin","type":"program","qid":"22.44"},{"title":" Casting the Largest Back to a Country","video":"videos/module14/31 - Casting","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.45"},{"title":" Compare To","video":"videos/module14/32 - Compare To.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.46"},{"title":" Strings Are Comparable","video":"videos/module14/33 - Strings Are Comparable.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.47"},{"title":"Strings Are Comparable","question":"<img src='images/Lesson 9/9.5.jpg' alt='image'><br><p style='text-align:left; color:green; font-size:20px'><input name='option' value='a' id=\"quizinput1\" type=\"radio\">&nbsp;&nbsp;-4</input><br><input name='option' value='b' id=\"quizinput2\" type=\"radio\">&nbsp;&nbsp;4</input><br><input name='option' value='c' id=\"quizinput3\" type=\"radio\">&nbsp;&nbsp;0</input><br><input name='option' value='c' id=\"quizinput4\" type=\"radio\">&nbsp;&nbsp;true</input><br><input name='option' value='c' id=\"quizinput5\" type=\"radio\">&nbsp;&nbsp;false</input>","answer":["05"],"type":"quiz","tips":"","qid":"22.48"},{"title":" Strings Are Comparable","video":"videos/module14/34 - Strings","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.49"},{"title":" Implementing Comparable","video":"videos/module14/35 - Implementing Comparable.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.50"},{"title":"Quiz","question":"// BlueJ project: lesson9/compareTo1\r\n\r\n// Implement compareTo\r\n/**\r\n   A country with a name and area.\r\n*/\r\npublic class Country implements Measurable, Comparable\r\n{\r\n    private String name;\r\n    private double area;\r\n\r\n    /**\r\n       Constructs a country.\r\n       @param aName the name of the country\r\n       @param anArea the area of the country\r\n    */\r\n    public Country(String aName, double anArea)\r\n    {\r\n        name = aName;\r\n        area = anArea;\r\n    }\r\n\r\n    public int compareTo(Object otherObject)\r\n    {\r\n        // YOUR CODE HERE\r\n        // Implement this method.\r\n        // Countries should be ordered from smallest area to largest.\r\n        // Return a negative number if this country is smaller than other.\r\n        // Return a positive number if this country is larger than other.\r\n        // Return 0 if the two countries are equal. Use .equals.\r\n        // I implemented .equals for you.\r\n        // If the countries are exactly the same size, break ties\r\n        // using the name of the country.\r\n        \r\n    }\r\n\r\n    /**\r\n       Gets the country name.\r\n       @return the name\r\n    */\r\n    public String getName()\r\n    {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n       Gets the area of the country.\r\n       @return the area\r\n    */\r\n    public double getArea()\r\n    {\r\n        return area;\r\n    }\r\n\r\n    /**\r\n       Gets the area of the country.\r\n       @return the area\r\n    */\r\n    public double getMeasure()\r\n    {\r\n        return area;\r\n    }\r\n\r\n    public boolean equals(Object other)\r\n    {\r\n        if (other instanceof Country)\r\n        {\r\n            Country country = (Country) other;\r\n            return this.name.equals(country.name)\r\n                   && this.area == country.area;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public String toString()\r\n    {\r\n        return \"Country[name=\" + name + \" area=\" + area + \"]\";\r\n    }\r\n}\r\n","classname":"Country","expectedoutput":"","programtype":"stdin","type":"program","qid":"22.51"},{"title":" Implementing Comparable","video":"videos/module14/36 - Implementing","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.52"},{"title":" Inheritance","video":"videos/module14/37 - Inheritance.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.53"},{"title":"Inheritance","question":"<img src='images/Lesson 9/9.6.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input><br><input class='input-lg' id=\"quizinput2\" type=\"text\"></input><br><input class='input-lg' id=\"quizinput3\" type=\"text\"></input><br><input class='input-lg' id=\"quizinput4\" type=\"text\"></input>","answer":["179bc2","128bdc99227d7d","0a81da95","078fc6dc377470793345e1"],"type":"quiz","tips":"","qid":"22.54"},{"title":" Inheritance","video":"videos/module14/38 - Inheritance.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.55"},{"title":" The Quiz Hierarchy","video":"videos/module14/39 - The Quiz Hierarchy.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.56"},{"title":"The Quiz Hierarchy","question":"// This is provided for reference. You don't need to modify this file\r\nimport java.util.Scanner;\r\n/**\r\n   A question with a text and an answer.\r\n*/\r\nclass Question\r\n{\r\n    private String text;\r\n    private String answer;\r\n\r\n    /**\r\n       Constructs a question with empty question and answer.\r\n    */\r\n    public Question()\r\n    {\r\n        text = \"\";\r\n        answer = \"\";\r\n    }\r\n\r\n    /**\r\n       Sets the question text.\r\n       @param questionText the text of this question\r\n    */\r\n    public void setText(String questionText)\r\n    {\r\n        text = questionText;\r\n    }\r\n\r\n    /**\r\n       Sets the answer for this question.\r\n       @param correctResponse the answer\r\n    */\r\n    public void setAnswer(String correctResponse)\r\n    {\r\n        answer = correctResponse;\r\n    }\r\n\r\n    /**\r\n       Checks a given response for correctness.\r\n       @param response the response to check\r\n       @return true if the response was correct, false otherwise\r\n    */\r\n    public boolean checkAnswer(String response)\r\n    {\r\n        return response.equals(answer);\r\n    }\r\n\r\n    /**\r\n       Displays this question.\r\n    */\r\n    public void display()\r\n    {\r\n        System.out.println(text);\r\n    }\r\n}\r\n","testcases":"// BlueJ project: lesson9/quiz1\r\n\r\n\r\n/**\r\n   This program shows a simple quiz with two questions.\r\n*/\r\npublic class QuestionDemo\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner in = new Scanner(System.in);\r\n\r\n        Question first = new Question();\r\n        first.setText(\"Who was the inventor of Java?\");\r\n        first.setAnswer(\"James Gosling\");\r\n\r\n        // Make another question second that asks\r\n        // \"Who was the founder of Udacity?\".\r\n        // The answer is \"Sebastian Thrun\"\r\n\r\n        int score = 0;\r\n        score = score + presentQuestion(first, in);\r\n        // Present the second question\r\n        System.out.println(\"Your score: \" + score);\r\n    }\r\n\r\n    /**\r\n       Presents a question to the user and obtains a response.\r\n       @param q the question to present\r\n       @param in the scanner from which to read the user input\r\n       @return the score (1 if correct, 0 if incorrect);\r\n    */\r\n    public static int presentQuestion(Question q, Scanner in)\r\n    {\r\n        // Display the first question\r\n        System.out.println(\"Your answer:\");\r\n        String response = in.nextLine();\r\n        // Check whether the response was correct\r\n        // If so, print \"true\" and return 1\r\n        // Otherwise, print \"false\" and return 0\r\n    }\r\n}\r\n","classname":"QuestionDemo","programtype":"api","type":"program","qid":"22.57"},{"title":" The Quiz Hierarchy","video":"videos/module14/40 - The","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.58"},{"title":" A Subclass","video":"videos/module14/41 - A Subclass.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.59"},{"title":"A Subclass","question":"<img src='images/Lesson 9/9.7.jpg' alt='image'><br><h4>inherits&nbsp;<input class='input-lg' id=\"quizinput1\" type=\"text\"></input><br>overrides &nbsp;<input class='input-lg' id=\"quizinput2\" type=\"text\"></input><br>adds&nbsp;<input class='input-lg' id=\"quizinput3\" type=\"text\"></input></h4>","answer":["178bc0a424696c3c234cf02cfcf00b9ea10387bcd5e4d6457aba42738c","0087c7802d7061","058ad0b3297e717335"],"type":"quiz","tips":"","qid":"22.60"},{"title":" A Subclass","video":"videos/module14/42 - A","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.61"},{"title":" Implementing Subclass Methods","video":"videos/module14/43 - Implementing Subclass Methods.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.62"},{"title":"Quiz","question":"// BlueJ project: lesson9/quiz2\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n   A question with multiple choices.\r\n*/\r\npublic class ChoiceQuestion extends Question\r\n{\r\n    // TODO: Add an ArrayList<String> instance variable to hold the choices\r\n\r\n    /**\r\n       Constructs a choice question with no choices.\r\n    */\r\n    public ChoiceQuestion()\r\n    {\r\n        // TODO: Initialize the list of choices\r\n    }\r\n\r\n    /**\r\n       Adds an answer choice to this question.\r\n       @param choice the choice to add\r\n       @param correct true if this is the correct choice, false otherwise\r\n    */\r\n    public void addChoice(String choice, boolean correct)\r\n    {\r\n        // TODO: Add choice to choices.\r\n        // Ignore the \"correct\" parameter for now\r\n    }\r\n\r\n    public void display()\r\n    {\r\n        // For now, just print the choices\r\n        System.out.println(choices);\r\n    }\r\n}\r\n\r\n","classname":"ChoiceQuestion","expectedoutput":"","programtype":"stdin","type":"program","qid":"22.63"},{"title":" Implementing Subclass Methods","video":"videos/module14/44 - Implementing","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.64"},{"title":" Setting the Answer","video":"videos/module14/45 - Setting the Answer.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.65"},{"title":"Setting the Answer","question":"// BlueJ project: lesson9/quiz3\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n   A question with multiple choices.\r\n*/\r\nclass ChoiceQuestion extends Question\r\n{\r\n    private ArrayList<String> choices;\r\n\r\n    /**\r\n       Constructs a choice question with no choices.\r\n    */\r\n    public ChoiceQuestion()\r\n    {\r\n        choices = new ArrayList<String>();\r\n    }\r\n\r\n    /**\r\n       Adds an answer choice to this question.\r\n       @param choice the choice to add\r\n       @param correct true if this is the correct choice, false otherwise\r\n    */\r\n    public void addChoice(String choice, boolean correct)\r\n    {\r\n        choices.add(choice);\r\n\r\n        // TODO: If this is the correct choice,\r\n        // set the choice number (1, 2, 3, 4) as the answer.\r\n        // Tip #1: What's choices.size()?\r\n        // Tip #2: Use \"\" + n to change n to a string\r\n    }\r\n\r\n    public void display()\r\n    {\r\n        System.out.println(\"...\"); // We'll fix this later\r\n        // Display the answer choices\r\n        for (int i = 0; i < choices.size(); i++)\r\n        {\r\n            int choiceNumber = i + 1;\r\n            System.out.println(choiceNumber + \": \" + choices.get(i));\r\n        }\r\n    }\r\n}\r\n// This is provided for reference. You don't need to modify this file\r\n\r\n/**\r\n   A question with a text and an answer.\r\n*/\r\npublic class Question\r\n{\r\n    private String text;\r\n    private String answer;\r\n\r\n    /**\r\n       Constructs a question with empty question and answer.\r\n    */\r\n    public Question()\r\n    {\r\n        text = \"\";\r\n        answer = \"\";\r\n    }\r\n\r\n    /**\r\n       Sets the question text.\r\n       @param questionText the text of this question\r\n    */\r\n    public void setText(String questionText)\r\n    {\r\n        text = questionText;\r\n    }\r\n\r\n    /**\r\n       Sets the answer for this question.\r\n       @param correctResponse the answer\r\n    */\r\n    public void setAnswer(String correctResponse)\r\n    {\r\n        answer = correctResponse;\r\n    }\r\n\r\n    /**\r\n       Checks a given response for correctness.\r\n       @param response the response to check\r\n       @return true if the response was correct, false otherwise\r\n    */\r\n    public boolean checkAnswer(String response)\r\n    {\r\n        return response.equals(answer);\r\n    }\r\n\r\n    /**\r\n       Displays this question.\r\n    */\r\n    public void display()\r\n    {\r\n        System.out.println(text);\r\n    }\r\n}\r\n\r\n","testcases":"","classname":"Digits","programtype":"api","type":"program","qid":"22.66"},{"title":" Setting the Answer","video":"videos/module14/46 - Setting","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.67"},{"title":" The Display Method","video":"videos/module14/47 - The Display Method.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.68"},{"title":"The Display Method","question":"// BlueJ project: lesson9/quiz4\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n   A question with multiple choices.\r\n*/\r\npublic class ChoiceQuestion extends Question\r\n{\r\n    private ArrayList<String> choices;\r\n\r\n    /**\r\n       Constructs a choice question with no choices.\r\n    */\r\n    public ChoiceQuestion()\r\n    {\r\n        choices = new ArrayList<String>();\r\n    }\r\n\r\n    /**\r\n       Adds an answer choice to this question.\r\n       @param choice the choice to add\r\n       @param correct true if this is the correct choice, false otherwise\r\n    */\r\n    public void addChoice(String choice, boolean correct)\r\n    {\r\n        choices.add(choice);\r\n\r\n        if (correct)\r\n        {\r\n            String choiceString = \"\" + choices.size();\r\n            setAnswer(choiceString);\r\n        }\r\n    }\r\n\r\n    public void display()\r\n    {\r\n        // TODO: Display the question text\r\n\r\n        // Display the answer choices\r\n        for (int i = 0; i < choices.size(); i++)\r\n        {\r\n            int choiceNumber = i + 1;\r\n            System.out.println(choiceNumber + \": \" + choices.get(i));\r\n        }\r\n    }\r\n}\r\n// This is provided for reference. You don't need to modify this file\r\n\r\n/**\r\n   A question with a text and an answer.\r\n*/\r\nclass Question\r\n{\r\n    private String text;\r\n    private String answer;\r\n\r\n    /**\r\n       Constructs a question with empty question and answer.\r\n    */\r\n    public Question()\r\n    {\r\n        text = \"\";\r\n        answer = \"\";\r\n    }\r\n\r\n    /**\r\n       Sets the question text.\r\n       @param questionText the text of this question\r\n    */\r\n    public void setText(String questionText)\r\n    {\r\n        text = questionText;\r\n    }\r\n\r\n    /**\r\n       Sets the answer for this question.\r\n       @param correctResponse the answer\r\n    */\r\n    public void setAnswer(String correctResponse)\r\n    {\r\n        answer = correctResponse;\r\n    }\r\n\r\n    /**\r\n       Checks a given response for correctness.\r\n       @param response the response to check\r\n       @return true if the response was correct, false otherwise\r\n    */\r\n    public boolean checkAnswer(String response)\r\n    {\r\n        return response.equals(answer);\r\n    }\r\n\r\n    /**\r\n       Displays this question.\r\n    */\r\n    public void display()\r\n    {\r\n        System.out.println(text);\r\n    }\r\n}\r\n\r\n","testcases":"","classname":"Digits","programtype":"api","type":"program","qid":"22.69"},{"title":" The Display Method","video":"videos/module14/48 - The","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.70"},{"title":" Can We Mix Question Types","video":"videos/module14/49 - Can We Mix Question Types.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.71"},{"title":"Can We Mix Question Types","question":"<img src='images/Lesson 9/9.8.jpg' alt='image'><br><p style='text-align:left; color:green; font-size:20px'><div class='col-md-1'><br><input name='option' value='a' id=\"quizinput1\" type=\"radio\"></input><br><br><input name='option' value='b' id=\"quizinput2\" type=\"radio\"></input><br><br><br><br><input name='option' value='c' id=\"quizinput3\" type=\"radio\"></input><br><br><br><input name='option' value='c' id=\"quizinput4\" type=\"radio\"></input></div><div class='col-md-11'><img src='images/Lesson 9/9.8.1.jpg'></div>","answer":["06"],"type":"quiz","tips":"","qid":"22.72"},{"title":" Can We Mix Question Types","video":"videos/module14/50 - Can","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.73"},{"title":" Mixing Question Types","video":"videos/module14/51 - Mixing Question Types.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.74"},{"title":" Which Display Method Is Called","video":"videos/module14/52 - Which Display Method Is Called.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.75"},{"title":"Which Display Method Is Called","question":"<img src='images/Lesson 9/9.9.jpg' alt='image'><br><p style='text-align:left; color:green; font-size:20px'><input name='option' value='a' id=\"quizinput1\" type=\"radio\">&nbsp;Always Question.display</input><br><input name='option' value='b' id=\"quizinput2\" type=\"radio\">&nbsp;Always ChoiceQuestion.display</input><br><input name='option' value='c' id=\"quizinput3\" type=\"radio\">&nbsp;Sometimes Question.display, sometimes choiceQuestion.display</input><br><input name='option' value='d' id=\"quizinput4\" type=\"radio\">&nbsp;It would be something else</input>","answer":["00"],"type":"quiz","tips":"","qid":"22.76"},{"title":" Which Display Method Is Called","video":"videos/module14/53 - Which","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.77"},{"title":" The Right Display Method Is Called","video":"videos/module14/54 - The Right Display Method Is Called.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.78"},{"title":"The Right Display Method Is Called","question":"<img src='images/Lesson 9/9.10.jpg' alt='image'><br><p style='text-align:left; color:green; font-size:20px'><input name='option' value='a' id=\"quizinput1\" type=\"radio\">&nbsp;OO Programming</input><br><input name='option' value='b' id=\"quizinput2\" type=\"radio\">&nbsp;Encapsulation</input><br><input name='option' value='c' id=\"quizinput3\" type=\"radio\">&nbsp;Inheritance</input><br><input name='option' value='d' id=\"quizinput4\" type=\"radio\">&nbsp;Polymorphism</input>","answer":["00"],"type":"quiz","tips":"","qid":"22.79"},{"title":" The Right Display Method Is Called","video":"videos/module14/55 - The","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.80"},{"title":" Numeric Question","video":"videos/module14/56 - Numeric Question.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.81"},{"title":"Quiz","question":"// BlueJ project: lesson9/quiz6\r\n\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n   A question with a numeric answer.\r\n*/\r\npublic class NumericQuestion\r\n// TODO: Specify superclass\r\n{\r\n    private double tolerance;\r\n    // TODO: Provide any needed instance variables\r\n\r\n    /**\r\n       Constructs a numeric question.\r\n       @param aTolerance the tolerance that is allowed when\r\n       checking the answer. For example, if tolerance is 0.01, then\r\n       the response may be up to 0.01 away from the correct answer.\r\n    */\r\n    public NumericQuestion(double aTolerance)\r\n    {\r\n        this.tolerance = aTolerance;\r\n    }\r\n\r\n    public void setAnswer(double number)\r\n    {\r\n        // TODO: Implement this method\r\n    }\r\n\r\n    public boolean checkAnswer(String response)\r\n    {\r\n        // TODO: Implement this method\r\n        // Hint: Double.parseDouble converts a string\r\n        // containing digits and a decimal point\r\n        // into a floating-point number. For example,\r\n        // Double.parseDouble(\"3.14\") is 3.14.\r\n    }\r\n}\r\n","classname":"NumericQuestion","expectedoutput":"","programtype":"stdin","type":"program","qid":"22.82"},{"title":" Numeric Question","video":"videos/module14/57 - Numeric","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.83"},{"title":" Summary","video":"videos/module14/58 - Summary.mp4","type":"lesson","tips":"Video Source: udacity.com <br> Intro to Java Programming","qid":"22.84"}]},"23":{"title":"Problem Set 9","lessons":[{"title":"Short problem 1 - Interface","question":"<img src='images/Problem Set 9/9.1.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0d80c0953377797335"],"type":"quiz","tips":"","qid":"23.1"},{"title":"Short problem 2 - Interface2","question":"<img src='images/Problem Set 9/9.2.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["149bd69c287238663f40e04de0e61d9ffb06df"],"type":"quiz","tips":"","qid":"23.2"},{"title":"Short problem 3 -  Implementing Interface","question":"<img src='images/Problem Set 9/9.3.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0d83c49c247c7d7e245aa42ae0ec0b9ab14381"],"type":"quiz","tips":"","qid":"23.3"},{"title":"Short problem 4 -  Interface 3","question":"<img src='images/Problem Set 9/9.4.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":[""],"type":"quiz","tips":"","qid":"23.4"},{"title":"Short problem 5 -   Comparable","question":"<img src='images/Problem Set 9/9.5.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0781d98020637d443f01ad"],"type":"quiz","tips":"","qid":"23.5"},{"title":"Short Problem 6 -  Unit Circle","question":"// Here is a class called UnitCircle. Its radius is an int. A couple of methods have been\r\n// provided.\r\n\r\n// Add the code so that the UnitCircle class implements the Comparable interface\r\n\r\n/**\r\n * Represents a circle whose radius is multiples of the unit circle - a circle with radius 1\r\n */\r\n// TODO: add everything necessary for this class to implement Comparable\r\n// HINT: There are two things you need to do\r\npublic class UnitCircle\r\n{\r\n    private int radius;\r\n\r\n    public UnitCircle(int radius)\r\n    {\r\n        this.radius = radius;\r\n    }\r\n\r\n    public int getRadius()\r\n    {\r\n        return radius;\r\n    }\r\n\r\n    public String toString()\r\n    {\r\n        return \"UnitCircle[r=\" + radius + \"]\";\r\n    }\r\n\r\n\r\n    //... other methods\r\n\r\n}\r\n","classname":"UnitCircle","expectedoutput":"","programtype":"stdin","type":"program","qid":"23.6"},{"title":"Short Problem 7 - Comparable Interface ","question":"<img src='images/Problem Set 9/9.7.jpg' alt='image'><br><h4 style='text-align:left; color:green; font-size:20px;'>Comparable c1 = new String('Hello');&nbsp;&nbsp;<input name='option' value='a' id=\"quizinput1\" type=\"radio\">&nbsp;valid</input>&nbsp;&nbsp;<input name='option' value='b' id=\"quizinput2\" type=\"radio\">&nbsp;Invalid</input><br><br>Comparable c2 = new Integer(42);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input name='option' value='c' id=\"quizinput3\" type=\"radio\">&nbsp;valid</input>&nbsp;&nbsp;<input name='option' value='d' id=\"quizinput4\" type=\"radio\">&nbsp;Invalid</input><br><br>Comparable c3 = new Comparable();&nbsp;&nbsp;<input name='option' value='e' id=\"quizinput5\" type=\"radio\">&nbsp;valid</input>&nbsp;&nbsp;<input name='option' value='f' id=\"quizinput6\" type=\"radio\">&nbsp;Invalid</input><br><br>String s = c1;&nbsp;&nbsp;<input name='option' value='g' id=\"quizinput7\" type=\"radio\">&nbsp;valid</input>&nbsp;&nbsp;<input name='option' value='h' id=\"quizinput8\" type=\"radio\">&nbsp;Invalid</input>","answer":["05","07","02","0c"],"type":"quiz","tips":"","qid":"23.7"},{"title":"Short Problem 8 - Cast","question":"// Complete the method getLength() which takes a Comparable object as its parameter.\r\n// If the parameter references a String object, return the length of the String\r\n// otherwise return -1.\r\n\r\npublic class DataMethods\r\n{\r\n    /**\r\n     * Gets the length of the object if it is a string\r\n     * @param c the object wehose length we want\r\n     * @return the length if the object is a string otherwise -1\r\n     */\r\n\r\n    // TODO: implement the method described by this javadoc\r\n}\r\n","classname":"DataMethods","expectedoutput":"","programtype":"stdin","type":"program","qid":"23.8"},{"title":"Short Problem 9 - Smallest","question":"// Add static method to the Data class to return the smallest object in\r\n// an array of objects that implement the measurable interface\r\n\r\npublic class Data\r\n{\r\n    /**\r\n       Computes the average measure of the given objects.\r\n       @param objects an array of Measurable objects\r\n       @return the average of the measures\r\n    */\r\n    public static double average(Measurable[] objects)\r\n    {\r\n        double sum = 0;\r\n        for (Measurable obj : objects)\r\n        {\r\n            sum = sum + obj.getMeasure();\r\n        }\r\n        if (objects.length > 0)\r\n        {\r\n            return sum / objects.length;\r\n        }\r\n        else\r\n        {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n       Computes the largest of the given objects.\r\n       @param objects an array of Measurable objects\r\n       @return the object with the largest measure\r\n    */\r\n    public static Measurable largest(Measurable[] objects)\r\n    {\r\n        if (objects.length == 0)\r\n        {\r\n            return null;\r\n        }\r\n        Measurable largestSoFar = objects[0];\r\n        for (int i = 1; i < objects.length; i++)\r\n        {\r\n            Measurable current = objects[i];\r\n            if (current.getMeasure() > largestSoFar.getMeasure())\r\n            {\r\n                largestSoFar = current;\r\n            }\r\n        }\r\n        return largestSoFar;\r\n    }\r\n\r\n    /**\r\n       Computes the smallest of the given objects.\r\n       @param objects an array of Measurable objects\r\n       @return the object with the smallest measure\r\n    */\r\n     // TODO: implement the smallest method described in the javadoc\r\n}\r\n","classname":"Data","expectedoutput":"","programtype":"stdin","type":"program","qid":"23.9"},{"title":"Short Problem 10 - Super class ","question":"<img src='images/Problem Set 9/9.10.jpg' alt='image'><br><p style='text-align:left; color:green; font-size:20px'><input name='option' value='a' id=\"quizinput1\" type=\"radio\">&nbsp;Cat</input><br><input name='option' value='b' id=\"quizinput2\" type=\"radio\">&nbsp;Mammal</input>","answer":["06"],"type":"quiz","tips":"","qid":"23.10"},{"title":"Short problem 11 -  Subclass","question":"<img src='images/Problem Set 9/9.11.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0196c0952f756b"],"type":"quiz","tips":"","qid":"23.11"},{"title":"Short problem 12 -  Same Method Name","question":"<img src='images/Problem Set 9/9.12.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0b98d1822d7e79743947e3"],"type":"quiz","tips":"","qid":"23.12"},{"title":"Short problem 13 -  Same method name 2","question":"<img src='images/Problem Set 9/9.13.jpg' alt='image'><br><input class='input-lg' id=\"quizinput1\" type=\"text\"></input>","answer":["0b98d18233787c793e4e"],"type":"quiz","tips":"","qid":"23.13"},{"title":"Short Problem 14 - Super and sub classes ","question":"<img src='images/Problem Set 9/9.14.jpg' alt='image'><br><p style='text-align:left; color:green; font-size:20px'><input name='option' value='a' id=\"quizinput1\" type=\"radio\">&nbsp;Overloading</input><br><input name='option' value='b' id=\"quizinput2\" type=\"radio\">&nbsp;Overriding</input><br><input name='option' value='c' id=\"quizinput3\" type=\"radio\">&nbsp;Extending</input><br><input name='option' value='d' id=\"quizinput4\" type=\"radio\">&nbsp;Interface</input>","answer":["05"],"type":"quiz","tips":"","qid":"23.14"},{"title":"Short Problem 15 - Question hierarchy","question":"<img src='images/Problem Set 9/9.15.jpg' alt='image'><br><font size='4px' color='green'><input type='checkbox' class='Checkboxinput' value='a'>&nbsp;&nbsp;Question&nbsp;&nbsp;<input type='checkbox' class='Checkboxinput' value='b'>&nbsp;&nbsp;Fillinquestion&nbsp;&nbsp;<input type='checkbox' class='Checkboxinput' value='c'>&nbsp;&nbsp;Choicequestion&nbsp;&nbsp;<input type='checkbox' class='Checkboxinput' value='d'>&nbsp;&nbsp;MultipleChoiceQuestion&nbsp;&nbsp;<input type='checkbox' class='Checkboxinput' value='e'>&nbsp;&nbsp;TrueFalseQuestion<br><br><img src='images/Problem Set 9/9.15.1.jpg' alt='image'>","answer":["05","06","07","00"],"type":"quiz","tips":"","qid":"23.15"},{"title":"Short Problem 16 - Question hierarchy 2","question":"<img src='images/Problem Set 9/9.15.jpg' alt='image'><br><font size='4px' color='green'><input type='checkbox' class='Checkboxinput' value='a'>&nbsp;&nbsp;Question&nbsp;&nbsp;<input type='checkbox' class='Checkboxinput' value='b'>&nbsp;&nbsp;Fillinquestion&nbsp;&nbsp;<input type='checkbox' class='Checkboxinput' value='c'>&nbsp;&nbsp;Choicequestion&nbsp;&nbsp;<input type='checkbox' class='Checkboxinput' value='d'>&nbsp;&nbsp;MultipleChoiceQuestion&nbsp;&nbsp;<input type='checkbox' class='Checkboxinput' value='e'>&nbsp;&nbsp;TrueFalseQuestion<br><br><img src='images/Problem Set 9/9.15.1.jpg' alt='image'>","answer":["07","00"],"type":"quiz","tips":"","qid":"23.16"},{"title":"Short Problem 17 - Manager","question":"// This is the first of two problems to use these classes\r\n\r\n// The manager class is a subclass of Employee. A Manager is different from an employee in that\r\n// a Manager has a bonus. So we add that instance variable\r\n\r\n// Add the code to complete the constructor\r\n\r\npublic class Manager extends Employee\r\n{\r\n    private double bonus;\r\n\r\n    /**\r\n     * Constructs a Manager\r\n     * @name the name of the manager\r\n     * @salary the salary of this manager\r\n     * @param theBonus the bonus for this Manager\r\n     */\r\n    public Manager(String name, double salary, double theBonus)\r\n    {\r\n        // TODO: complete the constructor\r\n\r\n    }\r\n\r\n    public double getBonus()\r\n    {\r\n        return bonus;\r\n    }\r\n\r\n}\r\n","classname":"Manager","expectedoutput":"","programtype":"stdin","type":"program","qid":"23.17"},{"title":"Short Problem 18 - Manager2","question":"// This problem builds on the class from the previous project.\r\n\r\n// The manager class is a subclass of Employee. A Manager is different from an employee in that\r\n// a Manager has a bonus. So we add that instance variable\r\n\r\n// In the previous problem you added the code to complete the constructor\r\n// Now override the getSalary method to return the total of the salary and bonus\r\n\r\npublic class Manager extends Employee\r\n{\r\n    private double bonus;\r\n\r\n    /**\r\n     * Constructs a Manager\r\n     * @name the name of the manager\r\n     * @salary the salary of this manager\r\n     * @param theBonus the bonus for this Manager\r\n     */\r\n    public Manager(String name, double salary, double theBonus)\r\n    {\r\n        // TODO: complete the constructor\r\n\r\n    }\r\n\r\n    public double getBonus()\r\n    {\r\n        return bonus;\r\n    }\r\n\r\n\r\n     // Gets the total salary for this Manager\r\n     // that is the salary + the bonus\r\n\r\n    public double getSalary()\r\n    {\r\n        // TODO: finish the method implementation\r\n\r\n    }\r\n}\r\n","classname":"Manager","expectedoutput":"","programtype":"stdin","type":"program","qid":"23.18"},{"title":"Short Problem 19 - Sandwich","question":"<img src='images/Problem Set 9/9.19.jpg' alt='image'><br><br><form class='form-horizontal'><div class='form-group text-left' style='margin-left:155px'><input type='checkbox' class='Checkboxinput' value='a'>&nbsp;&nbsp;sandwitch=sub;<br><input type='checkbox' class='Checkboxinput' value='b'>&nbsp;&nbsp;sub=sandwitch;<br><input type='checkbox' class='Checkboxinput' value='c'>&nbsp;&nbsp;sub=new Sandwich();<br><input type='checkbox' class='Checkboxinput' value='d'>&nbsp;&nbsp;sandwitch=new sub();</div></form>","answer":["05","00"],"type":"quiz","tips":"","qid":"23.19"},{"title":"Short Problem 20 - Checking Account","question":"<img src='images/Problem Set 9/9.20.jpg' alt='image'><br><br><form class='form-horizontal'><div class='form-group text-left' style='margin-left:155px'><input type='checkbox' class='Checkboxinput' value='a'>&nbsp;&nbsp;BankAccount<br><input type='checkbox' class='Checkboxinput' value='b'>&nbsp;&nbsp;CheckingAccount<br><input type='checkbox' class='Checkboxinput' value='c'>&nbsp;&nbsp;Not enough information to say</div></form>","answer":["06"],"type":"quiz","tips":"","qid":"23.20"},{"title":"Question 1","question":"// This problem has several parts.\r\n// First complete the GeometricSolid interface. The interface has two methods\r\n//      1) getVolume \r\n//      2) getSurfaceArea\r\n// both of which return a double\r\n//\r\n// Then modify the both the Shere and the Cube method to implement the\r\n// GeometricSolid interface\r\n//\r\n// Need help starting this question? In the lesson titled \r\n// \"Starting points: Problem Set Questions\", go to the\r\n// problem titled \"Problem Set 9 - Question 1\" for some tips on \r\n// how to begin.\r\n\r\npublic interface GeometricSolid\r\n{\r\n\r\n}\r\n// formulas for surface area and volume\r\n// http://math.about.com/od/formulas/ss/surfaceareavol.htm\r\n//\r\n// TODO: complete the code so that Sphere implements the GeometricSolid interface\r\n//\r\nclass Sphere implements GeometricSolid\r\n{\r\n    private double radius;\r\n\r\n    /**\r\n     * Constructor for objects of class Sphere\r\n     */\r\n    public Sphere()\r\n    {\r\n        radius = 0;\r\n    }\r\n\r\n    /**\r\n     * Constructs a Shpere with the given radius\r\n     * @param r the radius\r\n     */\r\n    public Sphere( double r)\r\n    {\r\n        radius = r;\r\n    }\r\n\r\n    public void setRadius(double r)\r\n    {\r\n        radius = r;\r\n    }\r\n\r\n    public double getRadius()\r\n    {\r\n        return radius;\r\n    }\r\n\r\n    //other methods\r\n\r\n}\r\n// formulas for surface area and volume\r\n// http://math2.org/math/geometry/areasvols.htm\r\n//\r\n// TODO: complete the code so that Cube implements the GeometricSolid interface\r\n//\r\nclass Cube implements GeometricSolid\r\n{\r\n    private double side;\r\n\r\n    public Cube(double s)\r\n    {\r\n        side = s;\r\n    }\r\n\r\n    // other methods\r\n\r\n\r\n}","testcases":"//This is provided for reference.  You don't need to change this.\r\n\r\npublic class InterfaceTester\r\n{\r\n   public static void main(String[] args)\r\n   {\r\n       GeometricSolid solid = new Sphere(10.0);\r\n      \r\n       System.out.printf(\"Volume: %.2f\\n\",solid.getVolume());\r\n       System.out.println(\"Expected: 4188.79\");\r\n       System.out.printf(\"SurfaceArea: %.2f\\n\",solid.getSurfaceArea());\r\n       System.out.println(\"Expected: 1256.64\");       \r\n       \r\n       solid = new Sphere(5.1);\r\n       System.out.printf(\"Volume: %.2f\\n\",solid.getVolume());\r\n       System.out.println(\"Expected:  555.65\");\r\n       System.out.printf(\"SurfaceArea: %.2f\\n\",solid.getSurfaceArea());\r\n       System.out.println(\"Expected: 326.85\"); \r\n       \r\n       solid  = new Cube(5.0);\r\n       System.out.printf(\"Volume: %.2f\\n\",solid.getVolume());\r\n       System.out.println(\"Expected: 125.00\");\r\n       System.out.printf(\"SurfaceArea: %.2f\\n\",solid.getSurfaceArea());\r\n       System.out.println(\"Expected: 150.00\");    \r\n\r\n       solid  = new Cube(3.0);\r\n       System.out.printf(\"Volume: %.2f\\n\",solid.getVolume());\r\n       System.out.println(\"Expected: 27.00\");\r\n       System.out.printf(\"SurfaceArea: %.2f\\n\",solid.getSurfaceArea());\r\n       System.out.println(\"Expected: 54.00\");   \r\n   }\r\n}\r\n","classname":"InterfaceTester","programtype":"api","type":"program","qid":"23.21"},{"title":"Question 2","question":"// You are going to add a true/false type question to the question heirachy. Call it\r\n// TrueFalseQuestion\r\n//\r\n// When the quiz is displayed, we want this text to preceed the question.\r\n//     Answer True or False: question here\r\n// We want the \"Answer True or False: \" to be prepended automatically.\r\n// So if the user sets the text of the question to \"Albert Einstein was the inventer of Java.\"\r\n// the question will be displayed to the user like this\r\n//      Answer True or False: Albert Einstein was the inventer of Java.\r\n//\r\n// Capitalization should not matter when determining if the answer is correct. Also t for true\r\n// and f for false should be accepted.\r\n//\r\n// You will need to override three methods although not everyone will override the\r\n// exact same three methods\r\n//\r\n// You will not need to add instance variables\r\n//\r\n// Need help starting this question? In the lesson titled \r\n// \"Starting points: Problem Set Questions\", go to the\r\n// problem titled \"Problem Set 9 - Question 2\" for some tips on \r\n// how to begin.\r\n//\r\nclass TrueFalseQuestion\r\n{\r\n   // TODO: for the draft, override the appropriate method(s) to present the question as specified\r\n   // TODO: for the final, override the necessay  method(s) all valid answers as specified\r\n\r\n}\r\n// This is provided for reference. You don't need to modify this file\r\n\r\n/**\r\n   A question with a text and an answer.\r\n*/\r\nclass Question\r\n{\r\n    private String text;\r\n    private String answer;\r\n\r\n    /**\r\n       Constructs a question with empty question and answer.\r\n    */\r\n    public Question()\r\n    {\r\n        text = \"\";\r\n        answer = \"\";\r\n    }\r\n\r\n    /**\r\n       Sets the question text.\r\n       @param questionText the text of this question\r\n    */\r\n    public void setText(String questionText)\r\n    {\r\n        text = questionText;\r\n    }\r\n\r\n    /**\r\n       Sets the answer for this question.\r\n       @param correctResponse the answer\r\n    */\r\n    public void setAnswer(String correctResponse)\r\n    {\r\n        answer = correctResponse;\r\n    }\r\n\r\n    /**\r\n       Checks a given response for correctness.\r\n       @param response the response to check\r\n       @return true if the response was correct, false otherwise\r\n    */\r\n    public boolean checkAnswer(String response)\r\n    {\r\n        return response.equals(answer);\r\n    }\r\n\r\n    /**\r\n       Displays this question.\r\n    */\r\n    public void display()\r\n    {\r\n        System.out.println(text);\r\n    }\r\n}\r\n\r\n","testcases":"","classname":"Digits","programtype":"api","type":"program","qid":"23.22"},{"title":"Question 3","question":"// In this problem you will create a class heirarchy of electronic circuits. You do not have\r\n// to understand anything about circuits to do this problem. Just look at the specification\r\n// for the Java classes (That is what I did)\r\n//\r\n// Here is a link to a diagram showing the kinds of operational amplifiers we will be\r\n// working with\r\n//\r\n// The input to the amplifier is the voltage Vi and the output is the voltage Vo. The output\r\n// of an amplifier is proportional to the input. The constant of proportionality is called\r\n// the gain of the amplifier.\r\n\r\n// You have been supplied with a class that models this Amplifier(a). It is the super class.\r\n// You will write  the three subclasses: InvertingAmplifier(b), NoninvertingAmplifier(c), and\r\n// VoltageDividerAmplifier(d).\r\n//\r\n// R1 and R2 represent resistance. The gain (g) is calculated from the resistance as follows:\r\n// InvertingAmplifier:         g = R2 / R1\r\n// NoninvertingAmplifier:      g = 1 + (R2 / R1)\r\n// VoltageDividerAmplifier:    g = R2 / (R1 + R2)\r\n//\r\n// Each subclass will override the getGain method to return the appropriate gain\r\n// You will also need to give each subclass a constructor, but you can invoke the Amplifier\r\n// constructor from the subclass constructor.  For more info, see:\r\n// https://docs.oracle.com/javase/tutorial/java/IandI/super.html\r\n//\r\n// Need help starting this question? In the lesson titled \r\n// \"Starting points: Problem Set Questions\", go to the\r\n// problem titled \"Problem Set 9 - Question 3\" for some tips on \r\n// how to begin.\r\n\r\n//You do not need to change this class\r\nclass Amplifier\r\n{\r\n    private int r1;\r\n    private int r2;\r\n\r\n    /**\r\n     * Constructs an operational Amplifier\r\n     * @param resistance1 the first resistance\r\n     * @param resistance2 the second resistance\r\n     */\r\n    public  Amplifier( int resistance1, int resistance2)\r\n    {\r\n        r1 = resistance1;\r\n        r2 = resistance2;\r\n    }\r\n\r\n    /**\r\n     * Gets the first resistance\r\n     * @return the first resistance\r\n     */\r\n    public int getR1()\r\n    {\r\n        return r1;\r\n    }\r\n\r\n    /**\r\n     * Gets the second resistance\r\n     * @return the second resistance\r\n     */\r\n    public int getR2()\r\n    {\r\n        return r2;\r\n    }\r\n\r\n    /**\r\n     * Set a new value for the first resistance\r\n     * @param resistance the new resistance\r\n     */\r\n    public void setR1(int resistance)\r\n    {\r\n        r1 = resistance;\r\n    }\r\n\r\n    /**\r\n     * Set a new value for the second resistance\r\n     * @param resistance the new resistance\r\n     */\r\n    public void setR2(int resistance)\r\n    {\r\n        r2 = resistance;\r\n    }\r\n\r\n    /**\r\n     * Gets the gain for this amplifier circuit\r\n     * @return the gain\r\n     */\r\n    public double getGain()\r\n    {\r\n        return 0;\r\n    }\r\n}\r\n\r\nclass NoninvertingAmplifier\r\n{\r\n    // TODO: supply the implementation of NoninvertingAmplifier as a subclass of Amplifier\r\n    // R1 and R2 represent resistance. The gain (g) is calculated from the resistance as follows:\r\n    // NoninvertingAmplifier:      g = 1 + (R2 / R1)\r\n    // TODO: the getGain method needs to return the correct gain (g)\r\n}\r\n\r\nclass VoltageDividerAmplifier\r\n{\r\n     // TODO: supply the implementation of VoltageDividerAmplifier as a subclass of Amplifier\r\n     // R1 and R2 represent resistance. The gain (g) is calculated from the resistance as follows:\r\n     // VoltageDividerAmplifier:    g = R2 / (R1 + R2)\r\n     // TODO: the getGain method needs to return the correct gain (g)\r\n}\r\n\r\nclass InvertingAmplifier\r\n{\r\n    // TODO: supply the implementation of InvertingAmplifier as a subclass of Amplifier\r\n    // R1 and R2 represent resistance. The gain (g) is calculated from the resistance as follows:\r\n    // InvertingAmplifier:         g = R2 / R1\r\n    // TODO: the getGain method needs to return the correct gain (g)\r\n}\r\n","testcases":"\r\npublic class AmplifierTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        //test InvertingAmplifier\r\n        Amplifier amp = new InvertingAmplifier(5500, 10000);\r\n        System.out.printf(\"%.2f\\n\", amp.getGain());\r\n        System.out.println(\"Expected: 1.82\");\r\n\r\n        amp.setR1(3000);\r\n        amp.setR2(11000);\r\n        System.out.printf(\"%.2f\\n\", amp.getGain());\r\n        System.out.println(\"Expected: 3.67\");\r\n        \r\n        //Test NoninvertingAmplifier\r\n        amp = new NoninvertingAmplifier(5000, 10000);\r\n        System.out.printf(\"%.2f\\n\", amp.getGain());\r\n        System.out.println(\"Expected: 3.00\");\r\n        \r\n        amp.setR1(3000);\r\n        amp.setR2(20000);\r\n        System.out.printf(\"%.2f\\n\", amp.getGain());\r\n        System.out.println(\"Expected: 7.67\");\r\n\r\n        //Test VoltageDividerAmplifier\r\n        amp = new VoltageDividerAmplifier(5000, 10000);\r\n        System.out.printf(\"%.2f\\n\", amp.getGain());\r\n        System.out.println(\"Expected: 0.67\");\r\n        \r\n        amp.setR1(3000);\r\n        amp.setR2(20000);\r\n        System.out.printf(\"%.2f\\n\", amp.getGain());\r\n        System.out.println(\"Expected: 0.87\");\r\n    }\r\n}\r\n","classname":"AmplifierTester","programtype":"api","type":"program","qid":"23.23"}]}}}